'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="HRMS")>  _
Partial Public Class LqHRDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTblAddress(instance As TblAddress)
    End Sub
  Partial Private Sub UpdateTblAddress(instance As TblAddress)
    End Sub
  Partial Private Sub DeleteTblAddress(instance As TblAddress)
    End Sub
  Partial Private Sub InsertTblApplicantMedicalIssue(instance As TblApplicantMedicalIssue)
    End Sub
  Partial Private Sub UpdateTblApplicantMedicalIssue(instance As TblApplicantMedicalIssue)
    End Sub
  Partial Private Sub DeleteTblApplicantMedicalIssue(instance As TblApplicantMedicalIssue)
    End Sub
  Partial Private Sub InsertTblApplicantSkill(instance As TblApplicantSkill)
    End Sub
  Partial Private Sub UpdateTblApplicantSkill(instance As TblApplicantSkill)
    End Sub
  Partial Private Sub DeleteTblApplicantSkill(instance As TblApplicantSkill)
    End Sub
  Partial Private Sub InsertTblAttachment(instance As TblAttachment)
    End Sub
  Partial Private Sub UpdateTblAttachment(instance As TblAttachment)
    End Sub
  Partial Private Sub DeleteTblAttachment(instance As TblAttachment)
    End Sub
  Partial Private Sub InsertTblBlood(instance As TblBlood)
    End Sub
  Partial Private Sub UpdateTblBlood(instance As TblBlood)
    End Sub
  Partial Private Sub DeleteTblBlood(instance As TblBlood)
    End Sub
  Partial Private Sub InsertTblCategory(instance As TblCategory)
    End Sub
  Partial Private Sub UpdateTblCategory(instance As TblCategory)
    End Sub
  Partial Private Sub DeleteTblCategory(instance As TblCategory)
    End Sub
  Partial Private Sub InsertTblCertificate(instance As TblCertificate)
    End Sub
  Partial Private Sub UpdateTblCertificate(instance As TblCertificate)
    End Sub
  Partial Private Sub DeleteTblCertificate(instance As TblCertificate)
    End Sub
  Partial Private Sub InsertTblContractType(instance As TblContractType)
    End Sub
  Partial Private Sub UpdateTblContractType(instance As TblContractType)
    End Sub
  Partial Private Sub DeleteTblContractType(instance As TblContractType)
    End Sub
  Partial Private Sub InsertTblCurrency(instance As TblCurrency)
    End Sub
  Partial Private Sub UpdateTblCurrency(instance As TblCurrency)
    End Sub
  Partial Private Sub DeleteTblCurrency(instance As TblCurrency)
    End Sub
  Partial Private Sub InsertTblDepartment(instance As TblDepartment)
    End Sub
  Partial Private Sub UpdateTblDepartment(instance As TblDepartment)
    End Sub
  Partial Private Sub DeleteTblDepartment(instance As TblDepartment)
    End Sub
  Partial Private Sub InsertTblDepartmentCategory(instance As TblDepartmentCategory)
    End Sub
  Partial Private Sub UpdateTblDepartmentCategory(instance As TblDepartmentCategory)
    End Sub
  Partial Private Sub DeleteTblDepartmentCategory(instance As TblDepartmentCategory)
    End Sub
  Partial Private Sub InsertTblDepartmentForSchedule(instance As TblDepartmentForSchedule)
    End Sub
  Partial Private Sub UpdateTblDepartmentForSchedule(instance As TblDepartmentForSchedule)
    End Sub
  Partial Private Sub DeleteTblDepartmentForSchedule(instance As TblDepartmentForSchedule)
    End Sub
  Partial Private Sub InsertTblDepartmentType(instance As TblDepartmentType)
    End Sub
  Partial Private Sub UpdateTblDepartmentType(instance As TblDepartmentType)
    End Sub
  Partial Private Sub DeleteTblDepartmentType(instance As TblDepartmentType)
    End Sub
  Partial Private Sub InsertTblEducation(instance As TblEducation)
    End Sub
  Partial Private Sub UpdateTblEducation(instance As TblEducation)
    End Sub
  Partial Private Sub DeleteTblEducation(instance As TblEducation)
    End Sub
  Partial Private Sub InsertTblExperienceHistory(instance As TblExperienceHistory)
    End Sub
  Partial Private Sub UpdateTblExperienceHistory(instance As TblExperienceHistory)
    End Sub
  Partial Private Sub DeleteTblExperienceHistory(instance As TblExperienceHistory)
    End Sub
  Partial Private Sub InsertTblJobCategory(instance As TblJobCategory)
    End Sub
  Partial Private Sub UpdateTblJobCategory(instance As TblJobCategory)
    End Sub
  Partial Private Sub DeleteTblJobCategory(instance As TblJobCategory)
    End Sub
  Partial Private Sub InsertTblJobRequirement(instance As TblJobRequirement)
    End Sub
  Partial Private Sub UpdateTblJobRequirement(instance As TblJobRequirement)
    End Sub
  Partial Private Sub DeleteTblJobRequirement(instance As TblJobRequirement)
    End Sub
  Partial Private Sub InsertTblJobsPerDepartment(instance As TblJobsPerDepartment)
    End Sub
  Partial Private Sub UpdateTblJobsPerDepartment(instance As TblJobsPerDepartment)
    End Sub
  Partial Private Sub DeleteTblJobsPerDepartment(instance As TblJobsPerDepartment)
    End Sub
  Partial Private Sub InsertTblJobTask(instance As TblJobTask)
    End Sub
  Partial Private Sub UpdateTblJobTask(instance As TblJobTask)
    End Sub
  Partial Private Sub DeleteTblJobTask(instance As TblJobTask)
    End Sub
  Partial Private Sub InsertTblLanguage(instance As TblLanguage)
    End Sub
  Partial Private Sub UpdateTblLanguage(instance As TblLanguage)
    End Sub
  Partial Private Sub DeleteTblLanguage(instance As TblLanguage)
    End Sub
  Partial Private Sub InsertTblMedicalIssue(instance As TblMedicalIssue)
    End Sub
  Partial Private Sub UpdateTblMedicalIssue(instance As TblMedicalIssue)
    End Sub
  Partial Private Sub DeleteTblMedicalIssue(instance As TblMedicalIssue)
    End Sub
  Partial Private Sub InsertTblMotivationPunishment(instance As TblMotivationPunishment)
    End Sub
  Partial Private Sub UpdateTblMotivationPunishment(instance As TblMotivationPunishment)
    End Sub
  Partial Private Sub DeleteTblMotivationPunishment(instance As TblMotivationPunishment)
    End Sub
  Partial Private Sub InsertTblMotivationPunishmentType(instance As TblMotivationPunishmentType)
    End Sub
  Partial Private Sub UpdateTblMotivationPunishmentType(instance As TblMotivationPunishmentType)
    End Sub
  Partial Private Sub DeleteTblMotivationPunishmentType(instance As TblMotivationPunishmentType)
    End Sub
  Partial Private Sub InsertTblPosition(instance As TblPosition)
    End Sub
  Partial Private Sub UpdateTblPosition(instance As TblPosition)
    End Sub
  Partial Private Sub DeleteTblPosition(instance As TblPosition)
    End Sub
  Partial Private Sub InsertTblRelativeReference(instance As TblRelativeReference)
    End Sub
  Partial Private Sub UpdateTblRelativeReference(instance As TblRelativeReference)
    End Sub
  Partial Private Sub DeleteTblRelativeReference(instance As TblRelativeReference)
    End Sub
  Partial Private Sub InsertTblRequiredHoursForJob(instance As TblRequiredHoursForJob)
    End Sub
  Partial Private Sub UpdateTblRequiredHoursForJob(instance As TblRequiredHoursForJob)
    End Sub
  Partial Private Sub DeleteTblRequiredHoursForJob(instance As TblRequiredHoursForJob)
    End Sub
  Partial Private Sub InsertTblRequiredJob(instance As TblRequiredJob)
    End Sub
  Partial Private Sub UpdateTblRequiredJob(instance As TblRequiredJob)
    End Sub
  Partial Private Sub DeleteTblRequiredJob(instance As TblRequiredJob)
    End Sub
  Partial Private Sub InsertTblRequirement(instance As TblRequirement)
    End Sub
  Partial Private Sub UpdateTblRequirement(instance As TblRequirement)
    End Sub
  Partial Private Sub DeleteTblRequirement(instance As TblRequirement)
    End Sub
  Partial Private Sub InsertTblSkill(instance As TblSkill)
    End Sub
  Partial Private Sub UpdateTblSkill(instance As TblSkill)
    End Sub
  Partial Private Sub DeleteTblSkill(instance As TblSkill)
    End Sub
  Partial Private Sub InsertTblStatus(instance As TblStatus)
    End Sub
  Partial Private Sub UpdateTblStatus(instance As TblStatus)
    End Sub
  Partial Private Sub DeleteTblStatus(instance As TblStatus)
    End Sub
  Partial Private Sub InsertTblTask(instance As TblTask)
    End Sub
  Partial Private Sub UpdateTblTask(instance As TblTask)
    End Sub
  Partial Private Sub DeleteTblTask(instance As TblTask)
    End Sub
  Partial Private Sub InsertTblType(instance As TblType)
    End Sub
  Partial Private Sub UpdateTblType(instance As TblType)
    End Sub
  Partial Private Sub DeleteTblType(instance As TblType)
    End Sub
  Partial Private Sub InsertTblUser(instance As TblUser)
    End Sub
  Partial Private Sub UpdateTblUser(instance As TblUser)
    End Sub
  Partial Private Sub DeleteTblUser(instance As TblUser)
    End Sub
  Partial Private Sub InsertTblWifeHusband(instance As TblWifeHusband)
    End Sub
  Partial Private Sub UpdateTblWifeHusband(instance As TblWifeHusband)
    End Sub
  Partial Private Sub DeleteTblWifeHusband(instance As TblWifeHusband)
    End Sub
  Partial Private Sub InsertTblWorkShop(instance As TblWorkShop)
    End Sub
  Partial Private Sub UpdateTblWorkShop(instance As TblWorkShop)
    End Sub
  Partial Private Sub DeleteTblWorkShop(instance As TblWorkShop)
    End Sub
  Partial Private Sub InsertTblEmployee(instance As TblEmployee)
    End Sub
  Partial Private Sub UpdateTblEmployee(instance As TblEmployee)
    End Sub
  Partial Private Sub DeleteTblEmployee(instance As TblEmployee)
    End Sub
  Partial Private Sub InsertTblLeavePermission(instance As TblLeavePermission)
    End Sub
  Partial Private Sub UpdateTblLeavePermission(instance As TblLeavePermission)
    End Sub
  Partial Private Sub DeleteTblLeavePermission(instance As TblLeavePermission)
    End Sub
  Partial Private Sub InsertTblTraineeLecture(instance As TblTraineeLecture)
    End Sub
  Partial Private Sub UpdateTblTraineeLecture(instance As TblTraineeLecture)
    End Sub
  Partial Private Sub DeleteTblTraineeLecture(instance As TblTraineeLecture)
    End Sub
  Partial Private Sub InsertTblLecture(instance As TblLecture)
    End Sub
  Partial Private Sub UpdateTblLecture(instance As TblLecture)
    End Sub
  Partial Private Sub DeleteTblLecture(instance As TblLecture)
    End Sub
  Partial Private Sub InsertTblPAForTraineer(instance As TblPAForTraineer)
    End Sub
  Partial Private Sub UpdateTblPAForTraineer(instance As TblPAForTraineer)
    End Sub
  Partial Private Sub DeleteTblPAForTraineer(instance As TblPAForTraineer)
    End Sub
  Partial Private Sub InsertTblTraineePerformanceAppraisal(instance As TblTraineePerformanceAppraisal)
    End Sub
  Partial Private Sub UpdateTblTraineePerformanceAppraisal(instance As TblTraineePerformanceAppraisal)
    End Sub
  Partial Private Sub DeleteTblTraineePerformanceAppraisal(instance As TblTraineePerformanceAppraisal)
    End Sub
  Partial Private Sub InsertTblPAForEmployee(instance As TblPAForEmployee)
    End Sub
  Partial Private Sub UpdateTblPAForEmployee(instance As TblPAForEmployee)
    End Sub
  Partial Private Sub DeleteTblPAForEmployee(instance As TblPAForEmployee)
    End Sub
  Partial Private Sub InsertTblPAPerJob(instance As TblPAPerJob)
    End Sub
  Partial Private Sub UpdateTblPAPerJob(instance As TblPAPerJob)
    End Sub
  Partial Private Sub DeleteTblPAPerJob(instance As TblPAPerJob)
    End Sub
  Partial Private Sub InsertTblAveragePAPerTask(instance As TblAveragePAPerTask)
    End Sub
  Partial Private Sub UpdateTblAveragePAPerTask(instance As TblAveragePAPerTask)
    End Sub
  Partial Private Sub DeleteTblAveragePAPerTask(instance As TblAveragePAPerTask)
    End Sub
  Partial Private Sub InsertTblEmployeePA(instance As TblEmployeePA)
    End Sub
  Partial Private Sub UpdateTblEmployeePA(instance As TblEmployeePA)
    End Sub
  Partial Private Sub DeleteTblEmployeePA(instance As TblEmployeePA)
    End Sub
  Partial Private Sub InsertTblCompanyProfile(instance As TblCompanyProfile)
    End Sub
  Partial Private Sub UpdateTblCompanyProfile(instance As TblCompanyProfile)
    End Sub
  Partial Private Sub DeleteTblCompanyProfile(instance As TblCompanyProfile)
    End Sub
  Partial Private Sub InsertTblYearlyVacation(instance As TblYearlyVacation)
    End Sub
  Partial Private Sub UpdateTblYearlyVacation(instance As TblYearlyVacation)
    End Sub
  Partial Private Sub DeleteTblYearlyVacation(instance As TblYearlyVacation)
    End Sub
  Partial Private Sub InsertTblVacation(instance As TblVacation)
    End Sub
  Partial Private Sub UpdateTblVacation(instance As TblVacation)
    End Sub
  Partial Private Sub DeleteTblVacation(instance As TblVacation)
    End Sub
  Partial Private Sub InsertTblHoliday(instance As TblHoliday)
    End Sub
  Partial Private Sub UpdateTblHoliday(instance As TblHoliday)
    End Sub
  Partial Private Sub DeleteTblHoliday(instance As TblHoliday)
    End Sub
  Partial Private Sub InsertTblEmployeeHoliday(instance As TblEmployeeHoliday)
    End Sub
  Partial Private Sub UpdateTblEmployeeHoliday(instance As TblEmployeeHoliday)
    End Sub
  Partial Private Sub DeleteTblEmployeeHoliday(instance As TblEmployeeHoliday)
    End Sub
  Partial Private Sub InsertTblExecuteVacationsDay(instance As TblExecuteVacationsDay)
    End Sub
  Partial Private Sub UpdateTblExecuteVacationsDay(instance As TblExecuteVacationsDay)
    End Sub
  Partial Private Sub DeleteTblExecuteVacationsDay(instance As TblExecuteVacationsDay)
    End Sub
  Partial Private Sub InsertTblVacationsHolidaysDashBoard(instance As TblVacationsHolidaysDashBoard)
    End Sub
  Partial Private Sub UpdateTblVacationsHolidaysDashBoard(instance As TblVacationsHolidaysDashBoard)
    End Sub
  Partial Private Sub DeleteTblVacationsHolidaysDashBoard(instance As TblVacationsHolidaysDashBoard)
    End Sub
  Partial Private Sub InsertTblEmployeeVacation(instance As TblEmployeeVacation)
    End Sub
  Partial Private Sub UpdateTblEmployeeVacation(instance As TblEmployeeVacation)
    End Sub
  Partial Private Sub DeleteTblEmployeeVacation(instance As TblEmployeeVacation)
    End Sub
  Partial Private Sub InsertTblEmployeeJob(instance As TblEmployeeJob)
    End Sub
  Partial Private Sub UpdateTblEmployeeJob(instance As TblEmployeeJob)
    End Sub
  Partial Private Sub DeleteTblEmployeeJob(instance As TblEmployeeJob)
    End Sub
  Partial Private Sub InsertTblJobDescription(instance As TblJobDescription)
    End Sub
  Partial Private Sub UpdateTblJobDescription(instance As TblJobDescription)
    End Sub
  Partial Private Sub DeleteTblJobDescription(instance As TblJobDescription)
    End Sub
  Partial Private Sub InsertTblClassification(instance As TblClassification)
    End Sub
  Partial Private Sub UpdateTblClassification(instance As TblClassification)
    End Sub
  Partial Private Sub DeleteTblClassification(instance As TblClassification)
    End Sub
  Partial Private Sub InsertTblDegree(instance As TblDegree)
    End Sub
  Partial Private Sub UpdateTblDegree(instance As TblDegree)
    End Sub
  Partial Private Sub DeleteTblDegree(instance As TblDegree)
    End Sub
  Partial Private Sub InsertTblMonth(instance As TblMonth)
    End Sub
  Partial Private Sub UpdateTblMonth(instance As TblMonth)
    End Sub
  Partial Private Sub DeleteTblMonth(instance As TblMonth)
    End Sub
  Partial Private Sub InsertTblEmployeeSalary(instance As TblEmployeeSalary)
    End Sub
  Partial Private Sub UpdateTblEmployeeSalary(instance As TblEmployeeSalary)
    End Sub
  Partial Private Sub DeleteTblEmployeeSalary(instance As TblEmployeeSalary)
    End Sub
  Partial Private Sub InsertTblYear(instance As TblYear)
    End Sub
  Partial Private Sub UpdateTblYear(instance As TblYear)
    End Sub
  Partial Private Sub DeleteTblYear(instance As TblYear)
    End Sub
  Partial Private Sub InsertTblMonthsPerYear(instance As TblMonthsPerYear)
    End Sub
  Partial Private Sub UpdateTblMonthsPerYear(instance As TblMonthsPerYear)
    End Sub
  Partial Private Sub DeleteTblMonthsPerYear(instance As TblMonthsPerYear)
    End Sub
  Partial Private Sub InsertTblFamilyMember(instance As TblFamilyMember)
    End Sub
  Partial Private Sub UpdateTblFamilyMember(instance As TblFamilyMember)
    End Sub
  Partial Private Sub DeleteTblFamilyMember(instance As TblFamilyMember)
    End Sub
  Partial Private Sub InsertTblEmployeeSalaryHistory(instance As TblEmployeeSalaryHistory)
    End Sub
  Partial Private Sub UpdateTblEmployeeSalaryHistory(instance As TblEmployeeSalaryHistory)
    End Sub
  Partial Private Sub DeleteTblEmployeeSalaryHistory(instance As TblEmployeeSalaryHistory)
    End Sub
  Partial Private Sub InsertTblUnit(instance As TblUnit)
    End Sub
  Partial Private Sub UpdateTblUnit(instance As TblUnit)
    End Sub
  Partial Private Sub DeleteTblUnit(instance As TblUnit)
    End Sub
  Partial Private Sub InsertTblSalaryCategory(instance As TblSalaryCategory)
    End Sub
  Partial Private Sub UpdateTblSalaryCategory(instance As TblSalaryCategory)
    End Sub
  Partial Private Sub DeleteTblSalaryCategory(instance As TblSalaryCategory)
    End Sub
  Partial Private Sub InsertTblSetting(instance As TblSetting)
    End Sub
  Partial Private Sub UpdateTblSetting(instance As TblSetting)
    End Sub
  Partial Private Sub DeleteTblSetting(instance As TblSetting)
    End Sub
  Partial Private Sub InsertTblApplicant(instance As TblApplicant)
    End Sub
  Partial Private Sub UpdateTblApplicant(instance As TblApplicant)
    End Sub
  Partial Private Sub DeleteTblApplicant(instance As TblApplicant)
    End Sub
  Partial Private Sub InsertTblEmployeeSalary2(instance As TblEmployeeSalary2)
    End Sub
  Partial Private Sub UpdateTblEmployeeSalary2(instance As TblEmployeeSalary2)
    End Sub
  Partial Private Sub DeleteTblEmployeeSalary2(instance As TblEmployeeSalary2)
    End Sub
  Partial Private Sub InsertTblTrainee(instance As TblTrainee)
    End Sub
  Partial Private Sub UpdateTblTrainee(instance As TblTrainee)
    End Sub
  Partial Private Sub DeleteTblTrainee(instance As TblTrainee)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.HR.My.MySettings.Default.HRMSConnectionString2, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property TblAddresses() As System.Data.Linq.Table(Of TblAddress)
		Get
			Return Me.GetTable(Of TblAddress)
		End Get
	End Property
	
	Public ReadOnly Property TblApplicantMedicalIssues() As System.Data.Linq.Table(Of TblApplicantMedicalIssue)
		Get
			Return Me.GetTable(Of TblApplicantMedicalIssue)
		End Get
	End Property
	
	Public ReadOnly Property TblApplicantSkills() As System.Data.Linq.Table(Of TblApplicantSkill)
		Get
			Return Me.GetTable(Of TblApplicantSkill)
		End Get
	End Property
	
	Public ReadOnly Property TblAttachments() As System.Data.Linq.Table(Of TblAttachment)
		Get
			Return Me.GetTable(Of TblAttachment)
		End Get
	End Property
	
	Public ReadOnly Property TblBloods() As System.Data.Linq.Table(Of TblBlood)
		Get
			Return Me.GetTable(Of TblBlood)
		End Get
	End Property
	
	Public ReadOnly Property TblCategories() As System.Data.Linq.Table(Of TblCategory)
		Get
			Return Me.GetTable(Of TblCategory)
		End Get
	End Property
	
	Public ReadOnly Property TblCertificates() As System.Data.Linq.Table(Of TblCertificate)
		Get
			Return Me.GetTable(Of TblCertificate)
		End Get
	End Property
	
	Public ReadOnly Property TblContractTypes() As System.Data.Linq.Table(Of TblContractType)
		Get
			Return Me.GetTable(Of TblContractType)
		End Get
	End Property
	
	Public ReadOnly Property TblCurrencies() As System.Data.Linq.Table(Of TblCurrency)
		Get
			Return Me.GetTable(Of TblCurrency)
		End Get
	End Property
	
	Public ReadOnly Property TblDepartments() As System.Data.Linq.Table(Of TblDepartment)
		Get
			Return Me.GetTable(Of TblDepartment)
		End Get
	End Property
	
	Public ReadOnly Property TblDepartmentCategories() As System.Data.Linq.Table(Of TblDepartmentCategory)
		Get
			Return Me.GetTable(Of TblDepartmentCategory)
		End Get
	End Property
	
	Public ReadOnly Property TblDepartmentForSchedules() As System.Data.Linq.Table(Of TblDepartmentForSchedule)
		Get
			Return Me.GetTable(Of TblDepartmentForSchedule)
		End Get
	End Property
	
	Public ReadOnly Property TblDepartmentTypes() As System.Data.Linq.Table(Of TblDepartmentType)
		Get
			Return Me.GetTable(Of TblDepartmentType)
		End Get
	End Property
	
	Public ReadOnly Property TblEducations() As System.Data.Linq.Table(Of TblEducation)
		Get
			Return Me.GetTable(Of TblEducation)
		End Get
	End Property
	
	Public ReadOnly Property TblExperienceHistories() As System.Data.Linq.Table(Of TblExperienceHistory)
		Get
			Return Me.GetTable(Of TblExperienceHistory)
		End Get
	End Property
	
	Public ReadOnly Property TblJobCategories() As System.Data.Linq.Table(Of TblJobCategory)
		Get
			Return Me.GetTable(Of TblJobCategory)
		End Get
	End Property
	
	Public ReadOnly Property TblJobRequirements() As System.Data.Linq.Table(Of TblJobRequirement)
		Get
			Return Me.GetTable(Of TblJobRequirement)
		End Get
	End Property
	
	Public ReadOnly Property TblJobsPerDepartments() As System.Data.Linq.Table(Of TblJobsPerDepartment)
		Get
			Return Me.GetTable(Of TblJobsPerDepartment)
		End Get
	End Property
	
	Public ReadOnly Property TblJobTasks() As System.Data.Linq.Table(Of TblJobTask)
		Get
			Return Me.GetTable(Of TblJobTask)
		End Get
	End Property
	
	Public ReadOnly Property TblLanguages() As System.Data.Linq.Table(Of TblLanguage)
		Get
			Return Me.GetTable(Of TblLanguage)
		End Get
	End Property
	
	Public ReadOnly Property TblMedicalIssues() As System.Data.Linq.Table(Of TblMedicalIssue)
		Get
			Return Me.GetTable(Of TblMedicalIssue)
		End Get
	End Property
	
	Public ReadOnly Property TblMotivationPunishments() As System.Data.Linq.Table(Of TblMotivationPunishment)
		Get
			Return Me.GetTable(Of TblMotivationPunishment)
		End Get
	End Property
	
	Public ReadOnly Property TblMotivationPunishmentTypes() As System.Data.Linq.Table(Of TblMotivationPunishmentType)
		Get
			Return Me.GetTable(Of TblMotivationPunishmentType)
		End Get
	End Property
	
	Public ReadOnly Property TblPositions() As System.Data.Linq.Table(Of TblPosition)
		Get
			Return Me.GetTable(Of TblPosition)
		End Get
	End Property
	
	Public ReadOnly Property TblRelativeReferences() As System.Data.Linq.Table(Of TblRelativeReference)
		Get
			Return Me.GetTable(Of TblRelativeReference)
		End Get
	End Property
	
	Public ReadOnly Property TblRequiredHoursForJobs() As System.Data.Linq.Table(Of TblRequiredHoursForJob)
		Get
			Return Me.GetTable(Of TblRequiredHoursForJob)
		End Get
	End Property
	
	Public ReadOnly Property TblRequiredJobs() As System.Data.Linq.Table(Of TblRequiredJob)
		Get
			Return Me.GetTable(Of TblRequiredJob)
		End Get
	End Property
	
	Public ReadOnly Property TblRequirements() As System.Data.Linq.Table(Of TblRequirement)
		Get
			Return Me.GetTable(Of TblRequirement)
		End Get
	End Property
	
	Public ReadOnly Property TblSkills() As System.Data.Linq.Table(Of TblSkill)
		Get
			Return Me.GetTable(Of TblSkill)
		End Get
	End Property
	
	Public ReadOnly Property TblStatus() As System.Data.Linq.Table(Of TblStatus)
		Get
			Return Me.GetTable(Of TblStatus)
		End Get
	End Property
	
	Public ReadOnly Property TblTasks() As System.Data.Linq.Table(Of TblTask)
		Get
			Return Me.GetTable(Of TblTask)
		End Get
	End Property
	
	Public ReadOnly Property TblTypes() As System.Data.Linq.Table(Of TblType)
		Get
			Return Me.GetTable(Of TblType)
		End Get
	End Property
	
	Public ReadOnly Property TblUsers() As System.Data.Linq.Table(Of TblUser)
		Get
			Return Me.GetTable(Of TblUser)
		End Get
	End Property
	
	Public ReadOnly Property TblWifeHusbands() As System.Data.Linq.Table(Of TblWifeHusband)
		Get
			Return Me.GetTable(Of TblWifeHusband)
		End Get
	End Property
	
	Public ReadOnly Property TblWorkShops() As System.Data.Linq.Table(Of TblWorkShop)
		Get
			Return Me.GetTable(Of TblWorkShop)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployees() As System.Data.Linq.Table(Of TblEmployee)
		Get
			Return Me.GetTable(Of TblEmployee)
		End Get
	End Property
	
	Public ReadOnly Property TblLeavePermissions() As System.Data.Linq.Table(Of TblLeavePermission)
		Get
			Return Me.GetTable(Of TblLeavePermission)
		End Get
	End Property
	
	Public ReadOnly Property TblTraineeLectures() As System.Data.Linq.Table(Of TblTraineeLecture)
		Get
			Return Me.GetTable(Of TblTraineeLecture)
		End Get
	End Property
	
	Public ReadOnly Property TblLectures() As System.Data.Linq.Table(Of TblLecture)
		Get
			Return Me.GetTable(Of TblLecture)
		End Get
	End Property
	
	Public ReadOnly Property TblPAForTraineers() As System.Data.Linq.Table(Of TblPAForTraineer)
		Get
			Return Me.GetTable(Of TblPAForTraineer)
		End Get
	End Property
	
	Public ReadOnly Property TblTraineePerformanceAppraisals() As System.Data.Linq.Table(Of TblTraineePerformanceAppraisal)
		Get
			Return Me.GetTable(Of TblTraineePerformanceAppraisal)
		End Get
	End Property
	
	Public ReadOnly Property TblPAForEmployees() As System.Data.Linq.Table(Of TblPAForEmployee)
		Get
			Return Me.GetTable(Of TblPAForEmployee)
		End Get
	End Property
	
	Public ReadOnly Property TblPAPerJobs() As System.Data.Linq.Table(Of TblPAPerJob)
		Get
			Return Me.GetTable(Of TblPAPerJob)
		End Get
	End Property
	
	Public ReadOnly Property TblAveragePAPerTasks() As System.Data.Linq.Table(Of TblAveragePAPerTask)
		Get
			Return Me.GetTable(Of TblAveragePAPerTask)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeePAs() As System.Data.Linq.Table(Of TblEmployeePA)
		Get
			Return Me.GetTable(Of TblEmployeePA)
		End Get
	End Property
	
	Public ReadOnly Property TblCompanyProfiles() As System.Data.Linq.Table(Of TblCompanyProfile)
		Get
			Return Me.GetTable(Of TblCompanyProfile)
		End Get
	End Property
	
	Public ReadOnly Property TblYearlyVacations() As System.Data.Linq.Table(Of TblYearlyVacation)
		Get
			Return Me.GetTable(Of TblYearlyVacation)
		End Get
	End Property
	
	Public ReadOnly Property TblVacations() As System.Data.Linq.Table(Of TblVacation)
		Get
			Return Me.GetTable(Of TblVacation)
		End Get
	End Property
	
	Public ReadOnly Property TblHolidays() As System.Data.Linq.Table(Of TblHoliday)
		Get
			Return Me.GetTable(Of TblHoliday)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeeHolidays() As System.Data.Linq.Table(Of TblEmployeeHoliday)
		Get
			Return Me.GetTable(Of TblEmployeeHoliday)
		End Get
	End Property
	
	Public ReadOnly Property TblExecuteVacationsDays() As System.Data.Linq.Table(Of TblExecuteVacationsDay)
		Get
			Return Me.GetTable(Of TblExecuteVacationsDay)
		End Get
	End Property
	
	Public ReadOnly Property TblVacationsHolidaysDashBoards() As System.Data.Linq.Table(Of TblVacationsHolidaysDashBoard)
		Get
			Return Me.GetTable(Of TblVacationsHolidaysDashBoard)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeeVacations() As System.Data.Linq.Table(Of TblEmployeeVacation)
		Get
			Return Me.GetTable(Of TblEmployeeVacation)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeeJobs() As System.Data.Linq.Table(Of TblEmployeeJob)
		Get
			Return Me.GetTable(Of TblEmployeeJob)
		End Get
	End Property
	
	Public ReadOnly Property TblJobDescriptions() As System.Data.Linq.Table(Of TblJobDescription)
		Get
			Return Me.GetTable(Of TblJobDescription)
		End Get
	End Property
	
	Public ReadOnly Property TblClassifications() As System.Data.Linq.Table(Of TblClassification)
		Get
			Return Me.GetTable(Of TblClassification)
		End Get
	End Property
	
	Public ReadOnly Property TblDegrees() As System.Data.Linq.Table(Of TblDegree)
		Get
			Return Me.GetTable(Of TblDegree)
		End Get
	End Property
	
	Public ReadOnly Property TblMonths() As System.Data.Linq.Table(Of TblMonth)
		Get
			Return Me.GetTable(Of TblMonth)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeeSalaries() As System.Data.Linq.Table(Of TblEmployeeSalary)
		Get
			Return Me.GetTable(Of TblEmployeeSalary)
		End Get
	End Property
	
	Public ReadOnly Property TblYears() As System.Data.Linq.Table(Of TblYear)
		Get
			Return Me.GetTable(Of TblYear)
		End Get
	End Property
	
	Public ReadOnly Property TblMonthsPerYears() As System.Data.Linq.Table(Of TblMonthsPerYear)
		Get
			Return Me.GetTable(Of TblMonthsPerYear)
		End Get
	End Property
	
	Public ReadOnly Property TblFamilyMembers() As System.Data.Linq.Table(Of TblFamilyMember)
		Get
			Return Me.GetTable(Of TblFamilyMember)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeeSalaryHistories() As System.Data.Linq.Table(Of TblEmployeeSalaryHistory)
		Get
			Return Me.GetTable(Of TblEmployeeSalaryHistory)
		End Get
	End Property
	
	Public ReadOnly Property TblUnits() As System.Data.Linq.Table(Of TblUnit)
		Get
			Return Me.GetTable(Of TblUnit)
		End Get
	End Property
	
	Public ReadOnly Property TblSalaryCategories() As System.Data.Linq.Table(Of TblSalaryCategory)
		Get
			Return Me.GetTable(Of TblSalaryCategory)
		End Get
	End Property
	
	Public ReadOnly Property TblSettings() As System.Data.Linq.Table(Of TblSetting)
		Get
			Return Me.GetTable(Of TblSetting)
		End Get
	End Property
	
	Public ReadOnly Property TblApplicants() As System.Data.Linq.Table(Of TblApplicant)
		Get
			Return Me.GetTable(Of TblApplicant)
		End Get
	End Property
	
	Public ReadOnly Property TblEmployeeSalary2s() As System.Data.Linq.Table(Of TblEmployeeSalary2)
		Get
			Return Me.GetTable(Of TblEmployeeSalary2)
		End Get
	End Property
	
	Public ReadOnly Property TblTrainees() As System.Data.Linq.Table(Of TblTrainee)
		Get
			Return Me.GetTable(Of TblTrainee)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_JobsPerDepartment")>  _
	Public Function Filter_JobsPerDepartment(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="JobNumber", DbType:="NVarChar(50)")> ByVal jobNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ArabicName", DbType:="NVarChar(50)")> ByVal arabicName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal supervisorId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CatId", DbType:="Int")> ByVal catId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ScheduleDepId", DbType:="Int")> ByVal scheduleDepId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RequiredHrsId", DbType:="Int")> ByVal requiredHrsId As System.Nullable(Of Integer)) As ISingleResult(Of Filter_JobsPerDepartmentResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), jobNumber, name, arabicName, supervisorId, catId, scheduleDepId, requiredHrsId)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_JobsPerDepartmentResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_SickVactApproval")>  _
	Public Function Filter_SickVactApproval(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmployeeName", DbType:="NVarChar(250)")> ByVal employeeName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NbOfDate", DbType:="Int")> ByVal nbOfDate As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Reason", DbType:="NVarChar(50)")> ByVal reason As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Note", DbType:="NVarChar(50)")> ByVal note As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateFrom", DbType:="Date")> ByVal dateFrom As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateTo", DbType:="Date")> ByVal dateTo As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Accepted", DbType:="Bit")> ByVal accepted As System.Nullable(Of Boolean)) As ISingleResult(Of Filter_SickVactApprovalResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeName, nbOfDate, reason, note, dateFrom, dateTo, accepted)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_SickVactApprovalResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_PersonalVacationApproval")>  _
	Public Function Filter_PersonalVacationApproval(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmployeeName", DbType:="NVarChar(50)")> ByVal employeeName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VacationType", DbType:="Int")> ByVal vacationType As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateFrom1", DbType:="Date")> ByVal dateFrom1 As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateTo1", DbType:="Date")> ByVal dateTo1 As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateFrom2", DbType:="Date")> ByVal dateFrom2 As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateTo2", DbType:="Date")> ByVal dateTo2 As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateFrom3", DbType:="Date")> ByVal dateFrom3 As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateTo3", DbType:="Date")> ByVal dateTo3 As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Note", DbType:="NVarChar(50)")> ByVal note As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Accepted", DbType:="Bit")> ByVal accepted As System.Nullable(Of Boolean)) As ISingleResult(Of Filter_PersonalVacationApprovalResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeName, vacationType, dateFrom1, dateTo1, dateFrom2, dateTo2, dateFrom3, dateTo3, note, accepted)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_PersonalVacationApprovalResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_LeavePermissionApproval")>  _
	Public Function Filter_LeavePermissionApproval(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmplName", DbType:="NVarChar(250)")> ByVal emplName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateFrom", DbType:="Date")> ByVal dateFrom As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateTo", DbType:="Date")> ByVal dateTo As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Reason", DbType:="NVarChar(250)")> ByVal reason As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Note", DbType:="NVarChar(250)")> ByVal note As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Accepted", DbType:="Bit")> ByVal accepted As System.Nullable(Of Boolean)) As ISingleResult(Of Filter_LeavePermissionApprovalResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), emplName, dateFrom, dateTo, reason, note, accepted)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_LeavePermissionApprovalResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_AssigndDepsToJob")>  _
	Public Function Filter_AssigndDepsToJob(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="JobNumber", DbType:="Int")> ByVal jobNumber As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ArabicName", DbType:="NVarChar(50)")> ByVal arabicName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Supervisor", DbType:="Int")> ByVal supervisor As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Category", DbType:="Int")> ByVal category As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ScheduleDep", DbType:="Int")> ByVal scheduleDep As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="RequiredHours", DbType:="Int")> ByVal requiredHours As System.Nullable(Of Integer)) As ISingleResult(Of Filter_AssigndDepsToJobResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), jobNumber, name, arabicName, supervisor, category, scheduleDep, requiredHours)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_AssigndDepsToJobResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_VactionsHolidaysDashBoard")>  _
	Public Function Filter_VactionsHolidaysDashBoard(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmpName", DbType:="NVarChar(50)")> ByVal empName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Description", DbType:="NVarChar(50)")> ByVal description As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Year", DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VactionDateTo", DbType:="Date")> ByVal vactionDateTo As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VactionDateFrom", DbType:="Date")> ByVal vactionDateFrom As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ExcutedDays", DbType:="Int")> ByVal excutedDays As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NbOfDays", DbType:="Int")> ByVal nbOfDays As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="IsVact", DbType:="Bit")> ByVal isVact As System.Nullable(Of Boolean)) As ISingleResult(Of Filter_VactionsHolidaysDashBoardResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), empName, description, year, vactionDateTo, vactionDateFrom, excutedDays, nbOfDays, isVact)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_VactionsHolidaysDashBoardResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AssignHolidaysToEmplyee")>  _
	Public Function AssignHolidaysToEmplyee(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmployeeId", DbType:="Int")> ByVal employeeId As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeId)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AssignYearlyVacationsToEmployee")>  _
	Public Function AssignYearlyVacationsToEmployee(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateOfNow", DbType:="Date")> ByVal dateOfNow As System.Nullable(Of Date)) As ISingleResult(Of AssignYearlyVacationsToEmployeeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), dateOfNow)
		Return CType(result.ReturnValue,ISingleResult(Of AssignYearlyVacationsToEmployeeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.AveragePAPerTaskForEmployee")>  _
	Public Function AveragePAPerTaskForEmployee(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmployeeId", DbType:="Int")> ByVal employeeId As System.Nullable(Of Integer)) As ISingleResult(Of AveragePAPerTaskForEmployeeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeId)
		Return CType(result.ReturnValue,ISingleResult(Of AveragePAPerTaskForEmployeeResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UnionAllHolidaysAndVacations")>  _
	Public Function UnionAllHolidaysAndVacations() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateEmployeeHistory")>  _
	Public Function CreateEmployeeHistory(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MonthPerYearId", DbType:="Int")> ByVal monthPerYearId As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), monthPerYearId)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_EmployeeJobSalaryDetails")>  _
	Public Function Filter_EmployeeJobSalaryDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmpName", DbType:="NVarChar(50)")> ByVal empName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DepName", DbType:="NVarChar(50)")> ByVal depName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="JobName", DbType:="NVarChar(50)")> ByVal jobName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CurrencyId", DbType:="Int")> ByVal currencyId As System.Nullable(Of Integer)) As ISingleResult(Of Filter_EmployeeJobSalaryDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), empName, depName, jobName, currencyId)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_EmployeeJobSalaryDetailsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.MonthsPerYear")>  _
	Public Function MonthsPerYear(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="YearId", DbType:="Int")> ByVal yearId As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), yearId)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_MonthPerYearCalendar")>  _
	Public Function Filter_MonthPerYearCalendar(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MonthName", DbType:="NVarChar(50)")> ByVal monthName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MonthArabicName", DbType:="NVarChar(50)")> ByVal monthArabicName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Year", DbType:="Int")> ByVal year As System.Nullable(Of Integer)) As ISingleResult(Of Filter_MonthPerYearCalendarResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), monthName, monthArabicName, year)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_MonthPerYearCalendarResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_EmployeeExecutedHolidays")>  _
	Public Function Filter_EmployeeExecutedHolidays(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="EmployeeName", DbType:="NVarChar(50)")> ByVal employeeName As String) As ISingleResult(Of Filter_EmployeeExecutedHolidaysResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeName)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_EmployeeExecutedHolidaysResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_ApplicantList")>  _
	Public Function Filter_ApplicantList(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal datefrom As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal gender As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MaritalStatus", DbType:="NVarChar(50)")> ByVal maritalStatus As String) As ISingleResult(Of Filter_ApplicantListResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, datefrom, gender, maritalStatus)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_ApplicantListResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_ApplicantEmployeeJob")>  _
	Public Function Filter_ApplicantEmployeeJob(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Gender", DbType:="NVarChar(50)")> ByVal gender As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="JobName", DbType:="NVarChar(50)")> ByVal jobName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="JobNumber", DbType:="NVarChar(50)")> ByVal jobNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateFrom", DbType:="DateTime")> ByVal dateFrom As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateTo", DbType:="DateTime")> ByVal dateTo As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DepId", DbType:="Int")> ByVal depId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DepartmentName", DbType:="NVarChar(50)")> ByVal departmentName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nationality", DbType:="NVarChar(50)")> ByVal nationality As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PIN", DbType:="NVarChar(50)")> ByVal pIN As String) As ISingleResult(Of Filter_ApplicantEmployeeJobResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, gender, jobName, jobNumber, dateFrom, dateTo, depId, departmentName, nationality, pIN)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_ApplicantEmployeeJobResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_ApplicantIndex")>  _
	Public Function Filter_ApplicantIndex(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicantNumber", DbType:="NVarChar(50)")> ByVal applicantNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FullName", DbType:="NVarChar(50)")> ByVal fullName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Gender", DbType:="NVarChar(50)")> ByVal gender As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MaritalStatus", DbType:="NVarChar(50)")> ByVal maritalStatus As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nationality", DbType:="NVarChar(50)")> ByVal nationality As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mobile", DbType:="NVarChar(50)")> ByVal mobile As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Major", DbType:="NVarChar(50)")> ByVal major As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal university As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CertificateId", DbType:="Int")> ByVal certificateId As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="City", DbType:="NVarChar(50)")> ByVal city As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="District", DbType:="NVarChar(50)")> ByVal district As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal ageDate As System.Nullable(Of Date)) As ISingleResult(Of Filter_ApplicantIndexResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicantNumber, fullName, gender, maritalStatus, nationality, mobile, major, university, certificateId, city, district, ageDate)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_ApplicantIndexResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Filter_ListOfPAforTrainee")>  _
	Public Function Filter_ListOfPAforTrainee(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(50)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FromDate", DbType:="Date")> ByVal fromDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ToDate", DbType:="Date")> ByVal toDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal gender As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MaritalStatus", DbType:="NVarChar(50)")> ByVal maritalStatus As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AgeDate", DbType:="Date")> ByVal ageDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicantNumber", DbType:="NVarChar(50)")> ByVal applicantNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Nationality", DbType:="NVarChar(50)")> ByVal nationality As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Province", DbType:="NVarChar(50)")> ByVal province As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="District", DbType:="NVarChar(50)")> ByVal district As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(50)")> ByVal country As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DepName", DbType:="NVarChar(50)")> ByVal depName As String) As ISingleResult(Of Filter_ListOfPAforTraineeResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, fromDate, toDate, gender, maritalStatus, ageDate, applicantNumber, nationality, province, district, country, depName)
		Return CType(result.ReturnValue,ISingleResult(Of Filter_ListOfPAforTraineeResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblAddress")>  _
Partial Public Class TblAddress
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _City_Town As String
	
	Private _District As String
	
	Private _Street As String
	
	Private _Building As String
	
	Private _Near As String
	
	Private _Floor As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _PropertyType As String
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCity_TownChanging(value As String)
    End Sub
    Partial Private Sub OnCity_TownChanged()
    End Sub
    Partial Private Sub OnDistrictChanging(value As String)
    End Sub
    Partial Private Sub OnDistrictChanged()
    End Sub
    Partial Private Sub OnStreetChanging(value As String)
    End Sub
    Partial Private Sub OnStreetChanged()
    End Sub
    Partial Private Sub OnBuildingChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingChanged()
    End Sub
    Partial Private Sub OnNearChanging(value As String)
    End Sub
    Partial Private Sub OnNearChanged()
    End Sub
    Partial Private Sub OnFloorChanging(value As String)
    End Sub
    Partial Private Sub OnFloorChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnPropertyTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[City\Town]", Storage:="_City_Town", DbType:="NVarChar(50)")>  _
	Public Property City_Town() As String
		Get
			Return Me._City_Town
		End Get
		Set
			If (String.Equals(Me._City_Town, value) = false) Then
				Me.OnCity_TownChanging(value)
				Me.SendPropertyChanging
				Me._City_Town = value
				Me.SendPropertyChanged("City_Town")
				Me.OnCity_TownChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District", DbType:="NVarChar(50)")>  _
	Public Property District() As String
		Get
			Return Me._District
		End Get
		Set
			If (String.Equals(Me._District, value) = false) Then
				Me.OnDistrictChanging(value)
				Me.SendPropertyChanging
				Me._District = value
				Me.SendPropertyChanged("District")
				Me.OnDistrictChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Street", DbType:="NVarChar(50)")>  _
	Public Property Street() As String
		Get
			Return Me._Street
		End Get
		Set
			If (String.Equals(Me._Street, value) = false) Then
				Me.OnStreetChanging(value)
				Me.SendPropertyChanging
				Me._Street = value
				Me.SendPropertyChanged("Street")
				Me.OnStreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Building", DbType:="NVarChar(50)")>  _
	Public Property Building() As String
		Get
			Return Me._Building
		End Get
		Set
			If (String.Equals(Me._Building, value) = false) Then
				Me.OnBuildingChanging(value)
				Me.SendPropertyChanging
				Me._Building = value
				Me.SendPropertyChanged("Building")
				Me.OnBuildingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Near", DbType:="NVarChar(50)")>  _
	Public Property Near() As String
		Get
			Return Me._Near
		End Get
		Set
			If (String.Equals(Me._Near, value) = false) Then
				Me.OnNearChanging(value)
				Me.SendPropertyChanging
				Me._Near = value
				Me.SendPropertyChanged("Near")
				Me.OnNearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Floor", DbType:="NVarChar(50)")>  _
	Public Property Floor() As String
		Get
			Return Me._Floor
		End Get
		Set
			If (String.Equals(Me._Floor, value) = false) Then
				Me.OnFloorChanging(value)
				Me.SendPropertyChanging
				Me._Floor = value
				Me.SendPropertyChanged("Floor")
				Me.OnFloorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyType", DbType:="NVarChar(50)")>  _
	Public Property PropertyType() As String
		Get
			Return Me._PropertyType
		End Get
		Set
			If (String.Equals(Me._PropertyType, value) = false) Then
				Me.OnPropertyTypeChanging(value)
				Me.SendPropertyChanging
				Me._PropertyType = value
				Me.SendPropertyChanged("PropertyType")
				Me.OnPropertyTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblAddress", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblAddresses.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblAddresses.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblApplicantMedicalIssues")>  _
Partial Public Class TblApplicantMedicalIssue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _MedicalIssueId As System.Nullable(Of Integer)
	
	Private _Note As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _TblMedicalIssue As EntityRef(Of TblMedicalIssue)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnMedicalIssueIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMedicalIssueIdChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblMedicalIssue = CType(Nothing, EntityRef(Of TblMedicalIssue))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedicalIssueId", DbType:="Int")>  _
	Public Property MedicalIssueId() As System.Nullable(Of Integer)
		Get
			Return Me._MedicalIssueId
		End Get
		Set
			If (Me._MedicalIssueId.Equals(value) = false) Then
				If Me._TblMedicalIssue.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMedicalIssueIdChanging(value)
				Me.SendPropertyChanging
				Me._MedicalIssueId = value
				Me.SendPropertyChanged("MedicalIssueId")
				Me.OnMedicalIssueIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMedicalIssue_TblApplicantMedicalIssue", Storage:="_TblMedicalIssue", ThisKey:="MedicalIssueId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblMedicalIssue() As TblMedicalIssue
		Get
			Return Me._TblMedicalIssue.Entity
		End Get
		Set
			Dim previousValue As TblMedicalIssue = Me._TblMedicalIssue.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblMedicalIssue.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblMedicalIssue.Entity = Nothing
					previousValue.TblApplicantMedicalIssues.Remove(Me)
				End If
				Me._TblMedicalIssue.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblApplicantMedicalIssues.Add(Me)
					Me._MedicalIssueId = value.Id
				Else
					Me._MedicalIssueId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblMedicalIssue")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblApplicantMedicalIssue", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblApplicantMedicalIssues.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblApplicantMedicalIssues.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblApplicantSkills")>  _
Partial Public Class TblApplicantSkill
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _SkillId As System.Nullable(Of Integer)
	
	Private _SkillLevel As System.Nullable(Of Integer)
	
	Private _TblSkill As EntityRef(Of TblSkill)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnSkillIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSkillIdChanged()
    End Sub
    Partial Private Sub OnSkillLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSkillLevelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblSkill = CType(Nothing, EntityRef(Of TblSkill))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SkillId", DbType:="Int")>  _
	Public Property SkillId() As System.Nullable(Of Integer)
		Get
			Return Me._SkillId
		End Get
		Set
			If (Me._SkillId.Equals(value) = false) Then
				If Me._TblSkill.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSkillIdChanging(value)
				Me.SendPropertyChanging
				Me._SkillId = value
				Me.SendPropertyChanged("SkillId")
				Me.OnSkillIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SkillLevel", DbType:="Int")>  _
	Public Property SkillLevel() As System.Nullable(Of Integer)
		Get
			Return Me._SkillLevel
		End Get
		Set
			If (Me._SkillLevel.Equals(value) = false) Then
				Me.OnSkillLevelChanging(value)
				Me.SendPropertyChanging
				Me._SkillLevel = value
				Me.SendPropertyChanged("SkillLevel")
				Me.OnSkillLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblSkill_TblApplicantSkill", Storage:="_TblSkill", ThisKey:="SkillId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblSkill() As TblSkill
		Get
			Return Me._TblSkill.Entity
		End Get
		Set
			Dim previousValue As TblSkill = Me._TblSkill.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblSkill.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblSkill.Entity = Nothing
					previousValue.TblApplicantSkills.Remove(Me)
				End If
				Me._TblSkill.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblApplicantSkills.Add(Me)
					Me._SkillId = value.Id
				Else
					Me._SkillId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblSkill")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblApplicantSkill", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblApplicantSkills.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblApplicantSkills.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblAttachments")>  _
Partial Public Class TblAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Attachmment As System.Data.Linq.Binary
	
	Private _Type As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _ExpiryDate As System.Nullable(Of Date)
	
	Private _UploadedDate As System.Nullable(Of Date)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAttachmmentChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnAttachmmentChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnExpiryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpiryDateChanged()
    End Sub
    Partial Private Sub OnUploadedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUploadedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attachmment", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Attachmment() As System.Data.Linq.Binary
		Get
			Return Me._Attachmment
		End Get
		Set
			If (Object.Equals(Me._Attachmment, value) = false) Then
				Me.OnAttachmmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachmment = value
				Me.SendPropertyChanged("Attachmment")
				Me.OnAttachmmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Type", DbType:="VarChar(50)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiryDate", DbType:="Date")>  _
	Public Property ExpiryDate() As System.Nullable(Of Date)
		Get
			Return Me._ExpiryDate
		End Get
		Set
			If (Me._ExpiryDate.Equals(value) = false) Then
				Me.OnExpiryDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiryDate = value
				Me.SendPropertyChanged("ExpiryDate")
				Me.OnExpiryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UploadedDate", DbType:="Date")>  _
	Public Property UploadedDate() As System.Nullable(Of Date)
		Get
			Return Me._UploadedDate
		End Get
		Set
			If (Me._UploadedDate.Equals(value) = false) Then
				Me.OnUploadedDateChanging(value)
				Me.SendPropertyChanging
				Me._UploadedDate = value
				Me.SendPropertyChanged("UploadedDate")
				Me.OnUploadedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblAttachment", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblAttachments.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblAttachments.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblBlood")>  _
Partial Public Class TblBlood
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblApplicants As EntitySet(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicants = New EntitySet(Of TblApplicant)(AddressOf Me.attach_TblApplicants, AddressOf Me.detach_TblApplicants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblBlood_TblApplicant", Storage:="_TblApplicants", ThisKey:="Id", OtherKey:="BloodId")>  _
	Public Property TblApplicants() As EntitySet(Of TblApplicant)
		Get
			Return Me._TblApplicants
		End Get
		Set
			Me._TblApplicants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblApplicants(ByVal entity As TblApplicant)
		Me.SendPropertyChanging
		entity.TblBlood = Me
	End Sub
	
	Private Sub detach_TblApplicants(ByVal entity As TblApplicant)
		Me.SendPropertyChanging
		entity.TblBlood = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblCategory")>  _
Partial Public Class TblCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblTasks As EntitySet(Of TblTask)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblTasks = New EntitySet(Of TblTask)(AddressOf Me.attach_TblTasks, AddressOf Me.detach_TblTasks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCategory_TblTask", Storage:="_TblTasks", ThisKey:="Id", OtherKey:="CategoryId")>  _
	Public Property TblTasks() As EntitySet(Of TblTask)
		Get
			Return Me._TblTasks
		End Get
		Set
			Me._TblTasks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblTasks(ByVal entity As TblTask)
		Me.SendPropertyChanging
		entity.TblCategory = Me
	End Sub
	
	Private Sub detach_TblTasks(ByVal entity As TblTask)
		Me.SendPropertyChanging
		entity.TblCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblCertificate")>  _
Partial Public Class TblCertificate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblEducations As EntitySet(Of TblEducation)
	
	Private _TblRequirements As EntitySet(Of TblRequirement)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEducations = New EntitySet(Of TblEducation)(AddressOf Me.attach_TblEducations, AddressOf Me.detach_TblEducations)
		Me._TblRequirements = New EntitySet(Of TblRequirement)(AddressOf Me.attach_TblRequirements, AddressOf Me.detach_TblRequirements)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCertificate_TblEducation", Storage:="_TblEducations", ThisKey:="Id", OtherKey:="CertificateId")>  _
	Public Property TblEducations() As EntitySet(Of TblEducation)
		Get
			Return Me._TblEducations
		End Get
		Set
			Me._TblEducations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCertificate_TblRequirement", Storage:="_TblRequirements", ThisKey:="Id", OtherKey:="CertificateId")>  _
	Public Property TblRequirements() As EntitySet(Of TblRequirement)
		Get
			Return Me._TblRequirements
		End Get
		Set
			Me._TblRequirements.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEducations(ByVal entity As TblEducation)
		Me.SendPropertyChanging
		entity.TblCertificate = Me
	End Sub
	
	Private Sub detach_TblEducations(ByVal entity As TblEducation)
		Me.SendPropertyChanging
		entity.TblCertificate = Nothing
	End Sub
	
	Private Sub attach_TblRequirements(ByVal entity As TblRequirement)
		Me.SendPropertyChanging
		entity.TblCertificate = Me
	End Sub
	
	Private Sub detach_TblRequirements(ByVal entity As TblRequirement)
		Me.SendPropertyChanging
		entity.TblCertificate = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblContractType")>  _
Partial Public Class TblContractType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblEmployeeJobs As EntitySet(Of TblEmployeeJob)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeeJobs = New EntitySet(Of TblEmployeeJob)(AddressOf Me.attach_TblEmployeeJobs, AddressOf Me.detach_TblEmployeeJobs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblContractType_TblEmployeeJob", Storage:="_TblEmployeeJobs", ThisKey:="Id", OtherKey:="ContractTypeId")>  _
	Public Property TblEmployeeJobs() As EntitySet(Of TblEmployeeJob)
		Get
			Return Me._TblEmployeeJobs
		End Get
		Set
			Me._TblEmployeeJobs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblContractType = Me
	End Sub
	
	Private Sub detach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblContractType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblCurrency")>  _
Partial Public Class TblCurrency
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Exchange As System.Nullable(Of Decimal)
	
	Private _TblExperienceHistories As EntitySet(Of TblExperienceHistory)
	
	Private _TblRequiredJobs As EntitySet(Of TblRequiredJob)
	
	Private _TblEmployeeSalaries As EntitySet(Of TblEmployeeSalary)
	
	Private _TblEmployeeSalaryHistories As EntitySet(Of TblEmployeeSalaryHistory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnExchangeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExchangeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblExperienceHistories = New EntitySet(Of TblExperienceHistory)(AddressOf Me.attach_TblExperienceHistories, AddressOf Me.detach_TblExperienceHistories)
		Me._TblRequiredJobs = New EntitySet(Of TblRequiredJob)(AddressOf Me.attach_TblRequiredJobs, AddressOf Me.detach_TblRequiredJobs)
		Me._TblEmployeeSalaries = New EntitySet(Of TblEmployeeSalary)(AddressOf Me.attach_TblEmployeeSalaries, AddressOf Me.detach_TblEmployeeSalaries)
		Me._TblEmployeeSalaryHistories = New EntitySet(Of TblEmployeeSalaryHistory)(AddressOf Me.attach_TblEmployeeSalaryHistories, AddressOf Me.detach_TblEmployeeSalaryHistories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Exchange", DbType:="Decimal(18,2)")>  _
	Public Property Exchange() As System.Nullable(Of Decimal)
		Get
			Return Me._Exchange
		End Get
		Set
			If (Me._Exchange.Equals(value) = false) Then
				Me.OnExchangeChanging(value)
				Me.SendPropertyChanging
				Me._Exchange = value
				Me.SendPropertyChanged("Exchange")
				Me.OnExchangeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblExperienceHistory", Storage:="_TblExperienceHistories", ThisKey:="Id", OtherKey:="CurrencyId")>  _
	Public Property TblExperienceHistories() As EntitySet(Of TblExperienceHistory)
		Get
			Return Me._TblExperienceHistories
		End Get
		Set
			Me._TblExperienceHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblRequiredJob", Storage:="_TblRequiredJobs", ThisKey:="Id", OtherKey:="CurrencyId")>  _
	Public Property TblRequiredJobs() As EntitySet(Of TblRequiredJob)
		Get
			Return Me._TblRequiredJobs
		End Get
		Set
			Me._TblRequiredJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblEmployeeSalary", Storage:="_TblEmployeeSalaries", ThisKey:="Id", OtherKey:="CurrencyId")>  _
	Public Property TblEmployeeSalaries() As EntitySet(Of TblEmployeeSalary)
		Get
			Return Me._TblEmployeeSalaries
		End Get
		Set
			Me._TblEmployeeSalaries.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblEmployeeSalaryHistory", Storage:="_TblEmployeeSalaryHistories", ThisKey:="Id", OtherKey:="CurrencyId")>  _
	Public Property TblEmployeeSalaryHistories() As EntitySet(Of TblEmployeeSalaryHistory)
		Get
			Return Me._TblEmployeeSalaryHistories
		End Get
		Set
			Me._TblEmployeeSalaryHistories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblExperienceHistories(ByVal entity As TblExperienceHistory)
		Me.SendPropertyChanging
		entity.TblCurrency = Me
	End Sub
	
	Private Sub detach_TblExperienceHistories(ByVal entity As TblExperienceHistory)
		Me.SendPropertyChanging
		entity.TblCurrency = Nothing
	End Sub
	
	Private Sub attach_TblRequiredJobs(ByVal entity As TblRequiredJob)
		Me.SendPropertyChanging
		entity.TblCurrency = Me
	End Sub
	
	Private Sub detach_TblRequiredJobs(ByVal entity As TblRequiredJob)
		Me.SendPropertyChanging
		entity.TblCurrency = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeSalaries(ByVal entity As TblEmployeeSalary)
		Me.SendPropertyChanging
		entity.TblCurrency = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalaries(ByVal entity As TblEmployeeSalary)
		Me.SendPropertyChanging
		entity.TblCurrency = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeSalaryHistories(ByVal entity As TblEmployeeSalaryHistory)
		Me.SendPropertyChanging
		entity.TblCurrency = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalaryHistories(ByVal entity As TblEmployeeSalaryHistory)
		Me.SendPropertyChanging
		entity.TblCurrency = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblDepartment")>  _
Partial Public Class TblDepartment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Description As String
	
	Private _ParentId As System.Nullable(Of Integer)
	
	Private _Code As System.Nullable(Of Decimal)
	
	Private _ArabicName As String
	
	Private _TypeId As System.Nullable(Of Integer)
	
	Private _DepCategoryId As System.Nullable(Of Integer)
	
	Private _MakeSatisfication As System.Nullable(Of Boolean)
	
	Private _CompanyProfileId As System.Nullable(Of Integer)
	
	Private _TblDepartments As EntitySet(Of TblDepartment)
	
	Private _TblJobsPerDepartments As EntitySet(Of TblJobsPerDepartment)
	
	Private _TblRequiredJobs As EntitySet(Of TblRequiredJob)
	
	Private _TblEmployeeJobs As EntitySet(Of TblEmployeeJob)
	
	Private _TblJobDescriptions As EntitySet(Of TblJobDescription)
	
	Private _TblTrainees As EntitySet(Of TblTrainee)
	
	Private _TblDepartment As EntityRef(Of TblDepartment)
	
	Private _TblDepartmentCategory As EntityRef(Of TblDepartmentCategory)
	
	Private _TblDepartmentType As EntityRef(Of TblDepartmentType)
	
	Private _TblCompanyProfile As EntityRef(Of TblCompanyProfile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnParentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnParentIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnArabicNameChanged()
    End Sub
    Partial Private Sub OnTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIdChanged()
    End Sub
    Partial Private Sub OnDepCategoryIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepCategoryIdChanged()
    End Sub
    Partial Private Sub OnMakeSatisficationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnMakeSatisficationChanged()
    End Sub
    Partial Private Sub OnCompanyProfileIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCompanyProfileIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblDepartments = New EntitySet(Of TblDepartment)(AddressOf Me.attach_TblDepartments, AddressOf Me.detach_TblDepartments)
		Me._TblJobsPerDepartments = New EntitySet(Of TblJobsPerDepartment)(AddressOf Me.attach_TblJobsPerDepartments, AddressOf Me.detach_TblJobsPerDepartments)
		Me._TblRequiredJobs = New EntitySet(Of TblRequiredJob)(AddressOf Me.attach_TblRequiredJobs, AddressOf Me.detach_TblRequiredJobs)
		Me._TblEmployeeJobs = New EntitySet(Of TblEmployeeJob)(AddressOf Me.attach_TblEmployeeJobs, AddressOf Me.detach_TblEmployeeJobs)
		Me._TblJobDescriptions = New EntitySet(Of TblJobDescription)(AddressOf Me.attach_TblJobDescriptions, AddressOf Me.detach_TblJobDescriptions)
		Me._TblTrainees = New EntitySet(Of TblTrainee)(AddressOf Me.attach_TblTrainees, AddressOf Me.detach_TblTrainees)
		Me._TblDepartment = CType(Nothing, EntityRef(Of TblDepartment))
		Me._TblDepartmentCategory = CType(Nothing, EntityRef(Of TblDepartmentCategory))
		Me._TblDepartmentType = CType(Nothing, EntityRef(Of TblDepartmentType))
		Me._TblCompanyProfile = CType(Nothing, EntityRef(Of TblCompanyProfile))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentId", DbType:="Int")>  _
	Public Property ParentId() As System.Nullable(Of Integer)
		Get
			Return Me._ParentId
		End Get
		Set
			If (Me._ParentId.Equals(value) = false) Then
				If Me._TblDepartment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnParentIdChanging(value)
				Me.SendPropertyChanging
				Me._ParentId = value
				Me.SendPropertyChanged("ParentId")
				Me.OnParentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="Decimal(38,0)")>  _
	Public Property Code() As System.Nullable(Of Decimal)
		Get
			Return Me._Code
		End Get
		Set
			If (Me._Code.Equals(value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me.OnArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._ArabicName = value
				Me.SendPropertyChanged("ArabicName")
				Me.OnArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeId", DbType:="Int")>  _
	Public Property TypeId() As System.Nullable(Of Integer)
		Get
			Return Me._TypeId
		End Get
		Set
			If (Me._TypeId.Equals(value) = false) Then
				If Me._TblDepartmentType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeId = value
				Me.SendPropertyChanged("TypeId")
				Me.OnTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepCategoryId", DbType:="Int")>  _
	Public Property DepCategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._DepCategoryId
		End Get
		Set
			If (Me._DepCategoryId.Equals(value) = false) Then
				If Me._TblDepartmentCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._DepCategoryId = value
				Me.SendPropertyChanged("DepCategoryId")
				Me.OnDepCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MakeSatisfication", DbType:="Bit")>  _
	Public Property MakeSatisfication() As System.Nullable(Of Boolean)
		Get
			Return Me._MakeSatisfication
		End Get
		Set
			If (Me._MakeSatisfication.Equals(value) = false) Then
				Me.OnMakeSatisficationChanging(value)
				Me.SendPropertyChanging
				Me._MakeSatisfication = value
				Me.SendPropertyChanged("MakeSatisfication")
				Me.OnMakeSatisficationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyProfileId", DbType:="Int")>  _
	Public Property CompanyProfileId() As System.Nullable(Of Integer)
		Get
			Return Me._CompanyProfileId
		End Get
		Set
			If (Me._CompanyProfileId.Equals(value) = false) Then
				If Me._TblCompanyProfile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompanyProfileIdChanging(value)
				Me.SendPropertyChanging
				Me._CompanyProfileId = value
				Me.SendPropertyChanged("CompanyProfileId")
				Me.OnCompanyProfileIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblDepartment", Storage:="_TblDepartments", ThisKey:="Id", OtherKey:="ParentId")>  _
	Public Property TblDepartments() As EntitySet(Of TblDepartment)
		Get
			Return Me._TblDepartments
		End Get
		Set
			Me._TblDepartments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblJobsPerDepartment", Storage:="_TblJobsPerDepartments", ThisKey:="Id", OtherKey:="DepartmentId")>  _
	Public Property TblJobsPerDepartments() As EntitySet(Of TblJobsPerDepartment)
		Get
			Return Me._TblJobsPerDepartments
		End Get
		Set
			Me._TblJobsPerDepartments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblRequiredJob", Storage:="_TblRequiredJobs", ThisKey:="Id", OtherKey:="DepartmentId")>  _
	Public Property TblRequiredJobs() As EntitySet(Of TblRequiredJob)
		Get
			Return Me._TblRequiredJobs
		End Get
		Set
			Me._TblRequiredJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblEmployeeJob", Storage:="_TblEmployeeJobs", ThisKey:="Id", OtherKey:="DepId")>  _
	Public Property TblEmployeeJobs() As EntitySet(Of TblEmployeeJob)
		Get
			Return Me._TblEmployeeJobs
		End Get
		Set
			Me._TblEmployeeJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblJobDescription", Storage:="_TblJobDescriptions", ThisKey:="Id", OtherKey:="ScheduleDepId")>  _
	Public Property TblJobDescriptions() As EntitySet(Of TblJobDescription)
		Get
			Return Me._TblJobDescriptions
		End Get
		Set
			Me._TblJobDescriptions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblTrainee", Storage:="_TblTrainees", ThisKey:="Id", OtherKey:="DepartmentId")>  _
	Public Property TblTrainees() As EntitySet(Of TblTrainee)
		Get
			Return Me._TblTrainees
		End Get
		Set
			Me._TblTrainees.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblDepartment", Storage:="_TblDepartment", ThisKey:="ParentId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartment() As TblDepartment
		Get
			Return Me._TblDepartment.Entity
		End Get
		Set
			Dim previousValue As TblDepartment = Me._TblDepartment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartment.Entity = Nothing
					previousValue.TblDepartments.Remove(Me)
				End If
				Me._TblDepartment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDepartments.Add(Me)
					Me._ParentId = value.Id
				Else
					Me._ParentId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartmentCategory_TblDepartment", Storage:="_TblDepartmentCategory", ThisKey:="DepCategoryId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartmentCategory() As TblDepartmentCategory
		Get
			Return Me._TblDepartmentCategory.Entity
		End Get
		Set
			Dim previousValue As TblDepartmentCategory = Me._TblDepartmentCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartmentCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartmentCategory.Entity = Nothing
					previousValue.TblDepartments.Remove(Me)
				End If
				Me._TblDepartmentCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDepartments.Add(Me)
					Me._DepCategoryId = value.Id
				Else
					Me._DepCategoryId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartmentCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartmentType_TblDepartment", Storage:="_TblDepartmentType", ThisKey:="TypeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartmentType() As TblDepartmentType
		Get
			Return Me._TblDepartmentType.Entity
		End Get
		Set
			Dim previousValue As TblDepartmentType = Me._TblDepartmentType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartmentType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartmentType.Entity = Nothing
					previousValue.TblDepartments.Remove(Me)
				End If
				Me._TblDepartmentType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDepartments.Add(Me)
					Me._TypeId = value.Id
				Else
					Me._TypeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartmentType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCompanyProfile_TblDepartment", Storage:="_TblCompanyProfile", ThisKey:="CompanyProfileId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCompanyProfile() As TblCompanyProfile
		Get
			Return Me._TblCompanyProfile.Entity
		End Get
		Set
			Dim previousValue As TblCompanyProfile = Me._TblCompanyProfile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCompanyProfile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCompanyProfile.Entity = Nothing
					previousValue.TblDepartments.Remove(Me)
				End If
				Me._TblCompanyProfile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDepartments.Add(Me)
					Me._CompanyProfileId = value.Id
				Else
					Me._CompanyProfileId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCompanyProfile")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblDepartment = Me
	End Sub
	
	Private Sub detach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblDepartment = Nothing
	End Sub
	
	Private Sub attach_TblJobsPerDepartments(ByVal entity As TblJobsPerDepartment)
		Me.SendPropertyChanging
		entity.TblDepartment = Me
	End Sub
	
	Private Sub detach_TblJobsPerDepartments(ByVal entity As TblJobsPerDepartment)
		Me.SendPropertyChanging
		entity.TblDepartment = Nothing
	End Sub
	
	Private Sub attach_TblRequiredJobs(ByVal entity As TblRequiredJob)
		Me.SendPropertyChanging
		entity.TblDepartment = Me
	End Sub
	
	Private Sub detach_TblRequiredJobs(ByVal entity As TblRequiredJob)
		Me.SendPropertyChanging
		entity.TblDepartment = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblDepartment = Me
	End Sub
	
	Private Sub detach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblDepartment = Nothing
	End Sub
	
	Private Sub attach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblDepartment = Me
	End Sub
	
	Private Sub detach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblDepartment = Nothing
	End Sub
	
	Private Sub attach_TblTrainees(ByVal entity As TblTrainee)
		Me.SendPropertyChanging
		entity.TblDepartment = Me
	End Sub
	
	Private Sub detach_TblTrainees(ByVal entity As TblTrainee)
		Me.SendPropertyChanging
		entity.TblDepartment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblDepartmentCategory")>  _
Partial Public Class TblDepartmentCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblDepartments As EntitySet(Of TblDepartment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblDepartments = New EntitySet(Of TblDepartment)(AddressOf Me.attach_TblDepartments, AddressOf Me.detach_TblDepartments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartmentCategory_TblDepartment", Storage:="_TblDepartments", ThisKey:="Id", OtherKey:="DepCategoryId")>  _
	Public Property TblDepartments() As EntitySet(Of TblDepartment)
		Get
			Return Me._TblDepartments
		End Get
		Set
			Me._TblDepartments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblDepartmentCategory = Me
	End Sub
	
	Private Sub detach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblDepartmentCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblDepartmentForSchedule")>  _
Partial Public Class TblDepartmentForSchedule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _SupervisorJobId As System.Nullable(Of Integer)
	
	Private _ManagerJobId As System.Nullable(Of Integer)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
	Private _TblJobDescription1 As EntityRef(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnArabicNameChanged()
    End Sub
    Partial Private Sub OnSupervisorJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupervisorJobIdChanged()
    End Sub
    Partial Private Sub OnManagerJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnManagerJobIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		Me._TblJobDescription1 = CType(Nothing, EntityRef(Of TblJobDescription))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me.OnArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._ArabicName = value
				Me.SendPropertyChanged("ArabicName")
				Me.OnArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupervisorJobId", DbType:="Int")>  _
	Public Property SupervisorJobId() As System.Nullable(Of Integer)
		Get
			Return Me._SupervisorJobId
		End Get
		Set
			If (Me._SupervisorJobId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSupervisorJobIdChanging(value)
				Me.SendPropertyChanging
				Me._SupervisorJobId = value
				Me.SendPropertyChanged("SupervisorJobId")
				Me.OnSupervisorJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ManagerJobId", DbType:="Int")>  _
	Public Property ManagerJobId() As System.Nullable(Of Integer)
		Get
			Return Me._ManagerJobId
		End Get
		Set
			If (Me._ManagerJobId.Equals(value) = false) Then
				If Me._TblJobDescription1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnManagerJobIdChanging(value)
				Me.SendPropertyChanging
				Me._ManagerJobId = value
				Me.SendPropertyChanged("ManagerJobId")
				Me.OnManagerJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblDepartmentForSchedule", Storage:="_TblJobDescription", ThisKey:="SupervisorJobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblDepartmentForSchedules.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDepartmentForSchedules.Add(Me)
					Me._SupervisorJobId = value.Id
				Else
					Me._SupervisorJobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblDepartmentForSchedule1", Storage:="_TblJobDescription1", ThisKey:="ManagerJobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription1() As TblJobDescription
		Get
			Return Me._TblJobDescription1.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription1.Entity = Nothing
					previousValue.TblDepartmentForSchedules1.Remove(Me)
				End If
				Me._TblJobDescription1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDepartmentForSchedules1.Add(Me)
					Me._ManagerJobId = value.Id
				Else
					Me._ManagerJobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblDepartmentType")>  _
Partial Public Class TblDepartmentType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblDepartments As EntitySet(Of TblDepartment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblDepartments = New EntitySet(Of TblDepartment)(AddressOf Me.attach_TblDepartments, AddressOf Me.detach_TblDepartments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartmentType_TblDepartment", Storage:="_TblDepartments", ThisKey:="Id", OtherKey:="TypeId")>  _
	Public Property TblDepartments() As EntitySet(Of TblDepartment)
		Get
			Return Me._TblDepartments
		End Get
		Set
			Me._TblDepartments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblDepartmentType = Me
	End Sub
	
	Private Sub detach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblDepartmentType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEducation")>  _
Partial Public Class TblEducation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Major As String
	
	Private _University As String
	
	Private _StartYear As System.Nullable(Of Date)
	
	Private _GraduationYear As System.Nullable(Of Date)
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _CertificateId As System.Nullable(Of Integer)
	
	Private _GPA As System.Nullable(Of Decimal)
	
	Private _Note As String
	
	Private _TblCertificate As EntityRef(Of TblCertificate)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMajorChanging(value As String)
    End Sub
    Partial Private Sub OnMajorChanged()
    End Sub
    Partial Private Sub OnUniversityChanging(value As String)
    End Sub
    Partial Private Sub OnUniversityChanged()
    End Sub
    Partial Private Sub OnStartYearChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartYearChanged()
    End Sub
    Partial Private Sub OnGraduationYearChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnGraduationYearChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnCertificateIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCertificateIdChanged()
    End Sub
    Partial Private Sub OnGPAChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGPAChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblCertificate = CType(Nothing, EntityRef(Of TblCertificate))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Major", DbType:="NVarChar(50)")>  _
	Public Property Major() As String
		Get
			Return Me._Major
		End Get
		Set
			If (String.Equals(Me._Major, value) = false) Then
				Me.OnMajorChanging(value)
				Me.SendPropertyChanging
				Me._Major = value
				Me.SendPropertyChanged("Major")
				Me.OnMajorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_University", DbType:="NVarChar(50)")>  _
	Public Property University() As String
		Get
			Return Me._University
		End Get
		Set
			If (String.Equals(Me._University, value) = false) Then
				Me.OnUniversityChanging(value)
				Me.SendPropertyChanging
				Me._University = value
				Me.SendPropertyChanged("University")
				Me.OnUniversityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartYear", DbType:="Date")>  _
	Public Property StartYear() As System.Nullable(Of Date)
		Get
			Return Me._StartYear
		End Get
		Set
			If (Me._StartYear.Equals(value) = false) Then
				Me.OnStartYearChanging(value)
				Me.SendPropertyChanging
				Me._StartYear = value
				Me.SendPropertyChanged("StartYear")
				Me.OnStartYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GraduationYear", DbType:="Date")>  _
	Public Property GraduationYear() As System.Nullable(Of Date)
		Get
			Return Me._GraduationYear
		End Get
		Set
			If (Me._GraduationYear.Equals(value) = false) Then
				Me.OnGraduationYearChanging(value)
				Me.SendPropertyChanging
				Me._GraduationYear = value
				Me.SendPropertyChanged("GraduationYear")
				Me.OnGraduationYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CertificateId", DbType:="Int")>  _
	Public Property CertificateId() As System.Nullable(Of Integer)
		Get
			Return Me._CertificateId
		End Get
		Set
			If (Me._CertificateId.Equals(value) = false) Then
				If Me._TblCertificate.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCertificateIdChanging(value)
				Me.SendPropertyChanging
				Me._CertificateId = value
				Me.SendPropertyChanged("CertificateId")
				Me.OnCertificateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GPA", DbType:="Decimal(18,2)")>  _
	Public Property GPA() As System.Nullable(Of Decimal)
		Get
			Return Me._GPA
		End Get
		Set
			If (Me._GPA.Equals(value) = false) Then
				Me.OnGPAChanging(value)
				Me.SendPropertyChanging
				Me._GPA = value
				Me.SendPropertyChanged("GPA")
				Me.OnGPAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCertificate_TblEducation", Storage:="_TblCertificate", ThisKey:="CertificateId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCertificate() As TblCertificate
		Get
			Return Me._TblCertificate.Entity
		End Get
		Set
			Dim previousValue As TblCertificate = Me._TblCertificate.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCertificate.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCertificate.Entity = Nothing
					previousValue.TblEducations.Remove(Me)
				End If
				Me._TblCertificate.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEducations.Add(Me)
					Me._CertificateId = value.Id
				Else
					Me._CertificateId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCertificate")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblEducation", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblEducations.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEducations.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblExperienceHistory")>  _
Partial Public Class TblExperienceHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _LeaveDate As System.Nullable(Of Date)
	
	Private _LeaveReason As String
	
	Private _Salary As System.Nullable(Of Decimal)
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _CurrencyId As System.Nullable(Of Integer)
	
	Private _PositionId As System.Nullable(Of Integer)
	
	Private _CompanyName As String
	
	Private _StillWorking As System.Nullable(Of Boolean)
	
	Private _CanBeLeave As System.Nullable(Of Boolean)
	
	Private _ScheduleNote As String
	
	Private _IsNSSF As System.Nullable(Of Boolean)
	
	Private _NSSFSide As String
	
	Private _NSSFNumber As System.Nullable(Of Integer)
	
	Private _TblCurrency As EntityRef(Of TblCurrency)
	
	Private _TblPosition As EntityRef(Of TblPosition)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnLeaveDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLeaveDateChanged()
    End Sub
    Partial Private Sub OnLeaveReasonChanging(value As String)
    End Sub
    Partial Private Sub OnLeaveReasonChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnCurrencyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyIdChanged()
    End Sub
    Partial Private Sub OnPositionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPositionIdChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnStillWorkingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStillWorkingChanged()
    End Sub
    Partial Private Sub OnCanBeLeaveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCanBeLeaveChanged()
    End Sub
    Partial Private Sub OnScheduleNoteChanging(value As String)
    End Sub
    Partial Private Sub OnScheduleNoteChanged()
    End Sub
    Partial Private Sub OnIsNSSFChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsNSSFChanged()
    End Sub
    Partial Private Sub OnNSSFSideChanging(value As String)
    End Sub
    Partial Private Sub OnNSSFSideChanged()
    End Sub
    Partial Private Sub OnNSSFNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNSSFNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblCurrency = CType(Nothing, EntityRef(Of TblCurrency))
		Me._TblPosition = CType(Nothing, EntityRef(Of TblPosition))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeaveDate", DbType:="Date")>  _
	Public Property LeaveDate() As System.Nullable(Of Date)
		Get
			Return Me._LeaveDate
		End Get
		Set
			If (Me._LeaveDate.Equals(value) = false) Then
				Me.OnLeaveDateChanging(value)
				Me.SendPropertyChanging
				Me._LeaveDate = value
				Me.SendPropertyChanged("LeaveDate")
				Me.OnLeaveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeaveReason", DbType:="NVarChar(MAX)")>  _
	Public Property LeaveReason() As String
		Get
			Return Me._LeaveReason
		End Get
		Set
			If (String.Equals(Me._LeaveReason, value) = false) Then
				Me.OnLeaveReasonChanging(value)
				Me.SendPropertyChanging
				Me._LeaveReason = value
				Me.SendPropertyChanged("LeaveReason")
				Me.OnLeaveReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary", DbType:="Decimal(18,2)")>  _
	Public Property Salary() As System.Nullable(Of Decimal)
		Get
			Return Me._Salary
		End Get
		Set
			If (Me._Salary.Equals(value) = false) Then
				Me.OnSalaryChanging(value)
				Me.SendPropertyChanging
				Me._Salary = value
				Me.SendPropertyChanged("Salary")
				Me.OnSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyId", DbType:="Int")>  _
	Public Property CurrencyId() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyId
		End Get
		Set
			If (Me._CurrencyId.Equals(value) = false) Then
				If Me._TblCurrency.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrencyIdChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyId = value
				Me.SendPropertyChanged("CurrencyId")
				Me.OnCurrencyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionId", DbType:="Int")>  _
	Public Property PositionId() As System.Nullable(Of Integer)
		Get
			Return Me._PositionId
		End Get
		Set
			If (Me._PositionId.Equals(value) = false) Then
				If Me._TblPosition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPositionIdChanging(value)
				Me.SendPropertyChanging
				Me._PositionId = value
				Me.SendPropertyChanged("PositionId")
				Me.OnPositionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(100)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StillWorking", DbType:="Bit")>  _
	Public Property StillWorking() As System.Nullable(Of Boolean)
		Get
			Return Me._StillWorking
		End Get
		Set
			If (Me._StillWorking.Equals(value) = false) Then
				Me.OnStillWorkingChanging(value)
				Me.SendPropertyChanging
				Me._StillWorking = value
				Me.SendPropertyChanged("StillWorking")
				Me.OnStillWorkingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CanBeLeave", DbType:="Bit")>  _
	Public Property CanBeLeave() As System.Nullable(Of Boolean)
		Get
			Return Me._CanBeLeave
		End Get
		Set
			If (Me._CanBeLeave.Equals(value) = false) Then
				Me.OnCanBeLeaveChanging(value)
				Me.SendPropertyChanging
				Me._CanBeLeave = value
				Me.SendPropertyChanged("CanBeLeave")
				Me.OnCanBeLeaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScheduleNote", DbType:="NVarChar(MAX)")>  _
	Public Property ScheduleNote() As String
		Get
			Return Me._ScheduleNote
		End Get
		Set
			If (String.Equals(Me._ScheduleNote, value) = false) Then
				Me.OnScheduleNoteChanging(value)
				Me.SendPropertyChanging
				Me._ScheduleNote = value
				Me.SendPropertyChanged("ScheduleNote")
				Me.OnScheduleNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsNSSF", DbType:="Bit")>  _
	Public Property IsNSSF() As System.Nullable(Of Boolean)
		Get
			Return Me._IsNSSF
		End Get
		Set
			If (Me._IsNSSF.Equals(value) = false) Then
				Me.OnIsNSSFChanging(value)
				Me.SendPropertyChanging
				Me._IsNSSF = value
				Me.SendPropertyChanged("IsNSSF")
				Me.OnIsNSSFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSSFSide", DbType:="NVarChar(50)")>  _
	Public Property NSSFSide() As String
		Get
			Return Me._NSSFSide
		End Get
		Set
			If (String.Equals(Me._NSSFSide, value) = false) Then
				Me.OnNSSFSideChanging(value)
				Me.SendPropertyChanging
				Me._NSSFSide = value
				Me.SendPropertyChanged("NSSFSide")
				Me.OnNSSFSideChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSSFNumber", DbType:="Int")>  _
	Public Property NSSFNumber() As System.Nullable(Of Integer)
		Get
			Return Me._NSSFNumber
		End Get
		Set
			If (Me._NSSFNumber.Equals(value) = false) Then
				Me.OnNSSFNumberChanging(value)
				Me.SendPropertyChanging
				Me._NSSFNumber = value
				Me.SendPropertyChanged("NSSFNumber")
				Me.OnNSSFNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblExperienceHistory", Storage:="_TblCurrency", ThisKey:="CurrencyId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCurrency() As TblCurrency
		Get
			Return Me._TblCurrency.Entity
		End Get
		Set
			Dim previousValue As TblCurrency = Me._TblCurrency.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCurrency.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCurrency.Entity = Nothing
					previousValue.TblExperienceHistories.Remove(Me)
				End If
				Me._TblCurrency.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblExperienceHistories.Add(Me)
					Me._CurrencyId = value.Id
				Else
					Me._CurrencyId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCurrency")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPosition_TblExperienceHistory", Storage:="_TblPosition", ThisKey:="PositionId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblPosition() As TblPosition
		Get
			Return Me._TblPosition.Entity
		End Get
		Set
			Dim previousValue As TblPosition = Me._TblPosition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblPosition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblPosition.Entity = Nothing
					previousValue.TblExperienceHistories.Remove(Me)
				End If
				Me._TblPosition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblExperienceHistories.Add(Me)
					Me._PositionId = value.Id
				Else
					Me._PositionId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblPosition")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblExperienceHistory", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblExperienceHistories.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblExperienceHistories.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblJobCategories")>  _
Partial Public Class TblJobCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblJobDescriptions As EntitySet(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblJobDescriptions = New EntitySet(Of TblJobDescription)(AddressOf Me.attach_TblJobDescriptions, AddressOf Me.detach_TblJobDescriptions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobCategory_TblJobDescription", Storage:="_TblJobDescriptions", ThisKey:="Id", OtherKey:="JobCategoryId")>  _
	Public Property TblJobDescriptions() As EntitySet(Of TblJobDescription)
		Get
			Return Me._TblJobDescriptions
		End Get
		Set
			Me._TblJobDescriptions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblJobCategory = Me
	End Sub
	
	Private Sub detach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblJobCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblJobRequirement")>  _
Partial Public Class TblJobRequirement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _RequirementId As System.Nullable(Of Integer)
	
	Private _IsPrimary As System.Nullable(Of Boolean)
	
	Private _TblRequirement As EntityRef(Of TblRequirement)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobIdChanged()
    End Sub
    Partial Private Sub OnRequirementIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRequirementIdChanged()
    End Sub
    Partial Private Sub OnIsPrimaryChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPrimaryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblRequirement = CType(Nothing, EntityRef(Of TblRequirement))
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJobIdChanging(value)
				Me.SendPropertyChanging
				Me._JobId = value
				Me.SendPropertyChanged("JobId")
				Me.OnJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequirementId", DbType:="Int")>  _
	Public Property RequirementId() As System.Nullable(Of Integer)
		Get
			Return Me._RequirementId
		End Get
		Set
			If (Me._RequirementId.Equals(value) = false) Then
				If Me._TblRequirement.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRequirementIdChanging(value)
				Me.SendPropertyChanging
				Me._RequirementId = value
				Me.SendPropertyChanged("RequirementId")
				Me.OnRequirementIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPrimary", DbType:="Bit")>  _
	Public Property IsPrimary() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPrimary
		End Get
		Set
			If (Me._IsPrimary.Equals(value) = false) Then
				Me.OnIsPrimaryChanging(value)
				Me.SendPropertyChanging
				Me._IsPrimary = value
				Me.SendPropertyChanged("IsPrimary")
				Me.OnIsPrimaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblRequirement_TblJobRequirement", Storage:="_TblRequirement", ThisKey:="RequirementId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblRequirement() As TblRequirement
		Get
			Return Me._TblRequirement.Entity
		End Get
		Set
			Dim previousValue As TblRequirement = Me._TblRequirement.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblRequirement.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblRequirement.Entity = Nothing
					previousValue.TblJobRequirements.Remove(Me)
				End If
				Me._TblRequirement.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobRequirements.Add(Me)
					Me._RequirementId = value.Id
				Else
					Me._RequirementId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblRequirement")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobRequirement", Storage:="_TblJobDescription", ThisKey:="JobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblJobRequirements.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobRequirements.Add(Me)
					Me._JobId = value.Id
				Else
					Me._JobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblJobsPerDepartment")>  _
Partial Public Class TblJobsPerDepartment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _TblDepartment As EntityRef(Of TblDepartment)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDepartmentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartmentIdChanged()
    End Sub
    Partial Private Sub OnJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblDepartment = CType(Nothing, EntityRef(Of TblDepartment))
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				If Me._TblDepartment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepartmentIdChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentId = value
				Me.SendPropertyChanged("DepartmentId")
				Me.OnDepartmentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJobIdChanging(value)
				Me.SendPropertyChanging
				Me._JobId = value
				Me.SendPropertyChanged("JobId")
				Me.OnJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblJobsPerDepartment", Storage:="_TblDepartment", ThisKey:="DepartmentId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartment() As TblDepartment
		Get
			Return Me._TblDepartment.Entity
		End Get
		Set
			Dim previousValue As TblDepartment = Me._TblDepartment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartment.Entity = Nothing
					previousValue.TblJobsPerDepartments.Remove(Me)
				End If
				Me._TblDepartment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobsPerDepartments.Add(Me)
					Me._DepartmentId = value.Id
				Else
					Me._DepartmentId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobsPerDepartment", Storage:="_TblJobDescription", ThisKey:="JobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblJobsPerDepartments.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobsPerDepartments.Add(Me)
					Me._JobId = value.Id
				Else
					Me._JobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblJobTasks")>  _
Partial Public Class TblJobTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _TaskId As System.Nullable(Of Integer)
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _RequiredForJob As System.Nullable(Of Boolean)
	
	Private _RequiredForAppraisal As System.Nullable(Of Boolean)
	
	Private _TblTask As EntityRef(Of TblTask)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTaskIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTaskIdChanged()
    End Sub
    Partial Private Sub OnJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobIdChanged()
    End Sub
    Partial Private Sub OnRequiredForJobChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequiredForJobChanged()
    End Sub
    Partial Private Sub OnRequiredForAppraisalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequiredForAppraisalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblTask = CType(Nothing, EntityRef(Of TblTask))
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaskId", DbType:="Int")>  _
	Public Property TaskId() As System.Nullable(Of Integer)
		Get
			Return Me._TaskId
		End Get
		Set
			If (Me._TaskId.Equals(value) = false) Then
				If Me._TblTask.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTaskIdChanging(value)
				Me.SendPropertyChanging
				Me._TaskId = value
				Me.SendPropertyChanged("TaskId")
				Me.OnTaskIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJobIdChanging(value)
				Me.SendPropertyChanging
				Me._JobId = value
				Me.SendPropertyChanged("JobId")
				Me.OnJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredForJob", DbType:="Bit")>  _
	Public Property RequiredForJob() As System.Nullable(Of Boolean)
		Get
			Return Me._RequiredForJob
		End Get
		Set
			If (Me._RequiredForJob.Equals(value) = false) Then
				Me.OnRequiredForJobChanging(value)
				Me.SendPropertyChanging
				Me._RequiredForJob = value
				Me.SendPropertyChanged("RequiredForJob")
				Me.OnRequiredForJobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredForAppraisal", DbType:="Bit")>  _
	Public Property RequiredForAppraisal() As System.Nullable(Of Boolean)
		Get
			Return Me._RequiredForAppraisal
		End Get
		Set
			If (Me._RequiredForAppraisal.Equals(value) = false) Then
				Me.OnRequiredForAppraisalChanging(value)
				Me.SendPropertyChanging
				Me._RequiredForAppraisal = value
				Me.SendPropertyChanged("RequiredForAppraisal")
				Me.OnRequiredForAppraisalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTask_TblJobTask", Storage:="_TblTask", ThisKey:="TaskId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblTask() As TblTask
		Get
			Return Me._TblTask.Entity
		End Get
		Set
			Dim previousValue As TblTask = Me._TblTask.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblTask.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblTask.Entity = Nothing
					previousValue.TblJobTasks.Remove(Me)
				End If
				Me._TblTask.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobTasks.Add(Me)
					Me._TaskId = value.Id
				Else
					Me._TaskId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblTask")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobTask", Storage:="_TblJobDescription", ThisKey:="JobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblJobTasks.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobTasks.Add(Me)
					Me._JobId = value.Id
				Else
					Me._JobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblLanguages")>  _
Partial Public Class TblLanguage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Language As String
	
	Private _ReadingLevel As System.Nullable(Of Integer)
	
	Private _WritingLevel As System.Nullable(Of Integer)
	
	Private _CommLevel As System.Nullable(Of Integer)
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLanguageChanging(value As String)
    End Sub
    Partial Private Sub OnLanguageChanged()
    End Sub
    Partial Private Sub OnReadingLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReadingLevelChanged()
    End Sub
    Partial Private Sub OnWritingLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWritingLevelChanged()
    End Sub
    Partial Private Sub OnCommLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCommLevelChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Language", DbType:="NVarChar(50)")>  _
	Public Property Language() As String
		Get
			Return Me._Language
		End Get
		Set
			If (String.Equals(Me._Language, value) = false) Then
				Me.OnLanguageChanging(value)
				Me.SendPropertyChanging
				Me._Language = value
				Me.SendPropertyChanged("Language")
				Me.OnLanguageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReadingLevel", DbType:="Int")>  _
	Public Property ReadingLevel() As System.Nullable(Of Integer)
		Get
			Return Me._ReadingLevel
		End Get
		Set
			If (Me._ReadingLevel.Equals(value) = false) Then
				Me.OnReadingLevelChanging(value)
				Me.SendPropertyChanging
				Me._ReadingLevel = value
				Me.SendPropertyChanged("ReadingLevel")
				Me.OnReadingLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WritingLevel", DbType:="Int")>  _
	Public Property WritingLevel() As System.Nullable(Of Integer)
		Get
			Return Me._WritingLevel
		End Get
		Set
			If (Me._WritingLevel.Equals(value) = false) Then
				Me.OnWritingLevelChanging(value)
				Me.SendPropertyChanging
				Me._WritingLevel = value
				Me.SendPropertyChanged("WritingLevel")
				Me.OnWritingLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommLevel", DbType:="Int")>  _
	Public Property CommLevel() As System.Nullable(Of Integer)
		Get
			Return Me._CommLevel
		End Get
		Set
			If (Me._CommLevel.Equals(value) = false) Then
				Me.OnCommLevelChanging(value)
				Me.SendPropertyChanging
				Me._CommLevel = value
				Me.SendPropertyChanged("CommLevel")
				Me.OnCommLevelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblLanguage", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblLanguages.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblLanguages.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMedicalIssue")>  _
Partial Public Class TblMedicalIssue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MedicalIssue As String
	
	Private _TblApplicantMedicalIssues As EntitySet(Of TblApplicantMedicalIssue)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMedicalIssueChanging(value As String)
    End Sub
    Partial Private Sub OnMedicalIssueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicantMedicalIssues = New EntitySet(Of TblApplicantMedicalIssue)(AddressOf Me.attach_TblApplicantMedicalIssues, AddressOf Me.detach_TblApplicantMedicalIssues)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MedicalIssue", DbType:="NVarChar(50)")>  _
	Public Property MedicalIssue() As String
		Get
			Return Me._MedicalIssue
		End Get
		Set
			If (String.Equals(Me._MedicalIssue, value) = false) Then
				Me.OnMedicalIssueChanging(value)
				Me.SendPropertyChanging
				Me._MedicalIssue = value
				Me.SendPropertyChanged("MedicalIssue")
				Me.OnMedicalIssueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMedicalIssue_TblApplicantMedicalIssue", Storage:="_TblApplicantMedicalIssues", ThisKey:="Id", OtherKey:="MedicalIssueId")>  _
	Public Property TblApplicantMedicalIssues() As EntitySet(Of TblApplicantMedicalIssue)
		Get
			Return Me._TblApplicantMedicalIssues
		End Get
		Set
			Me._TblApplicantMedicalIssues.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblApplicantMedicalIssues(ByVal entity As TblApplicantMedicalIssue)
		Me.SendPropertyChanging
		entity.TblMedicalIssue = Me
	End Sub
	
	Private Sub detach_TblApplicantMedicalIssues(ByVal entity As TblApplicantMedicalIssue)
		Me.SendPropertyChanging
		entity.TblMedicalIssue = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMotivationPunishment")>  _
Partial Public Class TblMotivationPunishment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _Reason As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _MotivationPunishmentTypeId As System.Nullable(Of Integer)
	
	Private _IsMotivation As System.Nullable(Of Boolean)
	
	Private _Note As String
	
	Private _TblMotivationPunishmentType As EntityRef(Of TblMotivationPunishmentType)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnMotivationPunishmentTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMotivationPunishmentTypeIdChanged()
    End Sub
    Partial Private Sub OnIsMotivationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsMotivationChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblMotivationPunishmentType = CType(Nothing, EntityRef(Of TblMotivationPunishmentType))
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NVarChar(250)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotivationPunishmentTypeId", DbType:="Int")>  _
	Public Property MotivationPunishmentTypeId() As System.Nullable(Of Integer)
		Get
			Return Me._MotivationPunishmentTypeId
		End Get
		Set
			If (Me._MotivationPunishmentTypeId.Equals(value) = false) Then
				If Me._TblMotivationPunishmentType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMotivationPunishmentTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._MotivationPunishmentTypeId = value
				Me.SendPropertyChanged("MotivationPunishmentTypeId")
				Me.OnMotivationPunishmentTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMotivation", DbType:="Bit")>  _
	Public Property IsMotivation() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMotivation
		End Get
		Set
			If (Me._IsMotivation.Equals(value) = false) Then
				Me.OnIsMotivationChanging(value)
				Me.SendPropertyChanging
				Me._IsMotivation = value
				Me.SendPropertyChanged("IsMotivation")
				Me.OnIsMotivationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(250)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMotivationPunishmentType_TblMotivationPunishment", Storage:="_TblMotivationPunishmentType", ThisKey:="MotivationPunishmentTypeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblMotivationPunishmentType() As TblMotivationPunishmentType
		Get
			Return Me._TblMotivationPunishmentType.Entity
		End Get
		Set
			Dim previousValue As TblMotivationPunishmentType = Me._TblMotivationPunishmentType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblMotivationPunishmentType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblMotivationPunishmentType.Entity = Nothing
					previousValue.TblMotivationPunishments.Remove(Me)
				End If
				Me._TblMotivationPunishmentType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblMotivationPunishments.Add(Me)
					Me._MotivationPunishmentTypeId = value.Id
				Else
					Me._MotivationPunishmentTypeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblMotivationPunishmentType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblMotivationPunishment", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblMotivationPunishments.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblMotivationPunishments.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMotivationPunishmentType")>  _
Partial Public Class TblMotivationPunishmentType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblMotivationPunishments As EntitySet(Of TblMotivationPunishment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblMotivationPunishments = New EntitySet(Of TblMotivationPunishment)(AddressOf Me.attach_TblMotivationPunishments, AddressOf Me.detach_TblMotivationPunishments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMotivationPunishmentType_TblMotivationPunishment", Storage:="_TblMotivationPunishments", ThisKey:="Id", OtherKey:="MotivationPunishmentTypeId")>  _
	Public Property TblMotivationPunishments() As EntitySet(Of TblMotivationPunishment)
		Get
			Return Me._TblMotivationPunishments
		End Get
		Set
			Me._TblMotivationPunishments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblMotivationPunishments(ByVal entity As TblMotivationPunishment)
		Me.SendPropertyChanging
		entity.TblMotivationPunishmentType = Me
	End Sub
	
	Private Sub detach_TblMotivationPunishments(ByVal entity As TblMotivationPunishment)
		Me.SendPropertyChanging
		entity.TblMotivationPunishmentType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblPosition")>  _
Partial Public Class TblPosition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblExperienceHistories As EntitySet(Of TblExperienceHistory)
	
	Private _TblSettings As EntitySet(Of TblSetting)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblExperienceHistories = New EntitySet(Of TblExperienceHistory)(AddressOf Me.attach_TblExperienceHistories, AddressOf Me.detach_TblExperienceHistories)
		Me._TblSettings = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings, AddressOf Me.detach_TblSettings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPosition_TblExperienceHistory", Storage:="_TblExperienceHistories", ThisKey:="Id", OtherKey:="PositionId")>  _
	Public Property TblExperienceHistories() As EntitySet(Of TblExperienceHistory)
		Get
			Return Me._TblExperienceHistories
		End Get
		Set
			Me._TblExperienceHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPosition_TblSetting", Storage:="_TblSettings", ThisKey:="Id", OtherKey:="TraineePositionId")>  _
	Public Property TblSettings() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings
		End Get
		Set
			Me._TblSettings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblExperienceHistories(ByVal entity As TblExperienceHistory)
		Me.SendPropertyChanging
		entity.TblPosition = Me
	End Sub
	
	Private Sub detach_TblExperienceHistories(ByVal entity As TblExperienceHistory)
		Me.SendPropertyChanging
		entity.TblPosition = Nothing
	End Sub
	
	Private Sub attach_TblSettings(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblPosition = Me
	End Sub
	
	Private Sub detach_TblSettings(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblPosition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblRelativeReference")>  _
Partial Public Class TblRelativeReference
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Relation As String
	
	Private _Phone As String
	
	Private _Job As String
	
	Private _IsInCompany As System.Nullable(Of Boolean)
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _RelativeReferenceEmployeeId As System.Nullable(Of Integer)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRelationChanging(value As String)
    End Sub
    Partial Private Sub OnRelationChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnJobChanging(value As String)
    End Sub
    Partial Private Sub OnJobChanged()
    End Sub
    Partial Private Sub OnIsInCompanyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsInCompanyChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnRelativeReferenceEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRelativeReferenceEmployeeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(100)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Relation", DbType:="NVarChar(50)")>  _
	Public Property Relation() As String
		Get
			Return Me._Relation
		End Get
		Set
			If (String.Equals(Me._Relation, value) = false) Then
				Me.OnRelationChanging(value)
				Me.SendPropertyChanging
				Me._Relation = value
				Me.SendPropertyChanged("Relation")
				Me.OnRelationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Job", DbType:="NVarChar(100)")>  _
	Public Property Job() As String
		Get
			Return Me._Job
		End Get
		Set
			If (String.Equals(Me._Job, value) = false) Then
				Me.OnJobChanging(value)
				Me.SendPropertyChanging
				Me._Job = value
				Me.SendPropertyChanged("Job")
				Me.OnJobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsInCompany", DbType:="Bit")>  _
	Public Property IsInCompany() As System.Nullable(Of Boolean)
		Get
			Return Me._IsInCompany
		End Get
		Set
			If (Me._IsInCompany.Equals(value) = false) Then
				Me.OnIsInCompanyChanging(value)
				Me.SendPropertyChanging
				Me._IsInCompany = value
				Me.SendPropertyChanged("IsInCompany")
				Me.OnIsInCompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelativeReferenceEmployeeId", DbType:="Int")>  _
	Public Property RelativeReferenceEmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._RelativeReferenceEmployeeId
		End Get
		Set
			If (Me._RelativeReferenceEmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRelativeReferenceEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._RelativeReferenceEmployeeId = value
				Me.SendPropertyChanged("RelativeReferenceEmployeeId")
				Me.OnRelativeReferenceEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblRelativeReference", Storage:="_TblEmployee", ThisKey:="RelativeReferenceEmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblRelativeReferences.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRelativeReferences.Add(Me)
					Me._RelativeReferenceEmployeeId = value.Id
				Else
					Me._RelativeReferenceEmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblRelativeReference", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblRelativeReferences.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRelativeReferences.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblRequiredHoursForJob")>  _
Partial Public Class TblRequiredHoursForJob
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Description As String
	
	Private _hoursNumber As System.Nullable(Of Decimal)
	
	Private _TblJobDescriptions As EntitySet(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnhoursNumberChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnhoursNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblJobDescriptions = New EntitySet(Of TblJobDescription)(AddressOf Me.attach_TblJobDescriptions, AddressOf Me.detach_TblJobDescriptions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(250)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hoursNumber", DbType:="Decimal(18,2)")>  _
	Public Property hoursNumber() As System.Nullable(Of Decimal)
		Get
			Return Me._hoursNumber
		End Get
		Set
			If (Me._hoursNumber.Equals(value) = false) Then
				Me.OnhoursNumberChanging(value)
				Me.SendPropertyChanging
				Me._hoursNumber = value
				Me.SendPropertyChanged("hoursNumber")
				Me.OnhoursNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblRequiredHoursForJob_TblJobDescription", Storage:="_TblJobDescriptions", ThisKey:="Id", OtherKey:="RequiredHoursForJobId")>  _
	Public Property TblJobDescriptions() As EntitySet(Of TblJobDescription)
		Get
			Return Me._TblJobDescriptions
		End Get
		Set
			Me._TblJobDescriptions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblRequiredHoursForJob = Me
	End Sub
	
	Private Sub detach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblRequiredHoursForJob = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblRequiredJob")>  _
Partial Public Class TblRequiredJob
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _JobDescriptionId As System.Nullable(Of Integer)
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _ExpectedSalary As System.Nullable(Of Decimal)
	
	Private _CurrencyId As System.Nullable(Of Integer)
	
	Private _WayOfWorking As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _TblCurrency As EntityRef(Of TblCurrency)
	
	Private _TblDepartment As EntityRef(Of TblDepartment)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnJobDescriptionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobDescriptionIdChanged()
    End Sub
    Partial Private Sub OnDepartmentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartmentIdChanged()
    End Sub
    Partial Private Sub OnExpectedSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExpectedSalaryChanged()
    End Sub
    Partial Private Sub OnCurrencyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyIdChanged()
    End Sub
    Partial Private Sub OnWayOfWorkingChanging(value As String)
    End Sub
    Partial Private Sub OnWayOfWorkingChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblCurrency = CType(Nothing, EntityRef(Of TblCurrency))
		Me._TblDepartment = CType(Nothing, EntityRef(Of TblDepartment))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobDescriptionId", DbType:="Int")>  _
	Public Property JobDescriptionId() As System.Nullable(Of Integer)
		Get
			Return Me._JobDescriptionId
		End Get
		Set
			If (Me._JobDescriptionId.Equals(value) = false) Then
				Me.OnJobDescriptionIdChanging(value)
				Me.SendPropertyChanging
				Me._JobDescriptionId = value
				Me.SendPropertyChanged("JobDescriptionId")
				Me.OnJobDescriptionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				If Me._TblDepartment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepartmentIdChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentId = value
				Me.SendPropertyChanged("DepartmentId")
				Me.OnDepartmentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpectedSalary", DbType:="Decimal(18,2)")>  _
	Public Property ExpectedSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._ExpectedSalary
		End Get
		Set
			If (Me._ExpectedSalary.Equals(value) = false) Then
				Me.OnExpectedSalaryChanging(value)
				Me.SendPropertyChanging
				Me._ExpectedSalary = value
				Me.SendPropertyChanged("ExpectedSalary")
				Me.OnExpectedSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyId", DbType:="Int")>  _
	Public Property CurrencyId() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyId
		End Get
		Set
			If (Me._CurrencyId.Equals(value) = false) Then
				If Me._TblCurrency.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrencyIdChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyId = value
				Me.SendPropertyChanged("CurrencyId")
				Me.OnCurrencyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WayOfWorking", DbType:="NVarChar(50)")>  _
	Public Property WayOfWorking() As String
		Get
			Return Me._WayOfWorking
		End Get
		Set
			If (String.Equals(Me._WayOfWorking, value) = false) Then
				Me.OnWayOfWorkingChanging(value)
				Me.SendPropertyChanging
				Me._WayOfWorking = value
				Me.SendPropertyChanged("WayOfWorking")
				Me.OnWayOfWorkingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblRequiredJob", Storage:="_TblCurrency", ThisKey:="CurrencyId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCurrency() As TblCurrency
		Get
			Return Me._TblCurrency.Entity
		End Get
		Set
			Dim previousValue As TblCurrency = Me._TblCurrency.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCurrency.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCurrency.Entity = Nothing
					previousValue.TblRequiredJobs.Remove(Me)
				End If
				Me._TblCurrency.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRequiredJobs.Add(Me)
					Me._CurrencyId = value.Id
				Else
					Me._CurrencyId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCurrency")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblRequiredJob", Storage:="_TblDepartment", ThisKey:="DepartmentId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartment() As TblDepartment
		Get
			Return Me._TblDepartment.Entity
		End Get
		Set
			Dim previousValue As TblDepartment = Me._TblDepartment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartment.Entity = Nothing
					previousValue.TblRequiredJobs.Remove(Me)
				End If
				Me._TblDepartment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRequiredJobs.Add(Me)
					Me._DepartmentId = value.Id
				Else
					Me._DepartmentId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblRequiredJob", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblRequiredJobs.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRequiredJobs.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblRequirement")>  _
Partial Public Class TblRequirement
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ExperienceYears As System.Nullable(Of Integer)
	
	Private _CertificateId As System.Nullable(Of Integer)
	
	Private _MinAge As System.Nullable(Of Integer)
	
	Private _MaxAge As System.Nullable(Of Integer)
	
	Private _Major As String
	
	Private _Language As String
	
	Private _Note As String
	
	Private _TypeId As System.Nullable(Of Integer)
	
	Private _Description As String
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _TblJobRequirements As EntitySet(Of TblJobRequirement)
	
	Private _TblCertificate As EntityRef(Of TblCertificate)
	
	Private _TblType As EntityRef(Of TblType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnExperienceYearsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExperienceYearsChanged()
    End Sub
    Partial Private Sub OnCertificateIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCertificateIdChanged()
    End Sub
    Partial Private Sub OnMinAgeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinAgeChanged()
    End Sub
    Partial Private Sub OnMaxAgeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaxAgeChanged()
    End Sub
    Partial Private Sub OnMajorChanging(value As String)
    End Sub
    Partial Private Sub OnMajorChanged()
    End Sub
    Partial Private Sub OnLanguageChanging(value As String)
    End Sub
    Partial Private Sub OnLanguageChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTypeIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnDepartmentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartmentIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblJobRequirements = New EntitySet(Of TblJobRequirement)(AddressOf Me.attach_TblJobRequirements, AddressOf Me.detach_TblJobRequirements)
		Me._TblCertificate = CType(Nothing, EntityRef(Of TblCertificate))
		Me._TblType = CType(Nothing, EntityRef(Of TblType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceYears", DbType:="Int")>  _
	Public Property ExperienceYears() As System.Nullable(Of Integer)
		Get
			Return Me._ExperienceYears
		End Get
		Set
			If (Me._ExperienceYears.Equals(value) = false) Then
				Me.OnExperienceYearsChanging(value)
				Me.SendPropertyChanging
				Me._ExperienceYears = value
				Me.SendPropertyChanged("ExperienceYears")
				Me.OnExperienceYearsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CertificateId", DbType:="Int")>  _
	Public Property CertificateId() As System.Nullable(Of Integer)
		Get
			Return Me._CertificateId
		End Get
		Set
			If (Me._CertificateId.Equals(value) = false) Then
				If Me._TblCertificate.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCertificateIdChanging(value)
				Me.SendPropertyChanging
				Me._CertificateId = value
				Me.SendPropertyChanged("CertificateId")
				Me.OnCertificateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinAge", DbType:="Int")>  _
	Public Property MinAge() As System.Nullable(Of Integer)
		Get
			Return Me._MinAge
		End Get
		Set
			If (Me._MinAge.Equals(value) = false) Then
				Me.OnMinAgeChanging(value)
				Me.SendPropertyChanging
				Me._MinAge = value
				Me.SendPropertyChanged("MinAge")
				Me.OnMinAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxAge", DbType:="Int")>  _
	Public Property MaxAge() As System.Nullable(Of Integer)
		Get
			Return Me._MaxAge
		End Get
		Set
			If (Me._MaxAge.Equals(value) = false) Then
				Me.OnMaxAgeChanging(value)
				Me.SendPropertyChanging
				Me._MaxAge = value
				Me.SendPropertyChanged("MaxAge")
				Me.OnMaxAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Major", DbType:="NVarChar(100)")>  _
	Public Property Major() As String
		Get
			Return Me._Major
		End Get
		Set
			If (String.Equals(Me._Major, value) = false) Then
				Me.OnMajorChanging(value)
				Me.SendPropertyChanging
				Me._Major = value
				Me.SendPropertyChanged("Major")
				Me.OnMajorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Language", DbType:="NVarChar(MAX)")>  _
	Public Property Language() As String
		Get
			Return Me._Language
		End Get
		Set
			If (String.Equals(Me._Language, value) = false) Then
				Me.OnLanguageChanging(value)
				Me.SendPropertyChanging
				Me._Language = value
				Me.SendPropertyChanged("Language")
				Me.OnLanguageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeId", DbType:="Int")>  _
	Public Property TypeId() As System.Nullable(Of Integer)
		Get
			Return Me._TypeId
		End Get
		Set
			If (Me._TypeId.Equals(value) = false) Then
				If Me._TblType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._TypeId = value
				Me.SendPropertyChanged("TypeId")
				Me.OnTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				Me.OnDepartmentIdChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentId = value
				Me.SendPropertyChanged("DepartmentId")
				Me.OnDepartmentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblRequirement_TblJobRequirement", Storage:="_TblJobRequirements", ThisKey:="Id", OtherKey:="RequirementId")>  _
	Public Property TblJobRequirements() As EntitySet(Of TblJobRequirement)
		Get
			Return Me._TblJobRequirements
		End Get
		Set
			Me._TblJobRequirements.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCertificate_TblRequirement", Storage:="_TblCertificate", ThisKey:="CertificateId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCertificate() As TblCertificate
		Get
			Return Me._TblCertificate.Entity
		End Get
		Set
			Dim previousValue As TblCertificate = Me._TblCertificate.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCertificate.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCertificate.Entity = Nothing
					previousValue.TblRequirements.Remove(Me)
				End If
				Me._TblCertificate.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRequirements.Add(Me)
					Me._CertificateId = value.Id
				Else
					Me._CertificateId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCertificate")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblType_TblRequirement", Storage:="_TblType", ThisKey:="TypeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblType() As TblType
		Get
			Return Me._TblType.Entity
		End Get
		Set
			Dim previousValue As TblType = Me._TblType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblType.Entity = Nothing
					previousValue.TblRequirements.Remove(Me)
				End If
				Me._TblType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblRequirements.Add(Me)
					Me._TypeId = value.Id
				Else
					Me._TypeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblJobRequirements(ByVal entity As TblJobRequirement)
		Me.SendPropertyChanging
		entity.TblRequirement = Me
	End Sub
	
	Private Sub detach_TblJobRequirements(ByVal entity As TblJobRequirement)
		Me.SendPropertyChanging
		entity.TblRequirement = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblSkill")>  _
Partial Public Class TblSkill
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblApplicantSkills As EntitySet(Of TblApplicantSkill)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicantSkills = New EntitySet(Of TblApplicantSkill)(AddressOf Me.attach_TblApplicantSkills, AddressOf Me.detach_TblApplicantSkills)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblSkill_TblApplicantSkill", Storage:="_TblApplicantSkills", ThisKey:="Id", OtherKey:="SkillId")>  _
	Public Property TblApplicantSkills() As EntitySet(Of TblApplicantSkill)
		Get
			Return Me._TblApplicantSkills
		End Get
		Set
			Me._TblApplicantSkills.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblApplicantSkills(ByVal entity As TblApplicantSkill)
		Me.SendPropertyChanging
		entity.TblSkill = Me
	End Sub
	
	Private Sub detach_TblApplicantSkills(ByVal entity As TblApplicantSkill)
		Me.SendPropertyChanging
		entity.TblSkill = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblStatus")>  _
Partial Public Class TblStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblSettings As EntitySet(Of TblSetting)
	
	Private _TblSettings1 As EntitySet(Of TblSetting)
	
	Private _TblSettings2 As EntitySet(Of TblSetting)
	
	Private _TblSettings3 As EntitySet(Of TblSetting)
	
	Private _TblSettings4 As EntitySet(Of TblSetting)
	
	Private _TblApplicants As EntitySet(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblSettings = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings, AddressOf Me.detach_TblSettings)
		Me._TblSettings1 = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings1, AddressOf Me.detach_TblSettings1)
		Me._TblSettings2 = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings2, AddressOf Me.detach_TblSettings2)
		Me._TblSettings3 = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings3, AddressOf Me.detach_TblSettings3)
		Me._TblSettings4 = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings4, AddressOf Me.detach_TblSettings4)
		Me._TblApplicants = New EntitySet(Of TblApplicant)(AddressOf Me.attach_TblApplicants, AddressOf Me.detach_TblApplicants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting", Storage:="_TblSettings", ThisKey:="Id", OtherKey:="ApplicantStatusId")>  _
	Public Property TblSettings() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings
		End Get
		Set
			Me._TblSettings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting1", Storage:="_TblSettings1", ThisKey:="Id", OtherKey:="EmployeeStatusId")>  _
	Public Property TblSettings1() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings1
		End Get
		Set
			Me._TblSettings1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting2", Storage:="_TblSettings2", ThisKey:="Id", OtherKey:="RetiredStatusId")>  _
	Public Property TblSettings2() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings2
		End Get
		Set
			Me._TblSettings2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting3", Storage:="_TblSettings3", ThisKey:="Id", OtherKey:="TraineeStatutsId")>  _
	Public Property TblSettings3() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings3
		End Get
		Set
			Me._TblSettings3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting4", Storage:="_TblSettings4", ThisKey:="Id", OtherKey:="UnemploymentStatusId")>  _
	Public Property TblSettings4() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings4
		End Get
		Set
			Me._TblSettings4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblApplicant", Storage:="_TblApplicants", ThisKey:="Id", OtherKey:="StatusId")>  _
	Public Property TblApplicants() As EntitySet(Of TblApplicant)
		Get
			Return Me._TblApplicants
		End Get
		Set
			Me._TblApplicants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblSettings(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus = Me
	End Sub
	
	Private Sub detach_TblSettings(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus = Nothing
	End Sub
	
	Private Sub attach_TblSettings1(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus1 = Me
	End Sub
	
	Private Sub detach_TblSettings1(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus1 = Nothing
	End Sub
	
	Private Sub attach_TblSettings2(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus2 = Me
	End Sub
	
	Private Sub detach_TblSettings2(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus2 = Nothing
	End Sub
	
	Private Sub attach_TblSettings3(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus3 = Me
	End Sub
	
	Private Sub detach_TblSettings3(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus3 = Nothing
	End Sub
	
	Private Sub attach_TblSettings4(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus4 = Me
	End Sub
	
	Private Sub detach_TblSettings4(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblStatus4 = Nothing
	End Sub
	
	Private Sub attach_TblApplicants(ByVal entity As TblApplicant)
		Me.SendPropertyChanging
		entity.TblStatus = Me
	End Sub
	
	Private Sub detach_TblApplicants(ByVal entity As TblApplicant)
		Me.SendPropertyChanging
		entity.TblStatus = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTask")>  _
Partial Public Class TblTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Description As String
	
	Private _CategoryId As System.Nullable(Of Integer)
	
	Private _TblJobTasks As EntitySet(Of TblJobTask)
	
	Private _TblAveragePAPerTasks As EntitySet(Of TblAveragePAPerTask)
	
	Private _TblCategory As EntityRef(Of TblCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblJobTasks = New EntitySet(Of TblJobTask)(AddressOf Me.attach_TblJobTasks, AddressOf Me.detach_TblJobTasks)
		Me._TblAveragePAPerTasks = New EntitySet(Of TblAveragePAPerTask)(AddressOf Me.attach_TblAveragePAPerTasks, AddressOf Me.detach_TblAveragePAPerTasks)
		Me._TblCategory = CType(Nothing, EntityRef(Of TblCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryId", DbType:="Int")>  _
	Public Property CategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._CategoryId
		End Get
		Set
			If (Me._CategoryId.Equals(value) = false) Then
				If Me._TblCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTask_TblJobTask", Storage:="_TblJobTasks", ThisKey:="Id", OtherKey:="TaskId")>  _
	Public Property TblJobTasks() As EntitySet(Of TblJobTask)
		Get
			Return Me._TblJobTasks
		End Get
		Set
			Me._TblJobTasks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTask_TblAveragePAPerTask", Storage:="_TblAveragePAPerTasks", ThisKey:="Id", OtherKey:="TaskId")>  _
	Public Property TblAveragePAPerTasks() As EntitySet(Of TblAveragePAPerTask)
		Get
			Return Me._TblAveragePAPerTasks
		End Get
		Set
			Me._TblAveragePAPerTasks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCategory_TblTask", Storage:="_TblCategory", ThisKey:="CategoryId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCategory() As TblCategory
		Get
			Return Me._TblCategory.Entity
		End Get
		Set
			Dim previousValue As TblCategory = Me._TblCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCategory.Entity = Nothing
					previousValue.TblTasks.Remove(Me)
				End If
				Me._TblCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTasks.Add(Me)
					Me._CategoryId = value.Id
				Else
					Me._CategoryId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblJobTasks(ByVal entity As TblJobTask)
		Me.SendPropertyChanging
		entity.TblTask = Me
	End Sub
	
	Private Sub detach_TblJobTasks(ByVal entity As TblJobTask)
		Me.SendPropertyChanging
		entity.TblTask = Nothing
	End Sub
	
	Private Sub attach_TblAveragePAPerTasks(ByVal entity As TblAveragePAPerTask)
		Me.SendPropertyChanging
		entity.TblTask = Me
	End Sub
	
	Private Sub detach_TblAveragePAPerTasks(ByVal entity As TblAveragePAPerTask)
		Me.SendPropertyChanging
		entity.TblTask = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblType")>  _
Partial Public Class TblType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblRequirements As EntitySet(Of TblRequirement)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblRequirements = New EntitySet(Of TblRequirement)(AddressOf Me.attach_TblRequirements, AddressOf Me.detach_TblRequirements)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblType_TblRequirement", Storage:="_TblRequirements", ThisKey:="Id", OtherKey:="TypeId")>  _
	Public Property TblRequirements() As EntitySet(Of TblRequirement)
		Get
			Return Me._TblRequirements
		End Get
		Set
			Me._TblRequirements.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblRequirements(ByVal entity As TblRequirement)
		Me.SendPropertyChanging
		entity.TblType = Me
	End Sub
	
	Private Sub detach_TblRequirements(ByVal entity As TblRequirement)
		Me.SendPropertyChanging
		entity.TblType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblUser")>  _
Partial Public Class TblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _Username As String
	
	Private _Password As String
	
	Private _LastSeen As System.Nullable(Of Date)
	
	Private _ComputerName As String
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnLastSeenChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastSeenChanged()
    End Sub
    Partial Private Sub OnComputerNameChanging(value As String)
    End Sub
    Partial Private Sub OnComputerNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="NVarChar(50)")>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastSeen", DbType:="DateTime")>  _
	Public Property LastSeen() As System.Nullable(Of Date)
		Get
			Return Me._LastSeen
		End Get
		Set
			If (Me._LastSeen.Equals(value) = false) Then
				Me.OnLastSeenChanging(value)
				Me.SendPropertyChanging
				Me._LastSeen = value
				Me.SendPropertyChanged("LastSeen")
				Me.OnLastSeenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerName", DbType:="NVarChar(50)")>  _
	Public Property ComputerName() As String
		Get
			Return Me._ComputerName
		End Get
		Set
			If (String.Equals(Me._ComputerName, value) = false) Then
				Me.OnComputerNameChanging(value)
				Me.SendPropertyChanging
				Me._ComputerName = value
				Me.SendPropertyChanged("ComputerName")
				Me.OnComputerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblUser", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblUsers.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblUsers.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblWifeHusband")>  _
Partial Public Class TblWifeHusband
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Job As String
	
	Private _IsNSSF As System.Nullable(Of Boolean)
	
	Private _NSSFSide As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _InCompany As System.Nullable(Of Boolean)
	
	Private _WifeHusbandEmployeeId As System.Nullable(Of Integer)
	
	Private _MaritalStatus As String
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnJobChanging(value As String)
    End Sub
    Partial Private Sub OnJobChanged()
    End Sub
    Partial Private Sub OnIsNSSFChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsNSSFChanged()
    End Sub
    Partial Private Sub OnNSSFSideChanging(value As String)
    End Sub
    Partial Private Sub OnNSSFSideChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnInCompanyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnInCompanyChanged()
    End Sub
    Partial Private Sub OnWifeHusbandEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWifeHusbandEmployeeIdChanged()
    End Sub
    Partial Private Sub OnMaritalStatusChanging(value As String)
    End Sub
    Partial Private Sub OnMaritalStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Job", DbType:="NVarChar(50)")>  _
	Public Property Job() As String
		Get
			Return Me._Job
		End Get
		Set
			If (String.Equals(Me._Job, value) = false) Then
				Me.OnJobChanging(value)
				Me.SendPropertyChanging
				Me._Job = value
				Me.SendPropertyChanged("Job")
				Me.OnJobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsNSSF", DbType:="Bit")>  _
	Public Property IsNSSF() As System.Nullable(Of Boolean)
		Get
			Return Me._IsNSSF
		End Get
		Set
			If (Me._IsNSSF.Equals(value) = false) Then
				Me.OnIsNSSFChanging(value)
				Me.SendPropertyChanging
				Me._IsNSSF = value
				Me.SendPropertyChanged("IsNSSF")
				Me.OnIsNSSFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSSFSide", DbType:="NVarChar(50)")>  _
	Public Property NSSFSide() As String
		Get
			Return Me._NSSFSide
		End Get
		Set
			If (String.Equals(Me._NSSFSide, value) = false) Then
				Me.OnNSSFSideChanging(value)
				Me.SendPropertyChanging
				Me._NSSFSide = value
				Me.SendPropertyChanged("NSSFSide")
				Me.OnNSSFSideChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InCompany", DbType:="Bit")>  _
	Public Property InCompany() As System.Nullable(Of Boolean)
		Get
			Return Me._InCompany
		End Get
		Set
			If (Me._InCompany.Equals(value) = false) Then
				Me.OnInCompanyChanging(value)
				Me.SendPropertyChanging
				Me._InCompany = value
				Me.SendPropertyChanged("InCompany")
				Me.OnInCompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WifeHusbandEmployeeId", DbType:="Int")>  _
	Public Property WifeHusbandEmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._WifeHusbandEmployeeId
		End Get
		Set
			If (Me._WifeHusbandEmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWifeHusbandEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._WifeHusbandEmployeeId = value
				Me.SendPropertyChanged("WifeHusbandEmployeeId")
				Me.OnWifeHusbandEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="NVarChar(50)")>  _
	Public Property MaritalStatus() As String
		Get
			Return Me._MaritalStatus
		End Get
		Set
			If (String.Equals(Me._MaritalStatus, value) = false) Then
				Me.OnMaritalStatusChanging(value)
				Me.SendPropertyChanging
				Me._MaritalStatus = value
				Me.SendPropertyChanged("MaritalStatus")
				Me.OnMaritalStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblWifeHusband", Storage:="_TblEmployee", ThisKey:="WifeHusbandEmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblWifeHusbands.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblWifeHusbands.Add(Me)
					Me._WifeHusbandEmployeeId = value.Id
				Else
					Me._WifeHusbandEmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblWifeHusband", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblWifeHusbands.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblWifeHusbands.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblWorkShop")>  _
Partial Public Class TblWorkShop
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Organization As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Place As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnOrganizationChanging(value As String)
    End Sub
    Partial Private Sub OnOrganizationChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnPlaceChanging(value As String)
    End Sub
    Partial Private Sub OnPlaceChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Organization", DbType:="NVarChar(50)")>  _
	Public Property Organization() As String
		Get
			Return Me._Organization
		End Get
		Set
			If (String.Equals(Me._Organization, value) = false) Then
				Me.OnOrganizationChanging(value)
				Me.SendPropertyChanging
				Me._Organization = value
				Me.SendPropertyChanged("Organization")
				Me.OnOrganizationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Place", DbType:="NVarChar(50)")>  _
	Public Property Place() As String
		Get
			Return Me._Place
		End Get
		Set
			If (String.Equals(Me._Place, value) = false) Then
				Me.OnPlaceChanging(value)
				Me.SendPropertyChanging
				Me._Place = value
				Me.SendPropertyChanged("Place")
				Me.OnPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblWorkShop", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblWorkShops.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblWorkShops.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployee")>  _
Partial Public Class TblEmployee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeName As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _BatchNumber As System.Nullable(Of Integer)
	
	Private _PIN As String
	
	Private _CardNumber As String
	
	Private _CardLabelName As String
	
	Private _CardQr1 As String
	
	Private _CardQr2 As String
	
	Private _Qr1 As System.Data.Linq.Binary
	
	Private _Qr2 As System.Data.Linq.Binary
	
	Private _FP As String
	
	Private _FPIndex As String
	
	Private _FPFlag As String
	
	Private _TblMotivationPunishments As EntitySet(Of TblMotivationPunishment)
	
	Private _TblRelativeReferences As EntitySet(Of TblRelativeReference)
	
	Private _TblUsers As EntitySet(Of TblUser)
	
	Private _TblWifeHusbands As EntitySet(Of TblWifeHusband)
	
	Private _TblLeavePermissions As EntitySet(Of TblLeavePermission)
	
	Private _TblLeavePermissions1 As EntitySet(Of TblLeavePermission)
	
	Private _TblEmployeePAs As EntitySet(Of TblEmployeePA)
	
	Private _TblEmployeePAs1 As EntitySet(Of TblEmployeePA)
	
	Private _TblEmployeeHolidays As EntitySet(Of TblEmployeeHoliday)
	
	Private _TblVacationsHolidaysDashBoards As EntitySet(Of TblVacationsHolidaysDashBoard)
	
	Private _TblEmployeeVacations As EntitySet(Of TblEmployeeVacation)
	
	Private _TblEmployeeJobs As EntitySet(Of TblEmployeeJob)
	
	Private _TblEmployeeJobs1 As EntitySet(Of TblEmployeeJob)
	
	Private _TblEmployeeSalaries As EntitySet(Of TblEmployeeSalary)
	
	Private _TblFamilyMembers As EntitySet(Of TblFamilyMember)
	
	Private _TblEmployeeSalaryHistories As EntitySet(Of TblEmployeeSalaryHistory)
	
	Private _TblEmployeeSalary2s As EntitySet(Of TblEmployeeSalary2)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeNameChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeNameChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnBatchNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBatchNumberChanged()
    End Sub
    Partial Private Sub OnPINChanging(value As String)
    End Sub
    Partial Private Sub OnPINChanged()
    End Sub
    Partial Private Sub OnCardNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCardNumberChanged()
    End Sub
    Partial Private Sub OnCardLabelNameChanging(value As String)
    End Sub
    Partial Private Sub OnCardLabelNameChanged()
    End Sub
    Partial Private Sub OnCardQr1Changing(value As String)
    End Sub
    Partial Private Sub OnCardQr1Changed()
    End Sub
    Partial Private Sub OnCardQr2Changing(value As String)
    End Sub
    Partial Private Sub OnCardQr2Changed()
    End Sub
    Partial Private Sub OnQr1Changing(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnQr1Changed()
    End Sub
    Partial Private Sub OnQr2Changing(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnQr2Changed()
    End Sub
    Partial Private Sub OnFPChanging(value As String)
    End Sub
    Partial Private Sub OnFPChanged()
    End Sub
    Partial Private Sub OnFPIndexChanging(value As String)
    End Sub
    Partial Private Sub OnFPIndexChanged()
    End Sub
    Partial Private Sub OnFPFlagChanging(value As String)
    End Sub
    Partial Private Sub OnFPFlagChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblMotivationPunishments = New EntitySet(Of TblMotivationPunishment)(AddressOf Me.attach_TblMotivationPunishments, AddressOf Me.detach_TblMotivationPunishments)
		Me._TblRelativeReferences = New EntitySet(Of TblRelativeReference)(AddressOf Me.attach_TblRelativeReferences, AddressOf Me.detach_TblRelativeReferences)
		Me._TblUsers = New EntitySet(Of TblUser)(AddressOf Me.attach_TblUsers, AddressOf Me.detach_TblUsers)
		Me._TblWifeHusbands = New EntitySet(Of TblWifeHusband)(AddressOf Me.attach_TblWifeHusbands, AddressOf Me.detach_TblWifeHusbands)
		Me._TblLeavePermissions = New EntitySet(Of TblLeavePermission)(AddressOf Me.attach_TblLeavePermissions, AddressOf Me.detach_TblLeavePermissions)
		Me._TblLeavePermissions1 = New EntitySet(Of TblLeavePermission)(AddressOf Me.attach_TblLeavePermissions1, AddressOf Me.detach_TblLeavePermissions1)
		Me._TblEmployeePAs = New EntitySet(Of TblEmployeePA)(AddressOf Me.attach_TblEmployeePAs, AddressOf Me.detach_TblEmployeePAs)
		Me._TblEmployeePAs1 = New EntitySet(Of TblEmployeePA)(AddressOf Me.attach_TblEmployeePAs1, AddressOf Me.detach_TblEmployeePAs1)
		Me._TblEmployeeHolidays = New EntitySet(Of TblEmployeeHoliday)(AddressOf Me.attach_TblEmployeeHolidays, AddressOf Me.detach_TblEmployeeHolidays)
		Me._TblVacationsHolidaysDashBoards = New EntitySet(Of TblVacationsHolidaysDashBoard)(AddressOf Me.attach_TblVacationsHolidaysDashBoards, AddressOf Me.detach_TblVacationsHolidaysDashBoards)
		Me._TblEmployeeVacations = New EntitySet(Of TblEmployeeVacation)(AddressOf Me.attach_TblEmployeeVacations, AddressOf Me.detach_TblEmployeeVacations)
		Me._TblEmployeeJobs = New EntitySet(Of TblEmployeeJob)(AddressOf Me.attach_TblEmployeeJobs, AddressOf Me.detach_TblEmployeeJobs)
		Me._TblEmployeeJobs1 = New EntitySet(Of TblEmployeeJob)(AddressOf Me.attach_TblEmployeeJobs1, AddressOf Me.detach_TblEmployeeJobs1)
		Me._TblEmployeeSalaries = New EntitySet(Of TblEmployeeSalary)(AddressOf Me.attach_TblEmployeeSalaries, AddressOf Me.detach_TblEmployeeSalaries)
		Me._TblFamilyMembers = New EntitySet(Of TblFamilyMember)(AddressOf Me.attach_TblFamilyMembers, AddressOf Me.detach_TblFamilyMembers)
		Me._TblEmployeeSalaryHistories = New EntitySet(Of TblEmployeeSalaryHistory)(AddressOf Me.attach_TblEmployeeSalaryHistories, AddressOf Me.detach_TblEmployeeSalaryHistories)
		Me._TblEmployeeSalary2s = New EntitySet(Of TblEmployeeSalary2)(AddressOf Me.attach_TblEmployeeSalary2s, AddressOf Me.detach_TblEmployeeSalary2s)
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me.OnEmployeeNameChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeName = value
				Me.SendPropertyChanged("EmployeeName")
				Me.OnEmployeeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchNumber", DbType:="Int")>  _
	Public Property BatchNumber() As System.Nullable(Of Integer)
		Get
			Return Me._BatchNumber
		End Get
		Set
			If (Me._BatchNumber.Equals(value) = false) Then
				Me.OnBatchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BatchNumber = value
				Me.SendPropertyChanged("BatchNumber")
				Me.OnBatchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PIN", DbType:="NVarChar(15)")>  _
	Public Property PIN() As String
		Get
			Return Me._PIN
		End Get
		Set
			If (String.Equals(Me._PIN, value) = false) Then
				Me.OnPINChanging(value)
				Me.SendPropertyChanging
				Me._PIN = value
				Me.SendPropertyChanged("PIN")
				Me.OnPINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me.OnCardNumberChanging(value)
				Me.SendPropertyChanging
				Me._CardNumber = value
				Me.SendPropertyChanged("CardNumber")
				Me.OnCardNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardLabelName", DbType:="NVarChar(50)")>  _
	Public Property CardLabelName() As String
		Get
			Return Me._CardLabelName
		End Get
		Set
			If (String.Equals(Me._CardLabelName, value) = false) Then
				Me.OnCardLabelNameChanging(value)
				Me.SendPropertyChanging
				Me._CardLabelName = value
				Me.SendPropertyChanged("CardLabelName")
				Me.OnCardLabelNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardQr1", DbType:="NVarChar(250)")>  _
	Public Property CardQr1() As String
		Get
			Return Me._CardQr1
		End Get
		Set
			If (String.Equals(Me._CardQr1, value) = false) Then
				Me.OnCardQr1Changing(value)
				Me.SendPropertyChanging
				Me._CardQr1 = value
				Me.SendPropertyChanged("CardQr1")
				Me.OnCardQr1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardQr2", DbType:="NVarChar(250)")>  _
	Public Property CardQr2() As String
		Get
			Return Me._CardQr2
		End Get
		Set
			If (String.Equals(Me._CardQr2, value) = false) Then
				Me.OnCardQr2Changing(value)
				Me.SendPropertyChanging
				Me._CardQr2 = value
				Me.SendPropertyChanged("CardQr2")
				Me.OnCardQr2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qr1", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Qr1() As System.Data.Linq.Binary
		Get
			Return Me._Qr1
		End Get
		Set
			If (Object.Equals(Me._Qr1, value) = false) Then
				Me.OnQr1Changing(value)
				Me.SendPropertyChanging
				Me._Qr1 = value
				Me.SendPropertyChanged("Qr1")
				Me.OnQr1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qr2", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Qr2() As System.Data.Linq.Binary
		Get
			Return Me._Qr2
		End Get
		Set
			If (Object.Equals(Me._Qr2, value) = false) Then
				Me.OnQr2Changing(value)
				Me.SendPropertyChanging
				Me._Qr2 = value
				Me.SendPropertyChanged("Qr2")
				Me.OnQr2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FP", DbType:="NVarChar(MAX)")>  _
	Public Property FP() As String
		Get
			Return Me._FP
		End Get
		Set
			If (String.Equals(Me._FP, value) = false) Then
				Me.OnFPChanging(value)
				Me.SendPropertyChanging
				Me._FP = value
				Me.SendPropertyChanged("FP")
				Me.OnFPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FPIndex", DbType:="NVarChar(50)")>  _
	Public Property FPIndex() As String
		Get
			Return Me._FPIndex
		End Get
		Set
			If (String.Equals(Me._FPIndex, value) = false) Then
				Me.OnFPIndexChanging(value)
				Me.SendPropertyChanging
				Me._FPIndex = value
				Me.SendPropertyChanged("FPIndex")
				Me.OnFPIndexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FPFlag", DbType:="NVarChar(50)")>  _
	Public Property FPFlag() As String
		Get
			Return Me._FPFlag
		End Get
		Set
			If (String.Equals(Me._FPFlag, value) = false) Then
				Me.OnFPFlagChanging(value)
				Me.SendPropertyChanging
				Me._FPFlag = value
				Me.SendPropertyChanged("FPFlag")
				Me.OnFPFlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblMotivationPunishment", Storage:="_TblMotivationPunishments", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblMotivationPunishments() As EntitySet(Of TblMotivationPunishment)
		Get
			Return Me._TblMotivationPunishments
		End Get
		Set
			Me._TblMotivationPunishments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblRelativeReference", Storage:="_TblRelativeReferences", ThisKey:="Id", OtherKey:="RelativeReferenceEmployeeId")>  _
	Public Property TblRelativeReferences() As EntitySet(Of TblRelativeReference)
		Get
			Return Me._TblRelativeReferences
		End Get
		Set
			Me._TblRelativeReferences.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblUser", Storage:="_TblUsers", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblUsers() As EntitySet(Of TblUser)
		Get
			Return Me._TblUsers
		End Get
		Set
			Me._TblUsers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblWifeHusband", Storage:="_TblWifeHusbands", ThisKey:="Id", OtherKey:="WifeHusbandEmployeeId")>  _
	Public Property TblWifeHusbands() As EntitySet(Of TblWifeHusband)
		Get
			Return Me._TblWifeHusbands
		End Get
		Set
			Me._TblWifeHusbands.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblLeavePermission", Storage:="_TblLeavePermissions", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblLeavePermissions() As EntitySet(Of TblLeavePermission)
		Get
			Return Me._TblLeavePermissions
		End Get
		Set
			Me._TblLeavePermissions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblLeavePermission1", Storage:="_TblLeavePermissions1", ThisKey:="Id", OtherKey:="RespondedById")>  _
	Public Property TblLeavePermissions1() As EntitySet(Of TblLeavePermission)
		Get
			Return Me._TblLeavePermissions1
		End Get
		Set
			Me._TblLeavePermissions1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeePA", Storage:="_TblEmployeePAs", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblEmployeePAs() As EntitySet(Of TblEmployeePA)
		Get
			Return Me._TblEmployeePAs
		End Get
		Set
			Me._TblEmployeePAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeePA1", Storage:="_TblEmployeePAs1", ThisKey:="Id", OtherKey:="EvaluatedById")>  _
	Public Property TblEmployeePAs1() As EntitySet(Of TblEmployeePA)
		Get
			Return Me._TblEmployeePAs1
		End Get
		Set
			Me._TblEmployeePAs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeHoliday", Storage:="_TblEmployeeHolidays", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblEmployeeHolidays() As EntitySet(Of TblEmployeeHoliday)
		Get
			Return Me._TblEmployeeHolidays
		End Get
		Set
			Me._TblEmployeeHolidays.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblVacationsHolidaysDashBoard", Storage:="_TblVacationsHolidaysDashBoards", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblVacationsHolidaysDashBoards() As EntitySet(Of TblVacationsHolidaysDashBoard)
		Get
			Return Me._TblVacationsHolidaysDashBoards
		End Get
		Set
			Me._TblVacationsHolidaysDashBoards.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeVacation", Storage:="_TblEmployeeVacations", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblEmployeeVacations() As EntitySet(Of TblEmployeeVacation)
		Get
			Return Me._TblEmployeeVacations
		End Get
		Set
			Me._TblEmployeeVacations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeJob", Storage:="_TblEmployeeJobs", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblEmployeeJobs() As EntitySet(Of TblEmployeeJob)
		Get
			Return Me._TblEmployeeJobs
		End Get
		Set
			Me._TblEmployeeJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeJob1", Storage:="_TblEmployeeJobs1", ThisKey:="Id", OtherKey:="DeligatedBy")>  _
	Public Property TblEmployeeJobs1() As EntitySet(Of TblEmployeeJob)
		Get
			Return Me._TblEmployeeJobs1
		End Get
		Set
			Me._TblEmployeeJobs1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeSalary", Storage:="_TblEmployeeSalaries", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblEmployeeSalaries() As EntitySet(Of TblEmployeeSalary)
		Get
			Return Me._TblEmployeeSalaries
		End Get
		Set
			Me._TblEmployeeSalaries.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblFamilyMember", Storage:="_TblFamilyMembers", ThisKey:="Id", OtherKey:="FamilyMemberEmployeeId")>  _
	Public Property TblFamilyMembers() As EntitySet(Of TblFamilyMember)
		Get
			Return Me._TblFamilyMembers
		End Get
		Set
			Me._TblFamilyMembers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeSalaryHistory", Storage:="_TblEmployeeSalaryHistories", ThisKey:="Id", OtherKey:="EmployeeId")>  _
	Public Property TblEmployeeSalaryHistories() As EntitySet(Of TblEmployeeSalaryHistory)
		Get
			Return Me._TblEmployeeSalaryHistories
		End Get
		Set
			Me._TblEmployeeSalaryHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeSalary2", Storage:="_TblEmployeeSalary2s", ThisKey:="Id", OtherKey:="EmployeeID")>  _
	Public Property TblEmployeeSalary2s() As EntitySet(Of TblEmployeeSalary2)
		Get
			Return Me._TblEmployeeSalary2s
		End Get
		Set
			Me._TblEmployeeSalary2s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblEmployee", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblEmployees.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployees.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblMotivationPunishments(ByVal entity As TblMotivationPunishment)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblMotivationPunishments(ByVal entity As TblMotivationPunishment)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblRelativeReferences(ByVal entity As TblRelativeReference)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblRelativeReferences(ByVal entity As TblRelativeReference)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblUsers(ByVal entity As TblUser)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblUsers(ByVal entity As TblUser)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblWifeHusbands(ByVal entity As TblWifeHusband)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblWifeHusbands(ByVal entity As TblWifeHusband)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblLeavePermissions(ByVal entity As TblLeavePermission)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblLeavePermissions(ByVal entity As TblLeavePermission)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblLeavePermissions1(ByVal entity As TblLeavePermission)
		Me.SendPropertyChanging
		entity.TblEmployee1 = Me
	End Sub
	
	Private Sub detach_TblLeavePermissions1(ByVal entity As TblLeavePermission)
		Me.SendPropertyChanging
		entity.TblEmployee1 = Nothing
	End Sub
	
	Private Sub attach_TblEmployeePAs(ByVal entity As TblEmployeePA)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeePAs(ByVal entity As TblEmployeePA)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblEmployeePAs1(ByVal entity As TblEmployeePA)
		Me.SendPropertyChanging
		entity.TblEmployee1 = Me
	End Sub
	
	Private Sub detach_TblEmployeePAs1(ByVal entity As TblEmployeePA)
		Me.SendPropertyChanging
		entity.TblEmployee1 = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeHolidays(ByVal entity As TblEmployeeHoliday)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeeHolidays(ByVal entity As TblEmployeeHoliday)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblVacationsHolidaysDashBoards(ByVal entity As TblVacationsHolidaysDashBoard)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblVacationsHolidaysDashBoards(ByVal entity As TblVacationsHolidaysDashBoard)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeVacations(ByVal entity As TblEmployeeVacation)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeeVacations(ByVal entity As TblEmployeeVacation)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeJobs1(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblEmployee1 = Me
	End Sub
	
	Private Sub detach_TblEmployeeJobs1(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblEmployee1 = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeSalaries(ByVal entity As TblEmployeeSalary)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalaries(ByVal entity As TblEmployeeSalary)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblFamilyMembers(ByVal entity As TblFamilyMember)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblFamilyMembers(ByVal entity As TblFamilyMember)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeSalaryHistories(ByVal entity As TblEmployeeSalaryHistory)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalaryHistories(ByVal entity As TblEmployeeSalaryHistory)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeSalary2s(ByVal entity As TblEmployeeSalary2)
		Me.SendPropertyChanging
		entity.TblEmployee = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalary2s(ByVal entity As TblEmployeeSalary2)
		Me.SendPropertyChanging
		entity.TblEmployee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblLeavePermission")>  _
Partial Public Class TblLeavePermission
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _Reason As String
	
	Private _Note As String
	
	Private _Accepted As System.Nullable(Of Boolean)
	
	Private _RespondedById As System.Nullable(Of Integer)
	
	Private _RespondDate As System.Nullable(Of Date)
	
	Private _isBusiness As System.Nullable(Of Boolean)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblEmployee1 As EntityRef(Of TblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnReasonChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnAcceptedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAcceptedChanged()
    End Sub
    Partial Private Sub OnRespondedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRespondedByIdChanged()
    End Sub
    Partial Private Sub OnRespondDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRespondDateChanged()
    End Sub
    Partial Private Sub OnisBusinessChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisBusinessChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblEmployee1 = CType(Nothing, EntityRef(Of TblEmployee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NVarChar(250)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me.OnReasonChanging(value)
				Me.SendPropertyChanging
				Me._Reason = value
				Me.SendPropertyChanged("Reason")
				Me.OnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(250)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accepted", DbType:="Bit")>  _
	Public Property Accepted() As System.Nullable(Of Boolean)
		Get
			Return Me._Accepted
		End Get
		Set
			If (Me._Accepted.Equals(value) = false) Then
				Me.OnAcceptedChanging(value)
				Me.SendPropertyChanging
				Me._Accepted = value
				Me.SendPropertyChanged("Accepted")
				Me.OnAcceptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondedById", DbType:="Int")>  _
	Public Property RespondedById() As System.Nullable(Of Integer)
		Get
			Return Me._RespondedById
		End Get
		Set
			If (Me._RespondedById.Equals(value) = false) Then
				If Me._TblEmployee1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRespondedByIdChanging(value)
				Me.SendPropertyChanging
				Me._RespondedById = value
				Me.SendPropertyChanged("RespondedById")
				Me.OnRespondedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondDate", DbType:="DateTime")>  _
	Public Property RespondDate() As System.Nullable(Of Date)
		Get
			Return Me._RespondDate
		End Get
		Set
			If (Me._RespondDate.Equals(value) = false) Then
				Me.OnRespondDateChanging(value)
				Me.SendPropertyChanging
				Me._RespondDate = value
				Me.SendPropertyChanged("RespondDate")
				Me.OnRespondDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isBusiness", DbType:="Bit")>  _
	Public Property isBusiness() As System.Nullable(Of Boolean)
		Get
			Return Me._isBusiness
		End Get
		Set
			If (Me._isBusiness.Equals(value) = false) Then
				Me.OnisBusinessChanging(value)
				Me.SendPropertyChanging
				Me._isBusiness = value
				Me.SendPropertyChanged("isBusiness")
				Me.OnisBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblLeavePermission", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblLeavePermissions.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblLeavePermissions.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblLeavePermission1", Storage:="_TblEmployee1", ThisKey:="RespondedById", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee1() As TblEmployee
		Get
			Return Me._TblEmployee1.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee1.Entity = Nothing
					previousValue.TblLeavePermissions1.Remove(Me)
				End If
				Me._TblEmployee1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblLeavePermissions1.Add(Me)
					Me._RespondedById = value.Id
				Else
					Me._RespondedById = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTraineeLectures")>  _
Partial Public Class TblTraineeLecture
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _TraineeId As System.Nullable(Of Integer)
	
	Private _LectureId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _TblLecture As EntityRef(Of TblLecture)
	
	Private _TblTrainee As EntityRef(Of TblTrainee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTraineeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTraineeIdChanged()
    End Sub
    Partial Private Sub OnLectureIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLectureIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblLecture = CType(Nothing, EntityRef(Of TblLecture))
		Me._TblTrainee = CType(Nothing, EntityRef(Of TblTrainee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TraineeId", DbType:="Int")>  _
	Public Property TraineeId() As System.Nullable(Of Integer)
		Get
			Return Me._TraineeId
		End Get
		Set
			If (Me._TraineeId.Equals(value) = false) Then
				If Me._TblTrainee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTraineeIdChanging(value)
				Me.SendPropertyChanging
				Me._TraineeId = value
				Me.SendPropertyChanged("TraineeId")
				Me.OnTraineeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LectureId", DbType:="Int")>  _
	Public Property LectureId() As System.Nullable(Of Integer)
		Get
			Return Me._LectureId
		End Get
		Set
			If (Me._LectureId.Equals(value) = false) Then
				If Me._TblLecture.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLectureIdChanging(value)
				Me.SendPropertyChanging
				Me._LectureId = value
				Me.SendPropertyChanged("LectureId")
				Me.OnLectureIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblLecture_TblTraineeLecture", Storage:="_TblLecture", ThisKey:="LectureId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblLecture() As TblLecture
		Get
			Return Me._TblLecture.Entity
		End Get
		Set
			Dim previousValue As TblLecture = Me._TblLecture.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblLecture.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblLecture.Entity = Nothing
					previousValue.TblTraineeLectures.Remove(Me)
				End If
				Me._TblLecture.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTraineeLectures.Add(Me)
					Me._LectureId = value.Id
				Else
					Me._LectureId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblLecture")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTrainee_TblTraineeLecture", Storage:="_TblTrainee", ThisKey:="TraineeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblTrainee() As TblTrainee
		Get
			Return Me._TblTrainee.Entity
		End Get
		Set
			Dim previousValue As TblTrainee = Me._TblTrainee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblTrainee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblTrainee.Entity = Nothing
					previousValue.TblTraineeLectures.Remove(Me)
				End If
				Me._TblTrainee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTraineeLectures.Add(Me)
					Me._TraineeId = value.Id
				Else
					Me._TraineeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblTrainee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblLectures")>  _
Partial Public Class TblLecture
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _Duration As System.Nullable(Of Decimal)
	
	Private _Average As System.Nullable(Of Decimal)
	
	Private _TblTraineeLectures As EntitySet(Of TblTraineeLecture)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnArabicNameChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnAverageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAverageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblTraineeLectures = New EntitySet(Of TblTraineeLecture)(AddressOf Me.attach_TblTraineeLectures, AddressOf Me.detach_TblTraineeLectures)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me.OnArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._ArabicName = value
				Me.SendPropertyChanged("ArabicName")
				Me.OnArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Duration", DbType:="Decimal(18,2)")>  _
	Public Property Duration() As System.Nullable(Of Decimal)
		Get
			Return Me._Duration
		End Get
		Set
			If (Me._Duration.Equals(value) = false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Average", DbType:="Decimal(18,2)")>  _
	Public Property Average() As System.Nullable(Of Decimal)
		Get
			Return Me._Average
		End Get
		Set
			If (Me._Average.Equals(value) = false) Then
				Me.OnAverageChanging(value)
				Me.SendPropertyChanging
				Me._Average = value
				Me.SendPropertyChanged("Average")
				Me.OnAverageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblLecture_TblTraineeLecture", Storage:="_TblTraineeLectures", ThisKey:="Id", OtherKey:="LectureId")>  _
	Public Property TblTraineeLectures() As EntitySet(Of TblTraineeLecture)
		Get
			Return Me._TblTraineeLectures
		End Get
		Set
			Me._TblTraineeLectures.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblTraineeLectures(ByVal entity As TblTraineeLecture)
		Me.SendPropertyChanging
		entity.TblLecture = Me
	End Sub
	
	Private Sub detach_TblTraineeLectures(ByVal entity As TblTraineeLecture)
		Me.SendPropertyChanging
		entity.TblLecture = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblPAForTraineer")>  _
Partial Public Class TblPAForTraineer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Name As String
	
	Private _Average As System.Nullable(Of Decimal)
	
	Private _TblTraineePerformanceAppraisals As EntitySet(Of TblTraineePerformanceAppraisal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAverageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAverageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblTraineePerformanceAppraisals = New EntitySet(Of TblTraineePerformanceAppraisal)(AddressOf Me.attach_TblTraineePerformanceAppraisals, AddressOf Me.detach_TblTraineePerformanceAppraisals)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Average", DbType:="Decimal(18,2)")>  _
	Public Property Average() As System.Nullable(Of Decimal)
		Get
			Return Me._Average
		End Get
		Set
			If (Me._Average.Equals(value) = false) Then
				Me.OnAverageChanging(value)
				Me.SendPropertyChanging
				Me._Average = value
				Me.SendPropertyChanged("Average")
				Me.OnAverageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPAForTraineer_TblTraineePerformanceAppraisal", Storage:="_TblTraineePerformanceAppraisals", ThisKey:="id", OtherKey:="PAforTraineeId")>  _
	Public Property TblTraineePerformanceAppraisals() As EntitySet(Of TblTraineePerformanceAppraisal)
		Get
			Return Me._TblTraineePerformanceAppraisals
		End Get
		Set
			Me._TblTraineePerformanceAppraisals.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblTraineePerformanceAppraisals(ByVal entity As TblTraineePerformanceAppraisal)
		Me.SendPropertyChanging
		entity.TblPAForTraineer = Me
	End Sub
	
	Private Sub detach_TblTraineePerformanceAppraisals(ByVal entity As TblTraineePerformanceAppraisal)
		Me.SendPropertyChanging
		entity.TblPAForTraineer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTraineePerformanceAppraisal")>  _
Partial Public Class TblTraineePerformanceAppraisal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _TrainneId As System.Nullable(Of Integer)
	
	Private _PAforTraineeId As System.Nullable(Of Integer)
	
	Private _Grade As System.Nullable(Of Decimal)
	
	Private _TblPAForTraineer As EntityRef(Of TblPAForTraineer)
	
	Private _TblTrainee As EntityRef(Of TblTrainee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnTrainneIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTrainneIdChanged()
    End Sub
    Partial Private Sub OnPAforTraineeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPAforTraineeIdChanged()
    End Sub
    Partial Private Sub OnGradeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGradeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblPAForTraineer = CType(Nothing, EntityRef(Of TblPAForTraineer))
		Me._TblTrainee = CType(Nothing, EntityRef(Of TblTrainee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrainneId", DbType:="Int")>  _
	Public Property TrainneId() As System.Nullable(Of Integer)
		Get
			Return Me._TrainneId
		End Get
		Set
			If (Me._TrainneId.Equals(value) = false) Then
				If Me._TblTrainee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTrainneIdChanging(value)
				Me.SendPropertyChanging
				Me._TrainneId = value
				Me.SendPropertyChanged("TrainneId")
				Me.OnTrainneIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAforTraineeId", DbType:="Int")>  _
	Public Property PAforTraineeId() As System.Nullable(Of Integer)
		Get
			Return Me._PAforTraineeId
		End Get
		Set
			If (Me._PAforTraineeId.Equals(value) = false) Then
				If Me._TblPAForTraineer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPAforTraineeIdChanging(value)
				Me.SendPropertyChanging
				Me._PAforTraineeId = value
				Me.SendPropertyChanged("PAforTraineeId")
				Me.OnPAforTraineeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade", DbType:="Decimal(18,2)")>  _
	Public Property Grade() As System.Nullable(Of Decimal)
		Get
			Return Me._Grade
		End Get
		Set
			If (Me._Grade.Equals(value) = false) Then
				Me.OnGradeChanging(value)
				Me.SendPropertyChanging
				Me._Grade = value
				Me.SendPropertyChanged("Grade")
				Me.OnGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPAForTraineer_TblTraineePerformanceAppraisal", Storage:="_TblPAForTraineer", ThisKey:="PAforTraineeId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property TblPAForTraineer() As TblPAForTraineer
		Get
			Return Me._TblPAForTraineer.Entity
		End Get
		Set
			Dim previousValue As TblPAForTraineer = Me._TblPAForTraineer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblPAForTraineer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblPAForTraineer.Entity = Nothing
					previousValue.TblTraineePerformanceAppraisals.Remove(Me)
				End If
				Me._TblPAForTraineer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTraineePerformanceAppraisals.Add(Me)
					Me._PAforTraineeId = value.id
				Else
					Me._PAforTraineeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblPAForTraineer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTrainee_TblTraineePerformanceAppraisal", Storage:="_TblTrainee", ThisKey:="TrainneId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblTrainee() As TblTrainee
		Get
			Return Me._TblTrainee.Entity
		End Get
		Set
			Dim previousValue As TblTrainee = Me._TblTrainee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblTrainee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblTrainee.Entity = Nothing
					previousValue.TblTraineePerformanceAppraisals.Remove(Me)
				End If
				Me._TblTrainee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTraineePerformanceAppraisals.Add(Me)
					Me._TrainneId = value.Id
				Else
					Me._TrainneId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblTrainee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblPAForEmployee")>  _
Partial Public Class TblPAForEmployee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _Version As System.Nullable(Of Integer)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _TblPAPerJobs As EntitySet(Of TblPAPerJob)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblPAPerJobs = New EntitySet(Of TblPAPerJob)(AddressOf Me.attach_TblPAPerJobs, AddressOf Me.detach_TblPAPerJobs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Version", DbType:="Int")>  _
	Public Property Version() As System.Nullable(Of Integer)
		Get
			Return Me._Version
		End Get
		Set
			If (Me._Version.Equals(value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPAForEmployee_TblPAPerJob", Storage:="_TblPAPerJobs", ThisKey:="Id", OtherKey:="PAId")>  _
	Public Property TblPAPerJobs() As EntitySet(Of TblPAPerJob)
		Get
			Return Me._TblPAPerJobs
		End Get
		Set
			Me._TblPAPerJobs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblPAPerJobs(ByVal entity As TblPAPerJob)
		Me.SendPropertyChanging
		entity.TblPAForEmployee = Me
	End Sub
	
	Private Sub detach_TblPAPerJobs(ByVal entity As TblPAPerJob)
		Me.SendPropertyChanging
		entity.TblPAForEmployee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblPAPerJob")>  _
Partial Public Class TblPAPerJob
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _PAId As System.Nullable(Of Integer)
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _TblPAForEmployee As EntityRef(Of TblPAForEmployee)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPAIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPAIdChanged()
    End Sub
    Partial Private Sub OnJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblPAForEmployee = CType(Nothing, EntityRef(Of TblPAForEmployee))
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAId", DbType:="Int")>  _
	Public Property PAId() As System.Nullable(Of Integer)
		Get
			Return Me._PAId
		End Get
		Set
			If (Me._PAId.Equals(value) = false) Then
				If Me._TblPAForEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPAIdChanging(value)
				Me.SendPropertyChanging
				Me._PAId = value
				Me.SendPropertyChanged("PAId")
				Me.OnPAIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJobIdChanging(value)
				Me.SendPropertyChanging
				Me._JobId = value
				Me.SendPropertyChanged("JobId")
				Me.OnJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPAForEmployee_TblPAPerJob", Storage:="_TblPAForEmployee", ThisKey:="PAId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblPAForEmployee() As TblPAForEmployee
		Get
			Return Me._TblPAForEmployee.Entity
		End Get
		Set
			Dim previousValue As TblPAForEmployee = Me._TblPAForEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblPAForEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblPAForEmployee.Entity = Nothing
					previousValue.TblPAPerJobs.Remove(Me)
				End If
				Me._TblPAForEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblPAPerJobs.Add(Me)
					Me._PAId = value.Id
				Else
					Me._PAId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblPAForEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblPAPerJob", Storage:="_TblJobDescription", ThisKey:="JobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblPAPerJobs.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblPAPerJobs.Add(Me)
					Me._JobId = value.Id
				Else
					Me._JobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblAveragePAPerTask")>  _
Partial Public Class TblAveragePAPerTask
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _PAPerJobId As System.Nullable(Of Integer)
	
	Private _TaskId As System.Nullable(Of Integer)
	
	Private _Average As System.Nullable(Of Decimal)
	
	Private _TblEmployeePAs As EntitySet(Of TblEmployeePA)
	
	Private _TblTask As EntityRef(Of TblTask)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPAPerJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPAPerJobIdChanged()
    End Sub
    Partial Private Sub OnTaskIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTaskIdChanged()
    End Sub
    Partial Private Sub OnAverageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAverageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeePAs = New EntitySet(Of TblEmployeePA)(AddressOf Me.attach_TblEmployeePAs, AddressOf Me.detach_TblEmployeePAs)
		Me._TblTask = CType(Nothing, EntityRef(Of TblTask))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAPerJobId", DbType:="Int")>  _
	Public Property PAPerJobId() As System.Nullable(Of Integer)
		Get
			Return Me._PAPerJobId
		End Get
		Set
			If (Me._PAPerJobId.Equals(value) = false) Then
				Me.OnPAPerJobIdChanging(value)
				Me.SendPropertyChanging
				Me._PAPerJobId = value
				Me.SendPropertyChanged("PAPerJobId")
				Me.OnPAPerJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaskId", DbType:="Int")>  _
	Public Property TaskId() As System.Nullable(Of Integer)
		Get
			Return Me._TaskId
		End Get
		Set
			If (Me._TaskId.Equals(value) = false) Then
				If Me._TblTask.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTaskIdChanging(value)
				Me.SendPropertyChanging
				Me._TaskId = value
				Me.SendPropertyChanged("TaskId")
				Me.OnTaskIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Average", DbType:="Decimal(18,2)")>  _
	Public Property Average() As System.Nullable(Of Decimal)
		Get
			Return Me._Average
		End Get
		Set
			If (Me._Average.Equals(value) = false) Then
				Me.OnAverageChanging(value)
				Me.SendPropertyChanging
				Me._Average = value
				Me.SendPropertyChanged("Average")
				Me.OnAverageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblAveragePAPerTask_TblEmployeePA", Storage:="_TblEmployeePAs", ThisKey:="Id", OtherKey:="AveragePAPerTaskId")>  _
	Public Property TblEmployeePAs() As EntitySet(Of TblEmployeePA)
		Get
			Return Me._TblEmployeePAs
		End Get
		Set
			Me._TblEmployeePAs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTask_TblAveragePAPerTask", Storage:="_TblTask", ThisKey:="TaskId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblTask() As TblTask
		Get
			Return Me._TblTask.Entity
		End Get
		Set
			Dim previousValue As TblTask = Me._TblTask.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblTask.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblTask.Entity = Nothing
					previousValue.TblAveragePAPerTasks.Remove(Me)
				End If
				Me._TblTask.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblAveragePAPerTasks.Add(Me)
					Me._TaskId = value.Id
				Else
					Me._TaskId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblTask")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEmployeePAs(ByVal entity As TblEmployeePA)
		Me.SendPropertyChanging
		entity.TblAveragePAPerTask = Me
	End Sub
	
	Private Sub detach_TblEmployeePAs(ByVal entity As TblEmployeePA)
		Me.SendPropertyChanging
		entity.TblAveragePAPerTask = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeePA")>  _
Partial Public Class TblEmployeePA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _AveragePAPerTaskId As System.Nullable(Of Integer)
	
	Private _Ratio As System.Nullable(Of Decimal)
	
	Private _Note As String
	
	Private _Status As System.Nullable(Of Boolean)
	
	Private _EvaluatedById As System.Nullable(Of Integer)
	
	Private _EvaluatedDate As System.Nullable(Of Date)
	
	Private _TblAveragePAPerTask As EntityRef(Of TblAveragePAPerTask)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblEmployee1 As EntityRef(Of TblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnAveragePAPerTaskIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAveragePAPerTaskIdChanged()
    End Sub
    Partial Private Sub OnRatioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnRatioChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnEvaluatedByIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEvaluatedByIdChanged()
    End Sub
    Partial Private Sub OnEvaluatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEvaluatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblAveragePAPerTask = CType(Nothing, EntityRef(Of TblAveragePAPerTask))
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblEmployee1 = CType(Nothing, EntityRef(Of TblEmployee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AveragePAPerTaskId", DbType:="Int")>  _
	Public Property AveragePAPerTaskId() As System.Nullable(Of Integer)
		Get
			Return Me._AveragePAPerTaskId
		End Get
		Set
			If (Me._AveragePAPerTaskId.Equals(value) = false) Then
				If Me._TblAveragePAPerTask.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAveragePAPerTaskIdChanging(value)
				Me.SendPropertyChanging
				Me._AveragePAPerTaskId = value
				Me.SendPropertyChanged("AveragePAPerTaskId")
				Me.OnAveragePAPerTaskIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ratio", DbType:="Decimal(18,2)")>  _
	Public Property Ratio() As System.Nullable(Of Decimal)
		Get
			Return Me._Ratio
		End Get
		Set
			If (Me._Ratio.Equals(value) = false) Then
				Me.OnRatioChanging(value)
				Me.SendPropertyChanging
				Me._Ratio = value
				Me.SendPropertyChanged("Ratio")
				Me.OnRatioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit")>  _
	Public Property Status() As System.Nullable(Of Boolean)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EvaluatedById", DbType:="Int")>  _
	Public Property EvaluatedById() As System.Nullable(Of Integer)
		Get
			Return Me._EvaluatedById
		End Get
		Set
			If (Me._EvaluatedById.Equals(value) = false) Then
				If Me._TblEmployee1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEvaluatedByIdChanging(value)
				Me.SendPropertyChanging
				Me._EvaluatedById = value
				Me.SendPropertyChanged("EvaluatedById")
				Me.OnEvaluatedByIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EvaluatedDate", DbType:="DateTime")>  _
	Public Property EvaluatedDate() As System.Nullable(Of Date)
		Get
			Return Me._EvaluatedDate
		End Get
		Set
			If (Me._EvaluatedDate.Equals(value) = false) Then
				Me.OnEvaluatedDateChanging(value)
				Me.SendPropertyChanging
				Me._EvaluatedDate = value
				Me.SendPropertyChanged("EvaluatedDate")
				Me.OnEvaluatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblAveragePAPerTask_TblEmployeePA", Storage:="_TblAveragePAPerTask", ThisKey:="AveragePAPerTaskId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblAveragePAPerTask() As TblAveragePAPerTask
		Get
			Return Me._TblAveragePAPerTask.Entity
		End Get
		Set
			Dim previousValue As TblAveragePAPerTask = Me._TblAveragePAPerTask.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblAveragePAPerTask.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblAveragePAPerTask.Entity = Nothing
					previousValue.TblEmployeePAs.Remove(Me)
				End If
				Me._TblAveragePAPerTask.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeePAs.Add(Me)
					Me._AveragePAPerTaskId = value.Id
				Else
					Me._AveragePAPerTaskId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblAveragePAPerTask")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeePA", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeePAs.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeePAs.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeePA1", Storage:="_TblEmployee1", ThisKey:="EvaluatedById", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee1() As TblEmployee
		Get
			Return Me._TblEmployee1.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee1.Entity = Nothing
					previousValue.TblEmployeePAs1.Remove(Me)
				End If
				Me._TblEmployee1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeePAs1.Add(Me)
					Me._EvaluatedById = value.Id
				Else
					Me._EvaluatedById = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblCompanyProfile")>  _
Partial Public Class TblCompanyProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Address As String
	
	Private _Website As String
	
	Private _Phone As String
	
	Private _Fax As String
	
	Private _Email As String
	
	Private _Purpose As String
	
	Private _Attachment As System.Data.Linq.Binary
	
	Private _TblDepartments As EntitySet(Of TblDepartment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPurposeChanging(value As String)
    End Sub
    Partial Private Sub OnPurposeChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblDepartments = New EntitySet(Of TblDepartment)(AddressOf Me.attach_TblDepartments, AddressOf Me.detach_TblDepartments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="NVarChar(50)")>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me.OnWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._Website = value
				Me.SendPropertyChanged("Website")
				Me.OnWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Purpose", DbType:="NVarChar(50)")>  _
	Public Property Purpose() As String
		Get
			Return Me._Purpose
		End Get
		Set
			If (String.Equals(Me._Purpose, value) = false) Then
				Me.OnPurposeChanging(value)
				Me.SendPropertyChanging
				Me._Purpose = value
				Me.SendPropertyChanged("Purpose")
				Me.OnPurposeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attachment", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Attachment() As System.Data.Linq.Binary
		Get
			Return Me._Attachment
		End Get
		Set
			If (Object.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCompanyProfile_TblDepartment", Storage:="_TblDepartments", ThisKey:="Id", OtherKey:="CompanyProfileId")>  _
	Public Property TblDepartments() As EntitySet(Of TblDepartment)
		Get
			Return Me._TblDepartments
		End Get
		Set
			Me._TblDepartments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblCompanyProfile = Me
	End Sub
	
	Private Sub detach_TblDepartments(ByVal entity As TblDepartment)
		Me.SendPropertyChanging
		entity.TblCompanyProfile = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblYearlyVacations")>  _
Partial Public Class TblYearlyVacation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _VacationId As System.Nullable(Of Integer)
	
	Private _MinYear As System.Nullable(Of Integer)
	
	Private _MaxYear As System.Nullable(Of Integer)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _TblVacation As EntityRef(Of TblVacation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnVacationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVacationIdChanged()
    End Sub
    Partial Private Sub OnMinYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinYearChanged()
    End Sub
    Partial Private Sub OnMaxYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaxYearChanged()
    End Sub
    Partial Private Sub OnNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfDaysChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblVacation = CType(Nothing, EntityRef(Of TblVacation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationId", DbType:="Int")>  _
	Public Property VacationId() As System.Nullable(Of Integer)
		Get
			Return Me._VacationId
		End Get
		Set
			If (Me._VacationId.Equals(value) = false) Then
				If Me._TblVacation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVacationIdChanging(value)
				Me.SendPropertyChanging
				Me._VacationId = value
				Me.SendPropertyChanged("VacationId")
				Me.OnVacationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MinYear", DbType:="Int")>  _
	Public Property MinYear() As System.Nullable(Of Integer)
		Get
			Return Me._MinYear
		End Get
		Set
			If (Me._MinYear.Equals(value) = false) Then
				Me.OnMinYearChanging(value)
				Me.SendPropertyChanging
				Me._MinYear = value
				Me.SendPropertyChanged("MinYear")
				Me.OnMinYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaxYear", DbType:="Int")>  _
	Public Property MaxYear() As System.Nullable(Of Integer)
		Get
			Return Me._MaxYear
		End Get
		Set
			If (Me._MaxYear.Equals(value) = false) Then
				Me.OnMaxYearChanging(value)
				Me.SendPropertyChanging
				Me._MaxYear = value
				Me.SendPropertyChanged("MaxYear")
				Me.OnMaxYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me.OnNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfDays = value
				Me.SendPropertyChanged("NumberOfDays")
				Me.OnNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblVacation_TblYearlyVacation", Storage:="_TblVacation", ThisKey:="VacationId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblVacation() As TblVacation
		Get
			Return Me._TblVacation.Entity
		End Get
		Set
			Dim previousValue As TblVacation = Me._TblVacation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblVacation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblVacation.Entity = Nothing
					previousValue.TblYearlyVacations.Remove(Me)
				End If
				Me._TblVacation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblYearlyVacations.Add(Me)
					Me._VacationId = value.Id
				Else
					Me._VacationId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblVacation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblVacations")>  _
Partial Public Class TblVacation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Description As String
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _TblYearlyVacations As EntitySet(Of TblYearlyVacation)
	
	Private _TblEmployeeVacations As EntitySet(Of TblEmployeeVacation)
	
	Private _TblSettings As EntitySet(Of TblSetting)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfDaysChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblYearlyVacations = New EntitySet(Of TblYearlyVacation)(AddressOf Me.attach_TblYearlyVacations, AddressOf Me.detach_TblYearlyVacations)
		Me._TblEmployeeVacations = New EntitySet(Of TblEmployeeVacation)(AddressOf Me.attach_TblEmployeeVacations, AddressOf Me.detach_TblEmployeeVacations)
		Me._TblSettings = New EntitySet(Of TblSetting)(AddressOf Me.attach_TblSettings, AddressOf Me.detach_TblSettings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me.OnNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfDays = value
				Me.SendPropertyChanged("NumberOfDays")
				Me.OnNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblVacation_TblYearlyVacation", Storage:="_TblYearlyVacations", ThisKey:="Id", OtherKey:="VacationId")>  _
	Public Property TblYearlyVacations() As EntitySet(Of TblYearlyVacation)
		Get
			Return Me._TblYearlyVacations
		End Get
		Set
			Me._TblYearlyVacations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblVacation_TblEmployeeVacation", Storage:="_TblEmployeeVacations", ThisKey:="Id", OtherKey:="VacationId")>  _
	Public Property TblEmployeeVacations() As EntitySet(Of TblEmployeeVacation)
		Get
			Return Me._TblEmployeeVacations
		End Get
		Set
			Me._TblEmployeeVacations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblVacation_TblSetting", Storage:="_TblSettings", ThisKey:="Id", OtherKey:="YearlyVacationId")>  _
	Public Property TblSettings() As EntitySet(Of TblSetting)
		Get
			Return Me._TblSettings
		End Get
		Set
			Me._TblSettings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblYearlyVacations(ByVal entity As TblYearlyVacation)
		Me.SendPropertyChanging
		entity.TblVacation = Me
	End Sub
	
	Private Sub detach_TblYearlyVacations(ByVal entity As TblYearlyVacation)
		Me.SendPropertyChanging
		entity.TblVacation = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeVacations(ByVal entity As TblEmployeeVacation)
		Me.SendPropertyChanging
		entity.TblVacation = Me
	End Sub
	
	Private Sub detach_TblEmployeeVacations(ByVal entity As TblEmployeeVacation)
		Me.SendPropertyChanging
		entity.TblVacation = Nothing
	End Sub
	
	Private Sub attach_TblSettings(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblVacation = Me
	End Sub
	
	Private Sub detach_TblSettings(ByVal entity As TblSetting)
		Me.SendPropertyChanging
		entity.TblVacation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblHolidays")>  _
Partial Public Class TblHoliday
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Description As String
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _TblEmployeeHolidays As EntitySet(Of TblEmployeeHoliday)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfDaysChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeeHolidays = New EntitySet(Of TblEmployeeHoliday)(AddressOf Me.attach_TblEmployeeHolidays, AddressOf Me.detach_TblEmployeeHolidays)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me.OnNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfDays = value
				Me.SendPropertyChanged("NumberOfDays")
				Me.OnNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblHoliday_TblEmployeeHoliday", Storage:="_TblEmployeeHolidays", ThisKey:="Id", OtherKey:="HolidayId")>  _
	Public Property TblEmployeeHolidays() As EntitySet(Of TblEmployeeHoliday)
		Get
			Return Me._TblEmployeeHolidays
		End Get
		Set
			Me._TblEmployeeHolidays.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEmployeeHolidays(ByVal entity As TblEmployeeHoliday)
		Me.SendPropertyChanging
		entity.TblHoliday = Me
	End Sub
	
	Private Sub detach_TblEmployeeHolidays(ByVal entity As TblEmployeeHoliday)
		Me.SendPropertyChanging
		entity.TblHoliday = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeeHolidays")>  _
Partial Public Class TblEmployeeHoliday
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _HolidayId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _ExecutedDays As System.Nullable(Of Integer)
	
	Private _ExecutionDate As System.Nullable(Of Date)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblHoliday As EntityRef(Of TblHoliday)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnHolidayIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHolidayIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnExecutedDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExecutedDaysChanged()
    End Sub
    Partial Private Sub OnExecutionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExecutionDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblHoliday = CType(Nothing, EntityRef(Of TblHoliday))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HolidayId", DbType:="Int")>  _
	Public Property HolidayId() As System.Nullable(Of Integer)
		Get
			Return Me._HolidayId
		End Get
		Set
			If (Me._HolidayId.Equals(value) = false) Then
				If Me._TblHoliday.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnHolidayIdChanging(value)
				Me.SendPropertyChanging
				Me._HolidayId = value
				Me.SendPropertyChanged("HolidayId")
				Me.OnHolidayIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutedDays", DbType:="Int")>  _
	Public Property ExecutedDays() As System.Nullable(Of Integer)
		Get
			Return Me._ExecutedDays
		End Get
		Set
			If (Me._ExecutedDays.Equals(value) = false) Then
				Me.OnExecutedDaysChanging(value)
				Me.SendPropertyChanging
				Me._ExecutedDays = value
				Me.SendPropertyChanged("ExecutedDays")
				Me.OnExecutedDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionDate", DbType:="DateTime")>  _
	Public Property ExecutionDate() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionDate
		End Get
		Set
			If (Me._ExecutionDate.Equals(value) = false) Then
				Me.OnExecutionDateChanging(value)
				Me.SendPropertyChanging
				Me._ExecutionDate = value
				Me.SendPropertyChanged("ExecutionDate")
				Me.OnExecutionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeHoliday", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeeHolidays.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeHolidays.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblHoliday_TblEmployeeHoliday", Storage:="_TblHoliday", ThisKey:="HolidayId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblHoliday() As TblHoliday
		Get
			Return Me._TblHoliday.Entity
		End Get
		Set
			Dim previousValue As TblHoliday = Me._TblHoliday.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblHoliday.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblHoliday.Entity = Nothing
					previousValue.TblEmployeeHolidays.Remove(Me)
				End If
				Me._TblHoliday.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeHolidays.Add(Me)
					Me._HolidayId = value.Id
				Else
					Me._HolidayId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblHoliday")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblExecuteVacationsDays")>  _
Partial Public Class TblExecuteVacationsDay
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeVacationId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _TblEmployeeVacation As EntityRef(Of TblEmployeeVacation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeVacationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeVacationIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfDaysChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeeVacation = CType(Nothing, EntityRef(Of TblEmployeeVacation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeVacationId", DbType:="Int")>  _
	Public Property EmployeeVacationId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeVacationId
		End Get
		Set
			If (Me._EmployeeVacationId.Equals(value) = false) Then
				If Me._TblEmployeeVacation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeVacationIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeVacationId = value
				Me.SendPropertyChanged("EmployeeVacationId")
				Me.OnEmployeeVacationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me.OnNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfDays = value
				Me.SendPropertyChanged("NumberOfDays")
				Me.OnNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployeeVacation_TblExecuteVacationsDay", Storage:="_TblEmployeeVacation", ThisKey:="EmployeeVacationId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployeeVacation() As TblEmployeeVacation
		Get
			Return Me._TblEmployeeVacation.Entity
		End Get
		Set
			Dim previousValue As TblEmployeeVacation = Me._TblEmployeeVacation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployeeVacation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployeeVacation.Entity = Nothing
					previousValue.TblExecuteVacationsDays.Remove(Me)
				End If
				Me._TblEmployeeVacation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblExecuteVacationsDays.Add(Me)
					Me._EmployeeVacationId = value.Id
				Else
					Me._EmployeeVacationId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployeeVacation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblVacationsHolidaysDashBoard")>  _
Partial Public Class TblVacationsHolidaysDashBoard
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Description As String
	
	Private _VacationDate As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _ExecutedDays As System.Nullable(Of Integer)
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _VacationId As System.Nullable(Of Integer)
	
	Private _IsVacation As System.Nullable(Of Boolean)
	
	Private _ExecutionDate As System.Nullable(Of Date)
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnVacationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnVacationDateChanged()
    End Sub
    Partial Private Sub OnNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfDaysChanged()
    End Sub
    Partial Private Sub OnExecutedDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExecutedDaysChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnVacationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVacationIdChanged()
    End Sub
    Partial Private Sub OnIsVacationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsVacationChanged()
    End Sub
    Partial Private Sub OnExecutionDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExecutionDateChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationDate", DbType:="DateTime")>  _
	Public Property VacationDate() As System.Nullable(Of Date)
		Get
			Return Me._VacationDate
		End Get
		Set
			If (Me._VacationDate.Equals(value) = false) Then
				Me.OnVacationDateChanging(value)
				Me.SendPropertyChanging
				Me._VacationDate = value
				Me.SendPropertyChanged("VacationDate")
				Me.OnVacationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me.OnNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfDays = value
				Me.SendPropertyChanged("NumberOfDays")
				Me.OnNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutedDays", DbType:="Int")>  _
	Public Property ExecutedDays() As System.Nullable(Of Integer)
		Get
			Return Me._ExecutedDays
		End Get
		Set
			If (Me._ExecutedDays.Equals(value) = false) Then
				Me.OnExecutedDaysChanging(value)
				Me.SendPropertyChanging
				Me._ExecutedDays = value
				Me.SendPropertyChanged("ExecutedDays")
				Me.OnExecutedDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationId", DbType:="Int")>  _
	Public Property VacationId() As System.Nullable(Of Integer)
		Get
			Return Me._VacationId
		End Get
		Set
			If (Me._VacationId.Equals(value) = false) Then
				Me.OnVacationIdChanging(value)
				Me.SendPropertyChanging
				Me._VacationId = value
				Me.SendPropertyChanged("VacationId")
				Me.OnVacationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsVacation", DbType:="Bit")>  _
	Public Property IsVacation() As System.Nullable(Of Boolean)
		Get
			Return Me._IsVacation
		End Get
		Set
			If (Me._IsVacation.Equals(value) = false) Then
				Me.OnIsVacationChanging(value)
				Me.SendPropertyChanging
				Me._IsVacation = value
				Me.SendPropertyChanged("IsVacation")
				Me.OnIsVacationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionDate", DbType:="DateTime")>  _
	Public Property ExecutionDate() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionDate
		End Get
		Set
			If (Me._ExecutionDate.Equals(value) = false) Then
				Me.OnExecutionDateChanging(value)
				Me.SendPropertyChanging
				Me._ExecutionDate = value
				Me.SendPropertyChanged("ExecutionDate")
				Me.OnExecutionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblVacationsHolidaysDashBoard", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblVacationsHolidaysDashBoards.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblVacationsHolidaysDashBoards.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeeVacations")>  _
Partial Public Class TblEmployeeVacation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _VacationId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _ExecutedDays As System.Nullable(Of Integer)
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _TblExecuteVacationsDays As EntitySet(Of TblExecuteVacationsDay)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblVacation As EntityRef(Of TblVacation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnVacationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnVacationIdChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnNumberOfDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfDaysChanged()
    End Sub
    Partial Private Sub OnExecutedDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnExecutedDaysChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblExecuteVacationsDays = New EntitySet(Of TblExecuteVacationsDay)(AddressOf Me.attach_TblExecuteVacationsDays, AddressOf Me.detach_TblExecuteVacationsDays)
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblVacation = CType(Nothing, EntityRef(Of TblVacation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationId", DbType:="Int")>  _
	Public Property VacationId() As System.Nullable(Of Integer)
		Get
			Return Me._VacationId
		End Get
		Set
			If (Me._VacationId.Equals(value) = false) Then
				If Me._TblVacation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVacationIdChanging(value)
				Me.SendPropertyChanging
				Me._VacationId = value
				Me.SendPropertyChanged("VacationId")
				Me.OnVacationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me.OnNumberOfDaysChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfDays = value
				Me.SendPropertyChanged("NumberOfDays")
				Me.OnNumberOfDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutedDays", DbType:="Int")>  _
	Public Property ExecutedDays() As System.Nullable(Of Integer)
		Get
			Return Me._ExecutedDays
		End Get
		Set
			If (Me._ExecutedDays.Equals(value) = false) Then
				Me.OnExecutedDaysChanging(value)
				Me.SendPropertyChanging
				Me._ExecutedDays = value
				Me.SendPropertyChanged("ExecutedDays")
				Me.OnExecutedDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployeeVacation_TblExecuteVacationsDay", Storage:="_TblExecuteVacationsDays", ThisKey:="Id", OtherKey:="EmployeeVacationId")>  _
	Public Property TblExecuteVacationsDays() As EntitySet(Of TblExecuteVacationsDay)
		Get
			Return Me._TblExecuteVacationsDays
		End Get
		Set
			Me._TblExecuteVacationsDays.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeVacation", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeeVacations.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeVacations.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblVacation_TblEmployeeVacation", Storage:="_TblVacation", ThisKey:="VacationId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblVacation() As TblVacation
		Get
			Return Me._TblVacation.Entity
		End Get
		Set
			Dim previousValue As TblVacation = Me._TblVacation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblVacation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblVacation.Entity = Nothing
					previousValue.TblEmployeeVacations.Remove(Me)
				End If
				Me._TblVacation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeVacations.Add(Me)
					Me._VacationId = value.Id
				Else
					Me._VacationId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblVacation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblExecuteVacationsDays(ByVal entity As TblExecuteVacationsDay)
		Me.SendPropertyChanging
		entity.TblEmployeeVacation = Me
	End Sub
	
	Private Sub detach_TblExecuteVacationsDays(ByVal entity As TblExecuteVacationsDay)
		Me.SendPropertyChanging
		entity.TblEmployeeVacation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeeJob")>  _
Partial Public Class TblEmployeeJob
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _DateOfEmployment As System.Nullable(Of Date)
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _LeaveDate As System.Nullable(Of Date)
	
	Private _ContractTypeId As System.Nullable(Of Integer)
	
	Private _DeligatedBy As System.Nullable(Of Integer)
	
	Private _Deligated As System.Nullable(Of Boolean)
	
	Private _DeligatedOn As System.Nullable(Of Date)
	
	Private _DontShowInSchedule As System.Nullable(Of Boolean)
	
	Private _JobTitleCardLabel As String
	
	Private _Note As String
	
	Private _DepId As System.Nullable(Of Integer)
	
	Private _EmployeeDegreeId As System.Nullable(Of Integer)
	
	Private _TblContractType As EntityRef(Of TblContractType)
	
	Private _TblDepartment As EntityRef(Of TblDepartment)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblEmployee1 As EntityRef(Of TblEmployee)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
	Private _TblDegree As EntityRef(Of TblDegree)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobIdChanged()
    End Sub
    Partial Private Sub OnDateOfEmploymentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfEmploymentChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnLeaveDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLeaveDateChanged()
    End Sub
    Partial Private Sub OnContractTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContractTypeIdChanged()
    End Sub
    Partial Private Sub OnDeligatedByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDeligatedByChanged()
    End Sub
    Partial Private Sub OnDeligatedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDeligatedChanged()
    End Sub
    Partial Private Sub OnDeligatedOnChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDeligatedOnChanged()
    End Sub
    Partial Private Sub OnDontShowInScheduleChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDontShowInScheduleChanged()
    End Sub
    Partial Private Sub OnJobTitleCardLabelChanging(value As String)
    End Sub
    Partial Private Sub OnJobTitleCardLabelChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnDepIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepIdChanged()
    End Sub
    Partial Private Sub OnEmployeeDegreeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeDegreeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblContractType = CType(Nothing, EntityRef(Of TblContractType))
		Me._TblDepartment = CType(Nothing, EntityRef(Of TblDepartment))
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblEmployee1 = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		Me._TblDegree = CType(Nothing, EntityRef(Of TblDegree))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJobIdChanging(value)
				Me.SendPropertyChanging
				Me._JobId = value
				Me.SendPropertyChanged("JobId")
				Me.OnJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfEmployment", DbType:="Date")>  _
	Public Property DateOfEmployment() As System.Nullable(Of Date)
		Get
			Return Me._DateOfEmployment
		End Get
		Set
			If (Me._DateOfEmployment.Equals(value) = false) Then
				Me.OnDateOfEmploymentChanging(value)
				Me.SendPropertyChanging
				Me._DateOfEmployment = value
				Me.SendPropertyChanged("DateOfEmployment")
				Me.OnDateOfEmploymentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LeaveDate", DbType:="Date")>  _
	Public Property LeaveDate() As System.Nullable(Of Date)
		Get
			Return Me._LeaveDate
		End Get
		Set
			If (Me._LeaveDate.Equals(value) = false) Then
				Me.OnLeaveDateChanging(value)
				Me.SendPropertyChanging
				Me._LeaveDate = value
				Me.SendPropertyChanged("LeaveDate")
				Me.OnLeaveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractTypeId", DbType:="Int")>  _
	Public Property ContractTypeId() As System.Nullable(Of Integer)
		Get
			Return Me._ContractTypeId
		End Get
		Set
			If (Me._ContractTypeId.Equals(value) = false) Then
				If Me._TblContractType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnContractTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._ContractTypeId = value
				Me.SendPropertyChanged("ContractTypeId")
				Me.OnContractTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeligatedBy", DbType:="Int")>  _
	Public Property DeligatedBy() As System.Nullable(Of Integer)
		Get
			Return Me._DeligatedBy
		End Get
		Set
			If (Me._DeligatedBy.Equals(value) = false) Then
				If Me._TblEmployee1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDeligatedByChanging(value)
				Me.SendPropertyChanging
				Me._DeligatedBy = value
				Me.SendPropertyChanged("DeligatedBy")
				Me.OnDeligatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deligated", DbType:="Bit")>  _
	Public Property Deligated() As System.Nullable(Of Boolean)
		Get
			Return Me._Deligated
		End Get
		Set
			If (Me._Deligated.Equals(value) = false) Then
				Me.OnDeligatedChanging(value)
				Me.SendPropertyChanging
				Me._Deligated = value
				Me.SendPropertyChanged("Deligated")
				Me.OnDeligatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeligatedOn", DbType:="Date")>  _
	Public Property DeligatedOn() As System.Nullable(Of Date)
		Get
			Return Me._DeligatedOn
		End Get
		Set
			If (Me._DeligatedOn.Equals(value) = false) Then
				Me.OnDeligatedOnChanging(value)
				Me.SendPropertyChanging
				Me._DeligatedOn = value
				Me.SendPropertyChanged("DeligatedOn")
				Me.OnDeligatedOnChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DontShowInSchedule", DbType:="Bit")>  _
	Public Property DontShowInSchedule() As System.Nullable(Of Boolean)
		Get
			Return Me._DontShowInSchedule
		End Get
		Set
			If (Me._DontShowInSchedule.Equals(value) = false) Then
				Me.OnDontShowInScheduleChanging(value)
				Me.SendPropertyChanging
				Me._DontShowInSchedule = value
				Me.SendPropertyChanged("DontShowInSchedule")
				Me.OnDontShowInScheduleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobTitleCardLabel", DbType:="NVarChar(50)")>  _
	Public Property JobTitleCardLabel() As String
		Get
			Return Me._JobTitleCardLabel
		End Get
		Set
			If (String.Equals(Me._JobTitleCardLabel, value) = false) Then
				Me.OnJobTitleCardLabelChanging(value)
				Me.SendPropertyChanging
				Me._JobTitleCardLabel = value
				Me.SendPropertyChanged("JobTitleCardLabel")
				Me.OnJobTitleCardLabelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepId", DbType:="Int")>  _
	Public Property DepId() As System.Nullable(Of Integer)
		Get
			Return Me._DepId
		End Get
		Set
			If (Me._DepId.Equals(value) = false) Then
				If Me._TblDepartment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepIdChanging(value)
				Me.SendPropertyChanging
				Me._DepId = value
				Me.SendPropertyChanged("DepId")
				Me.OnDepIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeDegreeId", DbType:="Int")>  _
	Public Property EmployeeDegreeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeDegreeId
		End Get
		Set
			If (Me._EmployeeDegreeId.Equals(value) = false) Then
				If Me._TblDegree.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeDegreeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeDegreeId = value
				Me.SendPropertyChanged("EmployeeDegreeId")
				Me.OnEmployeeDegreeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblContractType_TblEmployeeJob", Storage:="_TblContractType", ThisKey:="ContractTypeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblContractType() As TblContractType
		Get
			Return Me._TblContractType.Entity
		End Get
		Set
			Dim previousValue As TblContractType = Me._TblContractType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblContractType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblContractType.Entity = Nothing
					previousValue.TblEmployeeJobs.Remove(Me)
				End If
				Me._TblContractType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeJobs.Add(Me)
					Me._ContractTypeId = value.Id
				Else
					Me._ContractTypeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblContractType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblEmployeeJob", Storage:="_TblDepartment", ThisKey:="DepId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartment() As TblDepartment
		Get
			Return Me._TblDepartment.Entity
		End Get
		Set
			Dim previousValue As TblDepartment = Me._TblDepartment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartment.Entity = Nothing
					previousValue.TblEmployeeJobs.Remove(Me)
				End If
				Me._TblDepartment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeJobs.Add(Me)
					Me._DepId = value.Id
				Else
					Me._DepId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeJob", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeeJobs.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeJobs.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeJob1", Storage:="_TblEmployee1", ThisKey:="DeligatedBy", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee1() As TblEmployee
		Get
			Return Me._TblEmployee1.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee1.Entity = Nothing
					previousValue.TblEmployeeJobs1.Remove(Me)
				End If
				Me._TblEmployee1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeJobs1.Add(Me)
					Me._DeligatedBy = value.Id
				Else
					Me._DeligatedBy = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblEmployeeJob", Storage:="_TblJobDescription", ThisKey:="JobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblEmployeeJobs.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeJobs.Add(Me)
					Me._JobId = value.Id
				Else
					Me._JobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDegree_TblEmployeeJob", Storage:="_TblDegree", ThisKey:="EmployeeDegreeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDegree() As TblDegree
		Get
			Return Me._TblDegree.Entity
		End Get
		Set
			Dim previousValue As TblDegree = Me._TblDegree.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDegree.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDegree.Entity = Nothing
					previousValue.TblEmployeeJobs.Remove(Me)
				End If
				Me._TblDegree.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeJobs.Add(Me)
					Me._EmployeeDegreeId = value.Id
				Else
					Me._EmployeeDegreeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDegree")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblJobDescription")>  _
Partial Public Class TblJobDescription
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _JobNumber As String
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _SupervisorId As System.Nullable(Of Integer)
	
	Private _JobCategoryId As System.Nullable(Of Integer)
	
	Private _ScheduleDepId As System.Nullable(Of Integer)
	
	Private _DefaultCardLabelName As String
	
	Private _DefaultJobNameForCard As String
	
	Private _DefaultJobNameForCardFemale As String
	
	Private _RequiredHoursForJobId As System.Nullable(Of Integer)
	
	Private _ClassificantionId As System.Nullable(Of Integer)
	
	Private _TblDepartmentForSchedules As EntitySet(Of TblDepartmentForSchedule)
	
	Private _TblDepartmentForSchedules1 As EntitySet(Of TblDepartmentForSchedule)
	
	Private _TblJobRequirements As EntitySet(Of TblJobRequirement)
	
	Private _TblJobsPerDepartments As EntitySet(Of TblJobsPerDepartment)
	
	Private _TblJobTasks As EntitySet(Of TblJobTask)
	
	Private _TblPAPerJobs As EntitySet(Of TblPAPerJob)
	
	Private _TblEmployeeJobs As EntitySet(Of TblEmployeeJob)
	
	Private _TblJobDescriptions As EntitySet(Of TblJobDescription)
	
	Private _TblDepartment As EntityRef(Of TblDepartment)
	
	Private _TblJobCategory As EntityRef(Of TblJobCategory)
	
	Private _TblJobDescription As EntityRef(Of TblJobDescription)
	
	Private _TblRequiredHoursForJob As EntityRef(Of TblRequiredHoursForJob)
	
	Private _TblClassification As EntityRef(Of TblClassification)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnJobNumberChanging(value As String)
    End Sub
    Partial Private Sub OnJobNumberChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnArabicNameChanged()
    End Sub
    Partial Private Sub OnSupervisorIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupervisorIdChanged()
    End Sub
    Partial Private Sub OnJobCategoryIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJobCategoryIdChanged()
    End Sub
    Partial Private Sub OnScheduleDepIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnScheduleDepIdChanged()
    End Sub
    Partial Private Sub OnDefaultCardLabelNameChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultCardLabelNameChanged()
    End Sub
    Partial Private Sub OnDefaultJobNameForCardChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultJobNameForCardChanged()
    End Sub
    Partial Private Sub OnDefaultJobNameForCardFemaleChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultJobNameForCardFemaleChanged()
    End Sub
    Partial Private Sub OnRequiredHoursForJobIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRequiredHoursForJobIdChanged()
    End Sub
    Partial Private Sub OnClassificantionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnClassificantionIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblDepartmentForSchedules = New EntitySet(Of TblDepartmentForSchedule)(AddressOf Me.attach_TblDepartmentForSchedules, AddressOf Me.detach_TblDepartmentForSchedules)
		Me._TblDepartmentForSchedules1 = New EntitySet(Of TblDepartmentForSchedule)(AddressOf Me.attach_TblDepartmentForSchedules1, AddressOf Me.detach_TblDepartmentForSchedules1)
		Me._TblJobRequirements = New EntitySet(Of TblJobRequirement)(AddressOf Me.attach_TblJobRequirements, AddressOf Me.detach_TblJobRequirements)
		Me._TblJobsPerDepartments = New EntitySet(Of TblJobsPerDepartment)(AddressOf Me.attach_TblJobsPerDepartments, AddressOf Me.detach_TblJobsPerDepartments)
		Me._TblJobTasks = New EntitySet(Of TblJobTask)(AddressOf Me.attach_TblJobTasks, AddressOf Me.detach_TblJobTasks)
		Me._TblPAPerJobs = New EntitySet(Of TblPAPerJob)(AddressOf Me.attach_TblPAPerJobs, AddressOf Me.detach_TblPAPerJobs)
		Me._TblEmployeeJobs = New EntitySet(Of TblEmployeeJob)(AddressOf Me.attach_TblEmployeeJobs, AddressOf Me.detach_TblEmployeeJobs)
		Me._TblJobDescriptions = New EntitySet(Of TblJobDescription)(AddressOf Me.attach_TblJobDescriptions, AddressOf Me.detach_TblJobDescriptions)
		Me._TblDepartment = CType(Nothing, EntityRef(Of TblDepartment))
		Me._TblJobCategory = CType(Nothing, EntityRef(Of TblJobCategory))
		Me._TblJobDescription = CType(Nothing, EntityRef(Of TblJobDescription))
		Me._TblRequiredHoursForJob = CType(Nothing, EntityRef(Of TblRequiredHoursForJob))
		Me._TblClassification = CType(Nothing, EntityRef(Of TblClassification))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobNumber", DbType:="NVarChar(50)")>  _
	Public Property JobNumber() As String
		Get
			Return Me._JobNumber
		End Get
		Set
			If (String.Equals(Me._JobNumber, value) = false) Then
				Me.OnJobNumberChanging(value)
				Me.SendPropertyChanging
				Me._JobNumber = value
				Me.SendPropertyChanged("JobNumber")
				Me.OnJobNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me.OnArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._ArabicName = value
				Me.SendPropertyChanged("ArabicName")
				Me.OnArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupervisorId", DbType:="Int")>  _
	Public Property SupervisorId() As System.Nullable(Of Integer)
		Get
			Return Me._SupervisorId
		End Get
		Set
			If (Me._SupervisorId.Equals(value) = false) Then
				If Me._TblJobDescription.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSupervisorIdChanging(value)
				Me.SendPropertyChanging
				Me._SupervisorId = value
				Me.SendPropertyChanged("SupervisorId")
				Me.OnSupervisorIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobCategoryId", DbType:="Int")>  _
	Public Property JobCategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._JobCategoryId
		End Get
		Set
			If (Me._JobCategoryId.Equals(value) = false) Then
				If Me._TblJobCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnJobCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._JobCategoryId = value
				Me.SendPropertyChanged("JobCategoryId")
				Me.OnJobCategoryIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScheduleDepId", DbType:="Int")>  _
	Public Property ScheduleDepId() As System.Nullable(Of Integer)
		Get
			Return Me._ScheduleDepId
		End Get
		Set
			If (Me._ScheduleDepId.Equals(value) = false) Then
				If Me._TblDepartment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnScheduleDepIdChanging(value)
				Me.SendPropertyChanging
				Me._ScheduleDepId = value
				Me.SendPropertyChanged("ScheduleDepId")
				Me.OnScheduleDepIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultCardLabelName", DbType:="NVarChar(250)")>  _
	Public Property DefaultCardLabelName() As String
		Get
			Return Me._DefaultCardLabelName
		End Get
		Set
			If (String.Equals(Me._DefaultCardLabelName, value) = false) Then
				Me.OnDefaultCardLabelNameChanging(value)
				Me.SendPropertyChanging
				Me._DefaultCardLabelName = value
				Me.SendPropertyChanged("DefaultCardLabelName")
				Me.OnDefaultCardLabelNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultJobNameForCard", DbType:="NVarChar(250)")>  _
	Public Property DefaultJobNameForCard() As String
		Get
			Return Me._DefaultJobNameForCard
		End Get
		Set
			If (String.Equals(Me._DefaultJobNameForCard, value) = false) Then
				Me.OnDefaultJobNameForCardChanging(value)
				Me.SendPropertyChanging
				Me._DefaultJobNameForCard = value
				Me.SendPropertyChanged("DefaultJobNameForCard")
				Me.OnDefaultJobNameForCardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultJobNameForCardFemale", DbType:="NVarChar(250)")>  _
	Public Property DefaultJobNameForCardFemale() As String
		Get
			Return Me._DefaultJobNameForCardFemale
		End Get
		Set
			If (String.Equals(Me._DefaultJobNameForCardFemale, value) = false) Then
				Me.OnDefaultJobNameForCardFemaleChanging(value)
				Me.SendPropertyChanging
				Me._DefaultJobNameForCardFemale = value
				Me.SendPropertyChanged("DefaultJobNameForCardFemale")
				Me.OnDefaultJobNameForCardFemaleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredHoursForJobId", DbType:="Int")>  _
	Public Property RequiredHoursForJobId() As System.Nullable(Of Integer)
		Get
			Return Me._RequiredHoursForJobId
		End Get
		Set
			If (Me._RequiredHoursForJobId.Equals(value) = false) Then
				If Me._TblRequiredHoursForJob.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRequiredHoursForJobIdChanging(value)
				Me.SendPropertyChanging
				Me._RequiredHoursForJobId = value
				Me.SendPropertyChanged("RequiredHoursForJobId")
				Me.OnRequiredHoursForJobIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassificantionId", DbType:="Int")>  _
	Public Property ClassificantionId() As System.Nullable(Of Integer)
		Get
			Return Me._ClassificantionId
		End Get
		Set
			If (Me._ClassificantionId.Equals(value) = false) Then
				If Me._TblClassification.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnClassificantionIdChanging(value)
				Me.SendPropertyChanging
				Me._ClassificantionId = value
				Me.SendPropertyChanged("ClassificantionId")
				Me.OnClassificantionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblDepartmentForSchedule", Storage:="_TblDepartmentForSchedules", ThisKey:="Id", OtherKey:="SupervisorJobId")>  _
	Public Property TblDepartmentForSchedules() As EntitySet(Of TblDepartmentForSchedule)
		Get
			Return Me._TblDepartmentForSchedules
		End Get
		Set
			Me._TblDepartmentForSchedules.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblDepartmentForSchedule1", Storage:="_TblDepartmentForSchedules1", ThisKey:="Id", OtherKey:="ManagerJobId")>  _
	Public Property TblDepartmentForSchedules1() As EntitySet(Of TblDepartmentForSchedule)
		Get
			Return Me._TblDepartmentForSchedules1
		End Get
		Set
			Me._TblDepartmentForSchedules1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobRequirement", Storage:="_TblJobRequirements", ThisKey:="Id", OtherKey:="JobId")>  _
	Public Property TblJobRequirements() As EntitySet(Of TblJobRequirement)
		Get
			Return Me._TblJobRequirements
		End Get
		Set
			Me._TblJobRequirements.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobsPerDepartment", Storage:="_TblJobsPerDepartments", ThisKey:="Id", OtherKey:="JobId")>  _
	Public Property TblJobsPerDepartments() As EntitySet(Of TblJobsPerDepartment)
		Get
			Return Me._TblJobsPerDepartments
		End Get
		Set
			Me._TblJobsPerDepartments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobTask", Storage:="_TblJobTasks", ThisKey:="Id", OtherKey:="JobId")>  _
	Public Property TblJobTasks() As EntitySet(Of TblJobTask)
		Get
			Return Me._TblJobTasks
		End Get
		Set
			Me._TblJobTasks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblPAPerJob", Storage:="_TblPAPerJobs", ThisKey:="Id", OtherKey:="JobId")>  _
	Public Property TblPAPerJobs() As EntitySet(Of TblPAPerJob)
		Get
			Return Me._TblPAPerJobs
		End Get
		Set
			Me._TblPAPerJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblEmployeeJob", Storage:="_TblEmployeeJobs", ThisKey:="Id", OtherKey:="JobId")>  _
	Public Property TblEmployeeJobs() As EntitySet(Of TblEmployeeJob)
		Get
			Return Me._TblEmployeeJobs
		End Get
		Set
			Me._TblEmployeeJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobDescription", Storage:="_TblJobDescriptions", ThisKey:="Id", OtherKey:="SupervisorId")>  _
	Public Property TblJobDescriptions() As EntitySet(Of TblJobDescription)
		Get
			Return Me._TblJobDescriptions
		End Get
		Set
			Me._TblJobDescriptions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblJobDescription", Storage:="_TblDepartment", ThisKey:="ScheduleDepId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartment() As TblDepartment
		Get
			Return Me._TblDepartment.Entity
		End Get
		Set
			Dim previousValue As TblDepartment = Me._TblDepartment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartment.Entity = Nothing
					previousValue.TblJobDescriptions.Remove(Me)
				End If
				Me._TblDepartment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobDescriptions.Add(Me)
					Me._ScheduleDepId = value.Id
				Else
					Me._ScheduleDepId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobCategory_TblJobDescription", Storage:="_TblJobCategory", ThisKey:="JobCategoryId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobCategory() As TblJobCategory
		Get
			Return Me._TblJobCategory.Entity
		End Get
		Set
			Dim previousValue As TblJobCategory = Me._TblJobCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobCategory.Entity = Nothing
					previousValue.TblJobDescriptions.Remove(Me)
				End If
				Me._TblJobCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobDescriptions.Add(Me)
					Me._JobCategoryId = value.Id
				Else
					Me._JobCategoryId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblJobDescription_TblJobDescription", Storage:="_TblJobDescription", ThisKey:="SupervisorId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblJobDescription() As TblJobDescription
		Get
			Return Me._TblJobDescription.Entity
		End Get
		Set
			Dim previousValue As TblJobDescription = Me._TblJobDescription.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblJobDescription.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblJobDescription.Entity = Nothing
					previousValue.TblJobDescriptions.Remove(Me)
				End If
				Me._TblJobDescription.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobDescriptions.Add(Me)
					Me._SupervisorId = value.Id
				Else
					Me._SupervisorId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblJobDescription")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblRequiredHoursForJob_TblJobDescription", Storage:="_TblRequiredHoursForJob", ThisKey:="RequiredHoursForJobId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblRequiredHoursForJob() As TblRequiredHoursForJob
		Get
			Return Me._TblRequiredHoursForJob.Entity
		End Get
		Set
			Dim previousValue As TblRequiredHoursForJob = Me._TblRequiredHoursForJob.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblRequiredHoursForJob.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblRequiredHoursForJob.Entity = Nothing
					previousValue.TblJobDescriptions.Remove(Me)
				End If
				Me._TblRequiredHoursForJob.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobDescriptions.Add(Me)
					Me._RequiredHoursForJobId = value.Id
				Else
					Me._RequiredHoursForJobId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblRequiredHoursForJob")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblClassification_TblJobDescription", Storage:="_TblClassification", ThisKey:="ClassificantionId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblClassification() As TblClassification
		Get
			Return Me._TblClassification.Entity
		End Get
		Set
			Dim previousValue As TblClassification = Me._TblClassification.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblClassification.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblClassification.Entity = Nothing
					previousValue.TblJobDescriptions.Remove(Me)
				End If
				Me._TblClassification.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblJobDescriptions.Add(Me)
					Me._ClassificantionId = value.Id
				Else
					Me._ClassificantionId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblClassification")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblDepartmentForSchedules(ByVal entity As TblDepartmentForSchedule)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblDepartmentForSchedules(ByVal entity As TblDepartmentForSchedule)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
	
	Private Sub attach_TblDepartmentForSchedules1(ByVal entity As TblDepartmentForSchedule)
		Me.SendPropertyChanging
		entity.TblJobDescription1 = Me
	End Sub
	
	Private Sub detach_TblDepartmentForSchedules1(ByVal entity As TblDepartmentForSchedule)
		Me.SendPropertyChanging
		entity.TblJobDescription1 = Nothing
	End Sub
	
	Private Sub attach_TblJobRequirements(ByVal entity As TblJobRequirement)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblJobRequirements(ByVal entity As TblJobRequirement)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
	
	Private Sub attach_TblJobsPerDepartments(ByVal entity As TblJobsPerDepartment)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblJobsPerDepartments(ByVal entity As TblJobsPerDepartment)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
	
	Private Sub attach_TblJobTasks(ByVal entity As TblJobTask)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblJobTasks(ByVal entity As TblJobTask)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
	
	Private Sub attach_TblPAPerJobs(ByVal entity As TblPAPerJob)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblPAPerJobs(ByVal entity As TblPAPerJob)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
	
	Private Sub attach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
	
	Private Sub attach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblJobDescription = Me
	End Sub
	
	Private Sub detach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblJobDescription = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblClassification")>  _
Partial Public Class TblClassification
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _TblJobDescriptions As EntitySet(Of TblJobDescription)
	
	Private _TblDegrees As EntitySet(Of TblDegree)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblJobDescriptions = New EntitySet(Of TblJobDescription)(AddressOf Me.attach_TblJobDescriptions, AddressOf Me.detach_TblJobDescriptions)
		Me._TblDegrees = New EntitySet(Of TblDegree)(AddressOf Me.attach_TblDegrees, AddressOf Me.detach_TblDegrees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblClassification_TblJobDescription", Storage:="_TblJobDescriptions", ThisKey:="Id", OtherKey:="ClassificantionId")>  _
	Public Property TblJobDescriptions() As EntitySet(Of TblJobDescription)
		Get
			Return Me._TblJobDescriptions
		End Get
		Set
			Me._TblJobDescriptions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblClassification_TblDegree", Storage:="_TblDegrees", ThisKey:="Id", OtherKey:="ClassificationId")>  _
	Public Property TblDegrees() As EntitySet(Of TblDegree)
		Get
			Return Me._TblDegrees
		End Get
		Set
			Me._TblDegrees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblClassification = Me
	End Sub
	
	Private Sub detach_TblJobDescriptions(ByVal entity As TblJobDescription)
		Me.SendPropertyChanging
		entity.TblClassification = Nothing
	End Sub
	
	Private Sub attach_TblDegrees(ByVal entity As TblDegree)
		Me.SendPropertyChanging
		entity.TblClassification = Me
	End Sub
	
	Private Sub detach_TblDegrees(ByVal entity As TblDegree)
		Me.SendPropertyChanging
		entity.TblClassification = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblDegree")>  _
Partial Public Class TblDegree
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _ClassificationId As System.Nullable(Of Integer)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _TblEmployeeJobs As EntitySet(Of TblEmployeeJob)
	
	Private _TblClassification As EntityRef(Of TblClassification)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnClassificationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnClassificationIdChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeeJobs = New EntitySet(Of TblEmployeeJob)(AddressOf Me.attach_TblEmployeeJobs, AddressOf Me.detach_TblEmployeeJobs)
		Me._TblClassification = CType(Nothing, EntityRef(Of TblClassification))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassificationId", DbType:="Int")>  _
	Public Property ClassificationId() As System.Nullable(Of Integer)
		Get
			Return Me._ClassificationId
		End Get
		Set
			If (Me._ClassificationId.Equals(value) = false) Then
				If Me._TblClassification.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnClassificationIdChanging(value)
				Me.SendPropertyChanging
				Me._ClassificationId = value
				Me.SendPropertyChanged("ClassificationId")
				Me.OnClassificationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Decimal(18,2)")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDegree_TblEmployeeJob", Storage:="_TblEmployeeJobs", ThisKey:="Id", OtherKey:="EmployeeDegreeId")>  _
	Public Property TblEmployeeJobs() As EntitySet(Of TblEmployeeJob)
		Get
			Return Me._TblEmployeeJobs
		End Get
		Set
			Me._TblEmployeeJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblClassification_TblDegree", Storage:="_TblClassification", ThisKey:="ClassificationId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblClassification() As TblClassification
		Get
			Return Me._TblClassification.Entity
		End Get
		Set
			Dim previousValue As TblClassification = Me._TblClassification.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblClassification.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblClassification.Entity = Nothing
					previousValue.TblDegrees.Remove(Me)
				End If
				Me._TblClassification.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblDegrees.Add(Me)
					Me._ClassificationId = value.Id
				Else
					Me._ClassificationId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblClassification")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblDegree = Me
	End Sub
	
	Private Sub detach_TblEmployeeJobs(ByVal entity As TblEmployeeJob)
		Me.SendPropertyChanging
		entity.TblDegree = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMonths")>  _
Partial Public Class TblMonth
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _TblMonthsPerYears As EntitySet(Of TblMonthsPerYear)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnArabicNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblMonthsPerYears = New EntitySet(Of TblMonthsPerYear)(AddressOf Me.attach_TblMonthsPerYears, AddressOf Me.detach_TblMonthsPerYears)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me.OnArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._ArabicName = value
				Me.SendPropertyChanged("ArabicName")
				Me.OnArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMonth_TblMonthsPerYear", Storage:="_TblMonthsPerYears", ThisKey:="Id", OtherKey:="MonthId")>  _
	Public Property TblMonthsPerYears() As EntitySet(Of TblMonthsPerYear)
		Get
			Return Me._TblMonthsPerYears
		End Get
		Set
			Me._TblMonthsPerYears.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblMonthsPerYears(ByVal entity As TblMonthsPerYear)
		Me.SendPropertyChanging
		entity.TblMonth = Me
	End Sub
	
	Private Sub detach_TblMonthsPerYears(ByVal entity As TblMonthsPerYear)
		Me.SendPropertyChanging
		entity.TblMonth = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeeSalary")>  _
Partial Public Class TblEmployeeSalary
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _BasicSalary As System.Nullable(Of Decimal)
	
	Private _NSSFSalary As System.Nullable(Of Decimal)
	
	Private _FamilySalary As System.Nullable(Of Decimal)
	
	Private _transPerDay As System.Nullable(Of Decimal)
	
	Private _OvertimeValue As System.Nullable(Of Decimal)
	
	Private _ExperienceIn As System.Nullable(Of Decimal)
	
	Private _ExperienceOut As System.Nullable(Of Decimal)
	
	Private _PositionValue As System.Nullable(Of Decimal)
	
	Private _IsCash As System.Nullable(Of Boolean)
	
	Private _AccountNumber As String
	
	Private _ClosedArea As System.Nullable(Of Decimal)
	
	Private _Note As String
	
	Private _CurrencyId As System.Nullable(Of Integer)
	
	Private _TblCurrency As EntityRef(Of TblCurrency)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnBasicSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBasicSalaryChanged()
    End Sub
    Partial Private Sub OnNSSFSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNSSFSalaryChanged()
    End Sub
    Partial Private Sub OnFamilySalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFamilySalaryChanged()
    End Sub
    Partial Private Sub OntransPerDayChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntransPerDayChanged()
    End Sub
    Partial Private Sub OnOvertimeValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOvertimeValueChanged()
    End Sub
    Partial Private Sub OnExperienceInChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExperienceInChanged()
    End Sub
    Partial Private Sub OnExperienceOutChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExperienceOutChanged()
    End Sub
    Partial Private Sub OnPositionValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPositionValueChanged()
    End Sub
    Partial Private Sub OnIsCashChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCashChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnClosedAreaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnClosedAreaChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnCurrencyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblCurrency = CType(Nothing, EntityRef(Of TblCurrency))
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BasicSalary", DbType:="Decimal(18,2)")>  _
	Public Property BasicSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._BasicSalary
		End Get
		Set
			If (Me._BasicSalary.Equals(value) = false) Then
				Me.OnBasicSalaryChanging(value)
				Me.SendPropertyChanging
				Me._BasicSalary = value
				Me.SendPropertyChanged("BasicSalary")
				Me.OnBasicSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSSFSalary", DbType:="Decimal(18,2)")>  _
	Public Property NSSFSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._NSSFSalary
		End Get
		Set
			If (Me._NSSFSalary.Equals(value) = false) Then
				Me.OnNSSFSalaryChanging(value)
				Me.SendPropertyChanging
				Me._NSSFSalary = value
				Me.SendPropertyChanged("NSSFSalary")
				Me.OnNSSFSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilySalary", DbType:="Decimal(18,2)")>  _
	Public Property FamilySalary() As System.Nullable(Of Decimal)
		Get
			Return Me._FamilySalary
		End Get
		Set
			If (Me._FamilySalary.Equals(value) = false) Then
				Me.OnFamilySalaryChanging(value)
				Me.SendPropertyChanging
				Me._FamilySalary = value
				Me.SendPropertyChanged("FamilySalary")
				Me.OnFamilySalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transPerDay", DbType:="Decimal(18,2)")>  _
	Public Property transPerDay() As System.Nullable(Of Decimal)
		Get
			Return Me._transPerDay
		End Get
		Set
			If (Me._transPerDay.Equals(value) = false) Then
				Me.OntransPerDayChanging(value)
				Me.SendPropertyChanging
				Me._transPerDay = value
				Me.SendPropertyChanged("transPerDay")
				Me.OntransPerDayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OvertimeValue", DbType:="Decimal(18,2)")>  _
	Public Property OvertimeValue() As System.Nullable(Of Decimal)
		Get
			Return Me._OvertimeValue
		End Get
		Set
			If (Me._OvertimeValue.Equals(value) = false) Then
				Me.OnOvertimeValueChanging(value)
				Me.SendPropertyChanging
				Me._OvertimeValue = value
				Me.SendPropertyChanged("OvertimeValue")
				Me.OnOvertimeValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceIn", DbType:="Decimal(18,2)")>  _
	Public Property ExperienceIn() As System.Nullable(Of Decimal)
		Get
			Return Me._ExperienceIn
		End Get
		Set
			If (Me._ExperienceIn.Equals(value) = false) Then
				Me.OnExperienceInChanging(value)
				Me.SendPropertyChanging
				Me._ExperienceIn = value
				Me.SendPropertyChanged("ExperienceIn")
				Me.OnExperienceInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceOut", DbType:="Decimal(18,2)")>  _
	Public Property ExperienceOut() As System.Nullable(Of Decimal)
		Get
			Return Me._ExperienceOut
		End Get
		Set
			If (Me._ExperienceOut.Equals(value) = false) Then
				Me.OnExperienceOutChanging(value)
				Me.SendPropertyChanging
				Me._ExperienceOut = value
				Me.SendPropertyChanged("ExperienceOut")
				Me.OnExperienceOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionValue", DbType:="Decimal(18,2)")>  _
	Public Property PositionValue() As System.Nullable(Of Decimal)
		Get
			Return Me._PositionValue
		End Get
		Set
			If (Me._PositionValue.Equals(value) = false) Then
				Me.OnPositionValueChanging(value)
				Me.SendPropertyChanging
				Me._PositionValue = value
				Me.SendPropertyChanged("PositionValue")
				Me.OnPositionValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCash", DbType:="Bit")>  _
	Public Property IsCash() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCash
		End Get
		Set
			If (Me._IsCash.Equals(value) = false) Then
				Me.OnIsCashChanging(value)
				Me.SendPropertyChanging
				Me._IsCash = value
				Me.SendPropertyChanged("IsCash")
				Me.OnIsCashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(50)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClosedArea", DbType:="Decimal(18,2)")>  _
	Public Property ClosedArea() As System.Nullable(Of Decimal)
		Get
			Return Me._ClosedArea
		End Get
		Set
			If (Me._ClosedArea.Equals(value) = false) Then
				Me.OnClosedAreaChanging(value)
				Me.SendPropertyChanging
				Me._ClosedArea = value
				Me.SendPropertyChanged("ClosedArea")
				Me.OnClosedAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyId", DbType:="Int")>  _
	Public Property CurrencyId() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyId
		End Get
		Set
			If (Me._CurrencyId.Equals(value) = false) Then
				If Me._TblCurrency.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrencyIdChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyId = value
				Me.SendPropertyChanged("CurrencyId")
				Me.OnCurrencyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblEmployeeSalary", Storage:="_TblCurrency", ThisKey:="CurrencyId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCurrency() As TblCurrency
		Get
			Return Me._TblCurrency.Entity
		End Get
		Set
			Dim previousValue As TblCurrency = Me._TblCurrency.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCurrency.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCurrency.Entity = Nothing
					previousValue.TblEmployeeSalaries.Remove(Me)
				End If
				Me._TblCurrency.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalaries.Add(Me)
					Me._CurrencyId = value.Id
				Else
					Me._CurrencyId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCurrency")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeSalary", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeeSalaries.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalaries.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblYear")>  _
Partial Public Class TblYear
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _TblMonthsPerYears As EntitySet(Of TblMonthsPerYear)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblMonthsPerYears = New EntitySet(Of TblMonthsPerYear)(AddressOf Me.attach_TblMonthsPerYears, AddressOf Me.detach_TblMonthsPerYears)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblYear_TblMonthsPerYear", Storage:="_TblMonthsPerYears", ThisKey:="Id", OtherKey:="YearId")>  _
	Public Property TblMonthsPerYears() As EntitySet(Of TblMonthsPerYear)
		Get
			Return Me._TblMonthsPerYears
		End Get
		Set
			Me._TblMonthsPerYears.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblMonthsPerYears(ByVal entity As TblMonthsPerYear)
		Me.SendPropertyChanging
		entity.TblYear = Me
	End Sub
	
	Private Sub detach_TblMonthsPerYears(ByVal entity As TblMonthsPerYear)
		Me.SendPropertyChanging
		entity.TblYear = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblMonthsPerYear")>  _
Partial Public Class TblMonthsPerYear
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MonthId As System.Nullable(Of Integer)
	
	Private _YearId As System.Nullable(Of Integer)
	
	Private _Posted As System.Nullable(Of Boolean)
	
	Private _Locked As System.Nullable(Of Boolean)
	
	Private _PostNote As String
	
	Private _TransId As System.Nullable(Of Integer)
	
	Private _PaymentTransId As System.Nullable(Of Integer)
	
	Private _TblEmployeeSalaryHistories As EntitySet(Of TblEmployeeSalaryHistory)
	
	Private _TblMonth As EntityRef(Of TblMonth)
	
	Private _TblYear As EntityRef(Of TblYear)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMonthIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMonthIdChanged()
    End Sub
    Partial Private Sub OnYearIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearIdChanged()
    End Sub
    Partial Private Sub OnPostedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPostedChanged()
    End Sub
    Partial Private Sub OnLockedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLockedChanged()
    End Sub
    Partial Private Sub OnPostNoteChanging(value As String)
    End Sub
    Partial Private Sub OnPostNoteChanged()
    End Sub
    Partial Private Sub OnTransIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTransIdChanged()
    End Sub
    Partial Private Sub OnPaymentTransIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPaymentTransIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeeSalaryHistories = New EntitySet(Of TblEmployeeSalaryHistory)(AddressOf Me.attach_TblEmployeeSalaryHistories, AddressOf Me.detach_TblEmployeeSalaryHistories)
		Me._TblMonth = CType(Nothing, EntityRef(Of TblMonth))
		Me._TblYear = CType(Nothing, EntityRef(Of TblYear))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthId", DbType:="Int")>  _
	Public Property MonthId() As System.Nullable(Of Integer)
		Get
			Return Me._MonthId
		End Get
		Set
			If (Me._MonthId.Equals(value) = false) Then
				If Me._TblMonth.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMonthIdChanging(value)
				Me.SendPropertyChanging
				Me._MonthId = value
				Me.SendPropertyChanged("MonthId")
				Me.OnMonthIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YearId", DbType:="Int")>  _
	Public Property YearId() As System.Nullable(Of Integer)
		Get
			Return Me._YearId
		End Get
		Set
			If (Me._YearId.Equals(value) = false) Then
				If Me._TblYear.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnYearIdChanging(value)
				Me.SendPropertyChanging
				Me._YearId = value
				Me.SendPropertyChanged("YearId")
				Me.OnYearIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Posted", DbType:="Bit")>  _
	Public Property Posted() As System.Nullable(Of Boolean)
		Get
			Return Me._Posted
		End Get
		Set
			If (Me._Posted.Equals(value) = false) Then
				Me.OnPostedChanging(value)
				Me.SendPropertyChanging
				Me._Posted = value
				Me.SendPropertyChanged("Posted")
				Me.OnPostedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locked", DbType:="Bit")>  _
	Public Property Locked() As System.Nullable(Of Boolean)
		Get
			Return Me._Locked
		End Get
		Set
			If (Me._Locked.Equals(value) = false) Then
				Me.OnLockedChanging(value)
				Me.SendPropertyChanging
				Me._Locked = value
				Me.SendPropertyChanged("Locked")
				Me.OnLockedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostNote", DbType:="NVarChar(50)")>  _
	Public Property PostNote() As String
		Get
			Return Me._PostNote
		End Get
		Set
			If (String.Equals(Me._PostNote, value) = false) Then
				Me.OnPostNoteChanging(value)
				Me.SendPropertyChanging
				Me._PostNote = value
				Me.SendPropertyChanged("PostNote")
				Me.OnPostNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransId", DbType:="Int")>  _
	Public Property TransId() As System.Nullable(Of Integer)
		Get
			Return Me._TransId
		End Get
		Set
			If (Me._TransId.Equals(value) = false) Then
				Me.OnTransIdChanging(value)
				Me.SendPropertyChanging
				Me._TransId = value
				Me.SendPropertyChanged("TransId")
				Me.OnTransIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentTransId", DbType:="Int")>  _
	Public Property PaymentTransId() As System.Nullable(Of Integer)
		Get
			Return Me._PaymentTransId
		End Get
		Set
			If (Me._PaymentTransId.Equals(value) = false) Then
				Me.OnPaymentTransIdChanging(value)
				Me.SendPropertyChanging
				Me._PaymentTransId = value
				Me.SendPropertyChanged("PaymentTransId")
				Me.OnPaymentTransIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMonthsPerYear_TblEmployeeSalaryHistory", Storage:="_TblEmployeeSalaryHistories", ThisKey:="Id", OtherKey:="MonthPerYearId")>  _
	Public Property TblEmployeeSalaryHistories() As EntitySet(Of TblEmployeeSalaryHistory)
		Get
			Return Me._TblEmployeeSalaryHistories
		End Get
		Set
			Me._TblEmployeeSalaryHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMonth_TblMonthsPerYear", Storage:="_TblMonth", ThisKey:="MonthId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblMonth() As TblMonth
		Get
			Return Me._TblMonth.Entity
		End Get
		Set
			Dim previousValue As TblMonth = Me._TblMonth.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblMonth.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblMonth.Entity = Nothing
					previousValue.TblMonthsPerYears.Remove(Me)
				End If
				Me._TblMonth.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblMonthsPerYears.Add(Me)
					Me._MonthId = value.Id
				Else
					Me._MonthId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblMonth")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblYear_TblMonthsPerYear", Storage:="_TblYear", ThisKey:="YearId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblYear() As TblYear
		Get
			Return Me._TblYear.Entity
		End Get
		Set
			Dim previousValue As TblYear = Me._TblYear.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblYear.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblYear.Entity = Nothing
					previousValue.TblMonthsPerYears.Remove(Me)
				End If
				Me._TblYear.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblMonthsPerYears.Add(Me)
					Me._YearId = value.Id
				Else
					Me._YearId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblYear")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEmployeeSalaryHistories(ByVal entity As TblEmployeeSalaryHistory)
		Me.SendPropertyChanging
		entity.TblMonthsPerYear = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalaryHistories(ByVal entity As TblEmployeeSalaryHistory)
		Me.SendPropertyChanging
		entity.TblMonthsPerYear = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblFamilyMember")>  _
Partial Public Class TblFamilyMember
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _Gender As String
	
	Private _IsWorking As System.Nullable(Of Boolean)
	
	Private _FamilyMemberEmployeeId As System.Nullable(Of Integer)
	
	Private _IsMarried As System.Nullable(Of Boolean)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnIsWorkingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsWorkingChanged()
    End Sub
    Partial Private Sub OnFamilyMemberEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFamilyMemberEmployeeIdChanged()
    End Sub
    Partial Private Sub OnIsMarriedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsMarriedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="DateTime")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsWorking", DbType:="Bit")>  _
	Public Property IsWorking() As System.Nullable(Of Boolean)
		Get
			Return Me._IsWorking
		End Get
		Set
			If (Me._IsWorking.Equals(value) = false) Then
				Me.OnIsWorkingChanging(value)
				Me.SendPropertyChanging
				Me._IsWorking = value
				Me.SendPropertyChanged("IsWorking")
				Me.OnIsWorkingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilyMemberEmployeeId", DbType:="Int")>  _
	Public Property FamilyMemberEmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._FamilyMemberEmployeeId
		End Get
		Set
			If (Me._FamilyMemberEmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFamilyMemberEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._FamilyMemberEmployeeId = value
				Me.SendPropertyChanged("FamilyMemberEmployeeId")
				Me.OnFamilyMemberEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMarried", DbType:="Bit")>  _
	Public Property IsMarried() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMarried
		End Get
		Set
			If (Me._IsMarried.Equals(value) = false) Then
				Me.OnIsMarriedChanging(value)
				Me.SendPropertyChanging
				Me._IsMarried = value
				Me.SendPropertyChanged("IsMarried")
				Me.OnIsMarriedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblFamilyMember", Storage:="_TblEmployee", ThisKey:="FamilyMemberEmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblFamilyMembers.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblFamilyMembers.Add(Me)
					Me._FamilyMemberEmployeeId = value.Id
				Else
					Me._FamilyMemberEmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblFamilyMember", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblFamilyMembers.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblFamilyMembers.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeeSalaryHistory")>  _
Partial Public Class TblEmployeeSalaryHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _MonthPerYearId As System.Nullable(Of Integer)
	
	Private _BasicSalary As System.Nullable(Of Decimal)
	
	Private _NSSFSalary As System.Nullable(Of Decimal)
	
	Private _Excellence As System.Nullable(Of Decimal)
	
	Private _FamilySalary As System.Nullable(Of Decimal)
	
	Private _TransPerDay As System.Nullable(Of Decimal)
	
	Private _OvertimeHrs As System.Nullable(Of Decimal)
	
	Private _OvertimeValue As System.Nullable(Of Decimal)
	
	Private _ExperienceIn As System.Nullable(Of Decimal)
	
	Private _ExperienceOut As System.Nullable(Of Decimal)
	
	Private _PositionValue As System.Nullable(Of Decimal)
	
	Private _OtherPlus As System.Nullable(Of Decimal)
	
	Private _OtherMinus As System.Nullable(Of Decimal)
	
	Private _SchoolValue As System.Nullable(Of Decimal)
	
	Private _Phone As System.Nullable(Of Decimal)
	
	Private _Credit As System.Nullable(Of Decimal)
	
	Private _Absence As System.Nullable(Of Decimal)
	
	Private _Note As String
	
	Private _Bonus As System.Nullable(Of Decimal)
	
	Private _ClosedArea As System.Nullable(Of Decimal)
	
	Private _Speciality As System.Nullable(Of Decimal)
	
	Private _IsCash As System.Nullable(Of Boolean)
	
	Private _Old As System.Nullable(Of Decimal)
	
	Private _CurrencyId As System.Nullable(Of Integer)
	
	Private _TransDays As System.Nullable(Of Integer)
	
	Private _IncomeTax As System.Nullable(Of Decimal)
	
	Private _CashMethod As System.Nullable(Of Integer)
	
	Private _IncDaman As System.Nullable(Of Boolean)
	
	Private _TblCurrency As EntityRef(Of TblCurrency)
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblMonthsPerYear As EntityRef(Of TblMonthsPerYear)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnMonthPerYearIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMonthPerYearIdChanged()
    End Sub
    Partial Private Sub OnBasicSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBasicSalaryChanged()
    End Sub
    Partial Private Sub OnNSSFSalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNSSFSalaryChanged()
    End Sub
    Partial Private Sub OnExcellenceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExcellenceChanged()
    End Sub
    Partial Private Sub OnFamilySalaryChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFamilySalaryChanged()
    End Sub
    Partial Private Sub OnTransPerDayChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTransPerDayChanged()
    End Sub
    Partial Private Sub OnOvertimeHrsChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOvertimeHrsChanged()
    End Sub
    Partial Private Sub OnOvertimeValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOvertimeValueChanged()
    End Sub
    Partial Private Sub OnExperienceInChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExperienceInChanged()
    End Sub
    Partial Private Sub OnExperienceOutChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnExperienceOutChanged()
    End Sub
    Partial Private Sub OnPositionValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPositionValueChanged()
    End Sub
    Partial Private Sub OnOtherPlusChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOtherPlusChanged()
    End Sub
    Partial Private Sub OnOtherMinusChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOtherMinusChanged()
    End Sub
    Partial Private Sub OnSchoolValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSchoolValueChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnCreditChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCreditChanged()
    End Sub
    Partial Private Sub OnAbsenceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAbsenceChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnBonusChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBonusChanged()
    End Sub
    Partial Private Sub OnClosedAreaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnClosedAreaChanged()
    End Sub
    Partial Private Sub OnSpecialityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSpecialityChanged()
    End Sub
    Partial Private Sub OnIsCashChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCashChanged()
    End Sub
    Partial Private Sub OnOldChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOldChanged()
    End Sub
    Partial Private Sub OnCurrencyIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCurrencyIdChanged()
    End Sub
    Partial Private Sub OnTransDaysChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTransDaysChanged()
    End Sub
    Partial Private Sub OnIncomeTaxChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnIncomeTaxChanged()
    End Sub
    Partial Private Sub OnCashMethodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCashMethodChanged()
    End Sub
    Partial Private Sub OnIncDamanChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIncDamanChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblCurrency = CType(Nothing, EntityRef(Of TblCurrency))
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblMonthsPerYear = CType(Nothing, EntityRef(Of TblMonthsPerYear))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthPerYearId", DbType:="Int")>  _
	Public Property MonthPerYearId() As System.Nullable(Of Integer)
		Get
			Return Me._MonthPerYearId
		End Get
		Set
			If (Me._MonthPerYearId.Equals(value) = false) Then
				If Me._TblMonthsPerYear.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMonthPerYearIdChanging(value)
				Me.SendPropertyChanging
				Me._MonthPerYearId = value
				Me.SendPropertyChanged("MonthPerYearId")
				Me.OnMonthPerYearIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BasicSalary", DbType:="Decimal(18,2)")>  _
	Public Property BasicSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._BasicSalary
		End Get
		Set
			If (Me._BasicSalary.Equals(value) = false) Then
				Me.OnBasicSalaryChanging(value)
				Me.SendPropertyChanging
				Me._BasicSalary = value
				Me.SendPropertyChanged("BasicSalary")
				Me.OnBasicSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSSFSalary", DbType:="Decimal(18,2)")>  _
	Public Property NSSFSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._NSSFSalary
		End Get
		Set
			If (Me._NSSFSalary.Equals(value) = false) Then
				Me.OnNSSFSalaryChanging(value)
				Me.SendPropertyChanging
				Me._NSSFSalary = value
				Me.SendPropertyChanged("NSSFSalary")
				Me.OnNSSFSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Excellence", DbType:="Decimal(18,2)")>  _
	Public Property Excellence() As System.Nullable(Of Decimal)
		Get
			Return Me._Excellence
		End Get
		Set
			If (Me._Excellence.Equals(value) = false) Then
				Me.OnExcellenceChanging(value)
				Me.SendPropertyChanging
				Me._Excellence = value
				Me.SendPropertyChanged("Excellence")
				Me.OnExcellenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilySalary", DbType:="Decimal(18,2)")>  _
	Public Property FamilySalary() As System.Nullable(Of Decimal)
		Get
			Return Me._FamilySalary
		End Get
		Set
			If (Me._FamilySalary.Equals(value) = false) Then
				Me.OnFamilySalaryChanging(value)
				Me.SendPropertyChanging
				Me._FamilySalary = value
				Me.SendPropertyChanged("FamilySalary")
				Me.OnFamilySalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransPerDay", DbType:="Decimal(18,2)")>  _
	Public Property TransPerDay() As System.Nullable(Of Decimal)
		Get
			Return Me._TransPerDay
		End Get
		Set
			If (Me._TransPerDay.Equals(value) = false) Then
				Me.OnTransPerDayChanging(value)
				Me.SendPropertyChanging
				Me._TransPerDay = value
				Me.SendPropertyChanged("TransPerDay")
				Me.OnTransPerDayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OvertimeHrs", DbType:="Decimal(18,2)")>  _
	Public Property OvertimeHrs() As System.Nullable(Of Decimal)
		Get
			Return Me._OvertimeHrs
		End Get
		Set
			If (Me._OvertimeHrs.Equals(value) = false) Then
				Me.OnOvertimeHrsChanging(value)
				Me.SendPropertyChanging
				Me._OvertimeHrs = value
				Me.SendPropertyChanged("OvertimeHrs")
				Me.OnOvertimeHrsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OvertimeValue", DbType:="Decimal(18,2)")>  _
	Public Property OvertimeValue() As System.Nullable(Of Decimal)
		Get
			Return Me._OvertimeValue
		End Get
		Set
			If (Me._OvertimeValue.Equals(value) = false) Then
				Me.OnOvertimeValueChanging(value)
				Me.SendPropertyChanging
				Me._OvertimeValue = value
				Me.SendPropertyChanged("OvertimeValue")
				Me.OnOvertimeValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceIn", DbType:="Decimal(18,2)")>  _
	Public Property ExperienceIn() As System.Nullable(Of Decimal)
		Get
			Return Me._ExperienceIn
		End Get
		Set
			If (Me._ExperienceIn.Equals(value) = false) Then
				Me.OnExperienceInChanging(value)
				Me.SendPropertyChanging
				Me._ExperienceIn = value
				Me.SendPropertyChanged("ExperienceIn")
				Me.OnExperienceInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceOut", DbType:="Decimal(18,2)")>  _
	Public Property ExperienceOut() As System.Nullable(Of Decimal)
		Get
			Return Me._ExperienceOut
		End Get
		Set
			If (Me._ExperienceOut.Equals(value) = false) Then
				Me.OnExperienceOutChanging(value)
				Me.SendPropertyChanging
				Me._ExperienceOut = value
				Me.SendPropertyChanged("ExperienceOut")
				Me.OnExperienceOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionValue", DbType:="Decimal(18,2)")>  _
	Public Property PositionValue() As System.Nullable(Of Decimal)
		Get
			Return Me._PositionValue
		End Get
		Set
			If (Me._PositionValue.Equals(value) = false) Then
				Me.OnPositionValueChanging(value)
				Me.SendPropertyChanging
				Me._PositionValue = value
				Me.SendPropertyChanged("PositionValue")
				Me.OnPositionValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtherPlus", DbType:="Decimal(18,2)")>  _
	Public Property OtherPlus() As System.Nullable(Of Decimal)
		Get
			Return Me._OtherPlus
		End Get
		Set
			If (Me._OtherPlus.Equals(value) = false) Then
				Me.OnOtherPlusChanging(value)
				Me.SendPropertyChanging
				Me._OtherPlus = value
				Me.SendPropertyChanged("OtherPlus")
				Me.OnOtherPlusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtherMinus", DbType:="Decimal(18,2)")>  _
	Public Property OtherMinus() As System.Nullable(Of Decimal)
		Get
			Return Me._OtherMinus
		End Get
		Set
			If (Me._OtherMinus.Equals(value) = false) Then
				Me.OnOtherMinusChanging(value)
				Me.SendPropertyChanging
				Me._OtherMinus = value
				Me.SendPropertyChanged("OtherMinus")
				Me.OnOtherMinusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolValue", DbType:="Decimal(18,2)")>  _
	Public Property SchoolValue() As System.Nullable(Of Decimal)
		Get
			Return Me._SchoolValue
		End Get
		Set
			If (Me._SchoolValue.Equals(value) = false) Then
				Me.OnSchoolValueChanging(value)
				Me.SendPropertyChanging
				Me._SchoolValue = value
				Me.SendPropertyChanged("SchoolValue")
				Me.OnSchoolValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="Decimal(18,2)")>  _
	Public Property Phone() As System.Nullable(Of Decimal)
		Get
			Return Me._Phone
		End Get
		Set
			If (Me._Phone.Equals(value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credit", DbType:="Decimal(18,2)")>  _
	Public Property Credit() As System.Nullable(Of Decimal)
		Get
			Return Me._Credit
		End Get
		Set
			If (Me._Credit.Equals(value) = false) Then
				Me.OnCreditChanging(value)
				Me.SendPropertyChanging
				Me._Credit = value
				Me.SendPropertyChanged("Credit")
				Me.OnCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Absence", DbType:="Decimal(18,2)")>  _
	Public Property Absence() As System.Nullable(Of Decimal)
		Get
			Return Me._Absence
		End Get
		Set
			If (Me._Absence.Equals(value) = false) Then
				Me.OnAbsenceChanging(value)
				Me.SendPropertyChanging
				Me._Absence = value
				Me.SendPropertyChanged("Absence")
				Me.OnAbsenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bonus", DbType:="Decimal(18,2)")>  _
	Public Property Bonus() As System.Nullable(Of Decimal)
		Get
			Return Me._Bonus
		End Get
		Set
			If (Me._Bonus.Equals(value) = false) Then
				Me.OnBonusChanging(value)
				Me.SendPropertyChanging
				Me._Bonus = value
				Me.SendPropertyChanged("Bonus")
				Me.OnBonusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClosedArea", DbType:="Decimal(18,2)")>  _
	Public Property ClosedArea() As System.Nullable(Of Decimal)
		Get
			Return Me._ClosedArea
		End Get
		Set
			If (Me._ClosedArea.Equals(value) = false) Then
				Me.OnClosedAreaChanging(value)
				Me.SendPropertyChanging
				Me._ClosedArea = value
				Me.SendPropertyChanged("ClosedArea")
				Me.OnClosedAreaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Speciality", DbType:="Decimal(18,2)")>  _
	Public Property Speciality() As System.Nullable(Of Decimal)
		Get
			Return Me._Speciality
		End Get
		Set
			If (Me._Speciality.Equals(value) = false) Then
				Me.OnSpecialityChanging(value)
				Me.SendPropertyChanging
				Me._Speciality = value
				Me.SendPropertyChanged("Speciality")
				Me.OnSpecialityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCash", DbType:="Bit")>  _
	Public Property IsCash() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCash
		End Get
		Set
			If (Me._IsCash.Equals(value) = false) Then
				Me.OnIsCashChanging(value)
				Me.SendPropertyChanging
				Me._IsCash = value
				Me.SendPropertyChanged("IsCash")
				Me.OnIsCashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Old", DbType:="Decimal(18,2)")>  _
	Public Property Old() As System.Nullable(Of Decimal)
		Get
			Return Me._Old
		End Get
		Set
			If (Me._Old.Equals(value) = false) Then
				Me.OnOldChanging(value)
				Me.SendPropertyChanging
				Me._Old = value
				Me.SendPropertyChanged("Old")
				Me.OnOldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyId", DbType:="Int")>  _
	Public Property CurrencyId() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyId
		End Get
		Set
			If (Me._CurrencyId.Equals(value) = false) Then
				If Me._TblCurrency.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCurrencyIdChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyId = value
				Me.SendPropertyChanged("CurrencyId")
				Me.OnCurrencyIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransDays", DbType:="Int")>  _
	Public Property TransDays() As System.Nullable(Of Integer)
		Get
			Return Me._TransDays
		End Get
		Set
			If (Me._TransDays.Equals(value) = false) Then
				Me.OnTransDaysChanging(value)
				Me.SendPropertyChanging
				Me._TransDays = value
				Me.SendPropertyChanged("TransDays")
				Me.OnTransDaysChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncomeTax", DbType:="Decimal(18,2)")>  _
	Public Property IncomeTax() As System.Nullable(Of Decimal)
		Get
			Return Me._IncomeTax
		End Get
		Set
			If (Me._IncomeTax.Equals(value) = false) Then
				Me.OnIncomeTaxChanging(value)
				Me.SendPropertyChanging
				Me._IncomeTax = value
				Me.SendPropertyChanged("IncomeTax")
				Me.OnIncomeTaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CashMethod", DbType:="Int")>  _
	Public Property CashMethod() As System.Nullable(Of Integer)
		Get
			Return Me._CashMethod
		End Get
		Set
			If (Me._CashMethod.Equals(value) = false) Then
				Me.OnCashMethodChanging(value)
				Me.SendPropertyChanging
				Me._CashMethod = value
				Me.SendPropertyChanged("CashMethod")
				Me.OnCashMethodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncDaman", DbType:="Bit")>  _
	Public Property IncDaman() As System.Nullable(Of Boolean)
		Get
			Return Me._IncDaman
		End Get
		Set
			If (Me._IncDaman.Equals(value) = false) Then
				Me.OnIncDamanChanging(value)
				Me.SendPropertyChanging
				Me._IncDaman = value
				Me.SendPropertyChanged("IncDaman")
				Me.OnIncDamanChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblCurrency_TblEmployeeSalaryHistory", Storage:="_TblCurrency", ThisKey:="CurrencyId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblCurrency() As TblCurrency
		Get
			Return Me._TblCurrency.Entity
		End Get
		Set
			Dim previousValue As TblCurrency = Me._TblCurrency.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblCurrency.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblCurrency.Entity = Nothing
					previousValue.TblEmployeeSalaryHistories.Remove(Me)
				End If
				Me._TblCurrency.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalaryHistories.Add(Me)
					Me._CurrencyId = value.Id
				Else
					Me._CurrencyId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblCurrency")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeSalaryHistory", Storage:="_TblEmployee", ThisKey:="EmployeeId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeeSalaryHistories.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalaryHistories.Add(Me)
					Me._EmployeeId = value.Id
				Else
					Me._EmployeeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblMonthsPerYear_TblEmployeeSalaryHistory", Storage:="_TblMonthsPerYear", ThisKey:="MonthPerYearId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblMonthsPerYear() As TblMonthsPerYear
		Get
			Return Me._TblMonthsPerYear.Entity
		End Get
		Set
			Dim previousValue As TblMonthsPerYear = Me._TblMonthsPerYear.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblMonthsPerYear.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblMonthsPerYear.Entity = Nothing
					previousValue.TblEmployeeSalaryHistories.Remove(Me)
				End If
				Me._TblMonthsPerYear.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalaryHistories.Add(Me)
					Me._MonthPerYearId = value.Id
				Else
					Me._MonthPerYearId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblMonthsPerYear")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblUnits")>  _
Partial Public Class TblUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UnitID As Integer
	
	Private _Unit As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUnitIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnitIDChanged()
    End Sub
    Partial Private Sub OnUnitChanging(value As String)
    End Sub
    Partial Private Sub OnUnitChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property UnitID() As Integer
		Get
			Return Me._UnitID
		End Get
		Set
			If ((Me._UnitID = value)  _
						= false) Then
				Me.OnUnitIDChanging(value)
				Me.SendPropertyChanging
				Me._UnitID = value
				Me.SendPropertyChanged("UnitID")
				Me.OnUnitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit", DbType:="VarChar(50)")>  _
	Public Property Unit() As String
		Get
			Return Me._Unit
		End Get
		Set
			If (String.Equals(Me._Unit, value) = false) Then
				Me.OnUnitChanging(value)
				Me.SendPropertyChanging
				Me._Unit = value
				Me.SendPropertyChanged("Unit")
				Me.OnUnitChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblSalaryCategories")>  _
Partial Public Class TblSalaryCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SalaryCatID As Integer
	
	Private _SalaryCategory As String
	
	Private _TblEmployeeSalary2s As EntitySet(Of TblEmployeeSalary2)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalaryCatIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalaryCatIDChanged()
    End Sub
    Partial Private Sub OnSalaryCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnSalaryCategoryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployeeSalary2s = New EntitySet(Of TblEmployeeSalary2)(AddressOf Me.attach_TblEmployeeSalary2s, AddressOf Me.detach_TblEmployeeSalary2s)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalaryCatID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SalaryCatID() As Integer
		Get
			Return Me._SalaryCatID
		End Get
		Set
			If ((Me._SalaryCatID = value)  _
						= false) Then
				Me.OnSalaryCatIDChanging(value)
				Me.SendPropertyChanging
				Me._SalaryCatID = value
				Me.SendPropertyChanged("SalaryCatID")
				Me.OnSalaryCatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalaryCategory", DbType:="NVarChar(MAX)")>  _
	Public Property SalaryCategory() As String
		Get
			Return Me._SalaryCategory
		End Get
		Set
			If (String.Equals(Me._SalaryCategory, value) = false) Then
				Me.OnSalaryCategoryChanging(value)
				Me.SendPropertyChanging
				Me._SalaryCategory = value
				Me.SendPropertyChanged("SalaryCategory")
				Me.OnSalaryCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblSalaryCategory_TblEmployeeSalary2", Storage:="_TblEmployeeSalary2s", ThisKey:="SalaryCatID", OtherKey:="SalaryCatID")>  _
	Public Property TblEmployeeSalary2s() As EntitySet(Of TblEmployeeSalary2)
		Get
			Return Me._TblEmployeeSalary2s
		End Get
		Set
			Me._TblEmployeeSalary2s.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblEmployeeSalary2s(ByVal entity As TblEmployeeSalary2)
		Me.SendPropertyChanging
		entity.TblSalaryCategory = Me
	End Sub
	
	Private Sub detach_TblEmployeeSalary2s(ByVal entity As TblEmployeeSalary2)
		Me.SendPropertyChanging
		entity.TblSalaryCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblSetting")>  _
Partial Public Class TblSetting
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ApplicantStatusId As System.Nullable(Of Integer)
	
	Private _EmployeeStatusId As System.Nullable(Of Integer)
	
	Private _TraineeStatutsId As System.Nullable(Of Integer)
	
	Private _UnemploymentStatusId As System.Nullable(Of Integer)
	
	Private _RetiredStatusId As System.Nullable(Of Integer)
	
	Private _HolidayTypeId As System.Nullable(Of Integer)
	
	Private _YearlyVacationId As System.Nullable(Of Integer)
	
	Private _TraineePositionId As System.Nullable(Of Integer)
	
	Private _DefaultImage As System.Data.Linq.Binary
	
	Private _TblPosition As EntityRef(Of TblPosition)
	
	Private _TblStatus As EntityRef(Of TblStatus)
	
	Private _TblStatus1 As EntityRef(Of TblStatus)
	
	Private _TblStatus2 As EntityRef(Of TblStatus)
	
	Private _TblStatus3 As EntityRef(Of TblStatus)
	
	Private _TblStatus4 As EntityRef(Of TblStatus)
	
	Private _TblVacation As EntityRef(Of TblVacation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnApplicantStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantStatusIdChanged()
    End Sub
    Partial Private Sub OnEmployeeStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeStatusIdChanged()
    End Sub
    Partial Private Sub OnTraineeStatutsIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTraineeStatutsIdChanged()
    End Sub
    Partial Private Sub OnUnemploymentStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUnemploymentStatusIdChanged()
    End Sub
    Partial Private Sub OnRetiredStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRetiredStatusIdChanged()
    End Sub
    Partial Private Sub OnHolidayTypeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHolidayTypeIdChanged()
    End Sub
    Partial Private Sub OnYearlyVacationIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearlyVacationIdChanged()
    End Sub
    Partial Private Sub OnTraineePositionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTraineePositionIdChanged()
    End Sub
    Partial Private Sub OnDefaultImageChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnDefaultImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblPosition = CType(Nothing, EntityRef(Of TblPosition))
		Me._TblStatus = CType(Nothing, EntityRef(Of TblStatus))
		Me._TblStatus1 = CType(Nothing, EntityRef(Of TblStatus))
		Me._TblStatus2 = CType(Nothing, EntityRef(Of TblStatus))
		Me._TblStatus3 = CType(Nothing, EntityRef(Of TblStatus))
		Me._TblStatus4 = CType(Nothing, EntityRef(Of TblStatus))
		Me._TblVacation = CType(Nothing, EntityRef(Of TblVacation))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantStatusId", DbType:="Int")>  _
	Public Property ApplicantStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantStatusId
		End Get
		Set
			If (Me._ApplicantStatusId.Equals(value) = false) Then
				If Me._TblStatus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantStatusId = value
				Me.SendPropertyChanged("ApplicantStatusId")
				Me.OnApplicantStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeStatusId", DbType:="Int")>  _
	Public Property EmployeeStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeStatusId
		End Get
		Set
			If (Me._EmployeeStatusId.Equals(value) = false) Then
				If Me._TblStatus1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeStatusId = value
				Me.SendPropertyChanged("EmployeeStatusId")
				Me.OnEmployeeStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TraineeStatutsId", DbType:="Int")>  _
	Public Property TraineeStatutsId() As System.Nullable(Of Integer)
		Get
			Return Me._TraineeStatutsId
		End Get
		Set
			If (Me._TraineeStatutsId.Equals(value) = false) Then
				If Me._TblStatus3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTraineeStatutsIdChanging(value)
				Me.SendPropertyChanging
				Me._TraineeStatutsId = value
				Me.SendPropertyChanged("TraineeStatutsId")
				Me.OnTraineeStatutsIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnemploymentStatusId", DbType:="Int")>  _
	Public Property UnemploymentStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._UnemploymentStatusId
		End Get
		Set
			If (Me._UnemploymentStatusId.Equals(value) = false) Then
				If Me._TblStatus4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUnemploymentStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._UnemploymentStatusId = value
				Me.SendPropertyChanged("UnemploymentStatusId")
				Me.OnUnemploymentStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RetiredStatusId", DbType:="Int")>  _
	Public Property RetiredStatusId() As System.Nullable(Of Integer)
		Get
			Return Me._RetiredStatusId
		End Get
		Set
			If (Me._RetiredStatusId.Equals(value) = false) Then
				If Me._TblStatus2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRetiredStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._RetiredStatusId = value
				Me.SendPropertyChanged("RetiredStatusId")
				Me.OnRetiredStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HolidayTypeId", DbType:="Int")>  _
	Public Property HolidayTypeId() As System.Nullable(Of Integer)
		Get
			Return Me._HolidayTypeId
		End Get
		Set
			If (Me._HolidayTypeId.Equals(value) = false) Then
				Me.OnHolidayTypeIdChanging(value)
				Me.SendPropertyChanging
				Me._HolidayTypeId = value
				Me.SendPropertyChanged("HolidayTypeId")
				Me.OnHolidayTypeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YearlyVacationId", DbType:="Int")>  _
	Public Property YearlyVacationId() As System.Nullable(Of Integer)
		Get
			Return Me._YearlyVacationId
		End Get
		Set
			If (Me._YearlyVacationId.Equals(value) = false) Then
				If Me._TblVacation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnYearlyVacationIdChanging(value)
				Me.SendPropertyChanging
				Me._YearlyVacationId = value
				Me.SendPropertyChanged("YearlyVacationId")
				Me.OnYearlyVacationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TraineePositionId", DbType:="Int")>  _
	Public Property TraineePositionId() As System.Nullable(Of Integer)
		Get
			Return Me._TraineePositionId
		End Get
		Set
			If (Me._TraineePositionId.Equals(value) = false) Then
				If Me._TblPosition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTraineePositionIdChanging(value)
				Me.SendPropertyChanging
				Me._TraineePositionId = value
				Me.SendPropertyChanged("TraineePositionId")
				Me.OnTraineePositionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultImage", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property DefaultImage() As System.Data.Linq.Binary
		Get
			Return Me._DefaultImage
		End Get
		Set
			If (Object.Equals(Me._DefaultImage, value) = false) Then
				Me.OnDefaultImageChanging(value)
				Me.SendPropertyChanging
				Me._DefaultImage = value
				Me.SendPropertyChanged("DefaultImage")
				Me.OnDefaultImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblPosition_TblSetting", Storage:="_TblPosition", ThisKey:="TraineePositionId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblPosition() As TblPosition
		Get
			Return Me._TblPosition.Entity
		End Get
		Set
			Dim previousValue As TblPosition = Me._TblPosition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblPosition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblPosition.Entity = Nothing
					previousValue.TblSettings.Remove(Me)
				End If
				Me._TblPosition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings.Add(Me)
					Me._TraineePositionId = value.Id
				Else
					Me._TraineePositionId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblPosition")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting", Storage:="_TblStatus", ThisKey:="ApplicantStatusId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblStatus() As TblStatus
		Get
			Return Me._TblStatus.Entity
		End Get
		Set
			Dim previousValue As TblStatus = Me._TblStatus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblStatus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblStatus.Entity = Nothing
					previousValue.TblSettings.Remove(Me)
				End If
				Me._TblStatus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings.Add(Me)
					Me._ApplicantStatusId = value.Id
				Else
					Me._ApplicantStatusId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblStatus")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting1", Storage:="_TblStatus1", ThisKey:="EmployeeStatusId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblStatus1() As TblStatus
		Get
			Return Me._TblStatus1.Entity
		End Get
		Set
			Dim previousValue As TblStatus = Me._TblStatus1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblStatus1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblStatus1.Entity = Nothing
					previousValue.TblSettings1.Remove(Me)
				End If
				Me._TblStatus1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings1.Add(Me)
					Me._EmployeeStatusId = value.Id
				Else
					Me._EmployeeStatusId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblStatus1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting2", Storage:="_TblStatus2", ThisKey:="RetiredStatusId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblStatus2() As TblStatus
		Get
			Return Me._TblStatus2.Entity
		End Get
		Set
			Dim previousValue As TblStatus = Me._TblStatus2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblStatus2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblStatus2.Entity = Nothing
					previousValue.TblSettings2.Remove(Me)
				End If
				Me._TblStatus2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings2.Add(Me)
					Me._RetiredStatusId = value.Id
				Else
					Me._RetiredStatusId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblStatus2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting3", Storage:="_TblStatus3", ThisKey:="TraineeStatutsId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblStatus3() As TblStatus
		Get
			Return Me._TblStatus3.Entity
		End Get
		Set
			Dim previousValue As TblStatus = Me._TblStatus3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblStatus3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblStatus3.Entity = Nothing
					previousValue.TblSettings3.Remove(Me)
				End If
				Me._TblStatus3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings3.Add(Me)
					Me._TraineeStatutsId = value.Id
				Else
					Me._TraineeStatutsId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblStatus3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblSetting4", Storage:="_TblStatus4", ThisKey:="UnemploymentStatusId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblStatus4() As TblStatus
		Get
			Return Me._TblStatus4.Entity
		End Get
		Set
			Dim previousValue As TblStatus = Me._TblStatus4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblStatus4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblStatus4.Entity = Nothing
					previousValue.TblSettings4.Remove(Me)
				End If
				Me._TblStatus4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings4.Add(Me)
					Me._UnemploymentStatusId = value.Id
				Else
					Me._UnemploymentStatusId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblStatus4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblVacation_TblSetting", Storage:="_TblVacation", ThisKey:="YearlyVacationId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblVacation() As TblVacation
		Get
			Return Me._TblVacation.Entity
		End Get
		Set
			Dim previousValue As TblVacation = Me._TblVacation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblVacation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblVacation.Entity = Nothing
					previousValue.TblSettings.Remove(Me)
				End If
				Me._TblVacation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblSettings.Add(Me)
					Me._YearlyVacationId = value.Id
				Else
					Me._YearlyVacationId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblVacation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblApplicant")>  _
Partial Public Class TblApplicant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Mobile As String
	
	Private _PhoneNumber As String
	
	Private _Gender As String
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _Age As String
	
	Private _MaritalStatus As String
	
	Private _Nationality As String
	
	Private _NumberOfKids As System.Nullable(Of Integer)
	
	Private _BloodId As System.Nullable(Of Integer)
	
	Private _ApplicationDate As System.Nullable(Of Date)
	
	Private _MotherName As String
	
	Private _PlaceOfBirth As String
	
	Private _RecordNumber As System.Nullable(Of Integer)
	
	Private _RecordPlace As String
	
	Private _Mohafaza As String
	
	Private _Kadaa As String
	
	Private _Country As String
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _ApplicantNumber As System.Nullable(Of Decimal)
	
	Private _TblAddresses As EntitySet(Of TblAddress)
	
	Private _TblApplicantMedicalIssues As EntitySet(Of TblApplicantMedicalIssue)
	
	Private _TblApplicantSkills As EntitySet(Of TblApplicantSkill)
	
	Private _TblAttachments As EntitySet(Of TblAttachment)
	
	Private _TblEducations As EntitySet(Of TblEducation)
	
	Private _TblExperienceHistories As EntitySet(Of TblExperienceHistory)
	
	Private _TblLanguages As EntitySet(Of TblLanguage)
	
	Private _TblRelativeReferences As EntitySet(Of TblRelativeReference)
	
	Private _TblRequiredJobs As EntitySet(Of TblRequiredJob)
	
	Private _TblWifeHusbands As EntitySet(Of TblWifeHusband)
	
	Private _TblWorkShops As EntitySet(Of TblWorkShop)
	
	Private _TblEmployees As EntitySet(Of TblEmployee)
	
	Private _TblFamilyMembers As EntitySet(Of TblFamilyMember)
	
	Private _TblTrainees As EntitySet(Of TblTrainee)
	
	Private _TblBlood As EntityRef(Of TblBlood)
	
	Private _TblStatus As EntityRef(Of TblStatus)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnDateOfBirthChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfBirthChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnMaritalStatusChanging(value As String)
    End Sub
    Partial Private Sub OnMaritalStatusChanged()
    End Sub
    Partial Private Sub OnNationalityChanging(value As String)
    End Sub
    Partial Private Sub OnNationalityChanged()
    End Sub
    Partial Private Sub OnNumberOfKidsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumberOfKidsChanged()
    End Sub
    Partial Private Sub OnBloodIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBloodIdChanged()
    End Sub
    Partial Private Sub OnApplicationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApplicationDateChanged()
    End Sub
    Partial Private Sub OnMotherNameChanging(value As String)
    End Sub
    Partial Private Sub OnMotherNameChanged()
    End Sub
    Partial Private Sub OnPlaceOfBirthChanging(value As String)
    End Sub
    Partial Private Sub OnPlaceOfBirthChanged()
    End Sub
    Partial Private Sub OnRecordNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRecordNumberChanged()
    End Sub
    Partial Private Sub OnRecordPlaceChanging(value As String)
    End Sub
    Partial Private Sub OnRecordPlaceChanged()
    End Sub
    Partial Private Sub OnMohafazaChanging(value As String)
    End Sub
    Partial Private Sub OnMohafazaChanged()
    End Sub
    Partial Private Sub OnKadaaChanging(value As String)
    End Sub
    Partial Private Sub OnKadaaChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnStatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusIdChanged()
    End Sub
    Partial Private Sub OnApplicantNumberChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnApplicantNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblAddresses = New EntitySet(Of TblAddress)(AddressOf Me.attach_TblAddresses, AddressOf Me.detach_TblAddresses)
		Me._TblApplicantMedicalIssues = New EntitySet(Of TblApplicantMedicalIssue)(AddressOf Me.attach_TblApplicantMedicalIssues, AddressOf Me.detach_TblApplicantMedicalIssues)
		Me._TblApplicantSkills = New EntitySet(Of TblApplicantSkill)(AddressOf Me.attach_TblApplicantSkills, AddressOf Me.detach_TblApplicantSkills)
		Me._TblAttachments = New EntitySet(Of TblAttachment)(AddressOf Me.attach_TblAttachments, AddressOf Me.detach_TblAttachments)
		Me._TblEducations = New EntitySet(Of TblEducation)(AddressOf Me.attach_TblEducations, AddressOf Me.detach_TblEducations)
		Me._TblExperienceHistories = New EntitySet(Of TblExperienceHistory)(AddressOf Me.attach_TblExperienceHistories, AddressOf Me.detach_TblExperienceHistories)
		Me._TblLanguages = New EntitySet(Of TblLanguage)(AddressOf Me.attach_TblLanguages, AddressOf Me.detach_TblLanguages)
		Me._TblRelativeReferences = New EntitySet(Of TblRelativeReference)(AddressOf Me.attach_TblRelativeReferences, AddressOf Me.detach_TblRelativeReferences)
		Me._TblRequiredJobs = New EntitySet(Of TblRequiredJob)(AddressOf Me.attach_TblRequiredJobs, AddressOf Me.detach_TblRequiredJobs)
		Me._TblWifeHusbands = New EntitySet(Of TblWifeHusband)(AddressOf Me.attach_TblWifeHusbands, AddressOf Me.detach_TblWifeHusbands)
		Me._TblWorkShops = New EntitySet(Of TblWorkShop)(AddressOf Me.attach_TblWorkShops, AddressOf Me.detach_TblWorkShops)
		Me._TblEmployees = New EntitySet(Of TblEmployee)(AddressOf Me.attach_TblEmployees, AddressOf Me.detach_TblEmployees)
		Me._TblFamilyMembers = New EntitySet(Of TblFamilyMember)(AddressOf Me.attach_TblFamilyMembers, AddressOf Me.detach_TblFamilyMembers)
		Me._TblTrainees = New EntitySet(Of TblTrainee)(AddressOf Me.attach_TblTrainees, AddressOf Me.detach_TblTrainees)
		Me._TblBlood = CType(Nothing, EntityRef(Of TblBlood))
		Me._TblStatus = CType(Nothing, EntityRef(Of TblStatus))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me.OnDateOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateOfBirth = value
				Me.SendPropertyChanged("DateOfBirth")
				Me.OnDateOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="VarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="NVarChar(50)")>  _
	Public Property MaritalStatus() As String
		Get
			Return Me._MaritalStatus
		End Get
		Set
			If (String.Equals(Me._MaritalStatus, value) = false) Then
				Me.OnMaritalStatusChanging(value)
				Me.SendPropertyChanging
				Me._MaritalStatus = value
				Me.SendPropertyChanged("MaritalStatus")
				Me.OnMaritalStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(50)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me.OnNationalityChanging(value)
				Me.SendPropertyChanging
				Me._Nationality = value
				Me.SendPropertyChanged("Nationality")
				Me.OnNationalityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfKids", DbType:="Int")>  _
	Public Property NumberOfKids() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfKids
		End Get
		Set
			If (Me._NumberOfKids.Equals(value) = false) Then
				Me.OnNumberOfKidsChanging(value)
				Me.SendPropertyChanging
				Me._NumberOfKids = value
				Me.SendPropertyChanged("NumberOfKids")
				Me.OnNumberOfKidsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodId", DbType:="Int")>  _
	Public Property BloodId() As System.Nullable(Of Integer)
		Get
			Return Me._BloodId
		End Get
		Set
			If (Me._BloodId.Equals(value) = false) Then
				If Me._TblBlood.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBloodIdChanging(value)
				Me.SendPropertyChanging
				Me._BloodId = value
				Me.SendPropertyChanged("BloodId")
				Me.OnBloodIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDate", DbType:="Date")>  _
	Public Property ApplicationDate() As System.Nullable(Of Date)
		Get
			Return Me._ApplicationDate
		End Get
		Set
			If (Me._ApplicationDate.Equals(value) = false) Then
				Me.OnApplicationDateChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDate = value
				Me.SendPropertyChanged("ApplicationDate")
				Me.OnApplicationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotherName", DbType:="NVarChar(50)")>  _
	Public Property MotherName() As String
		Get
			Return Me._MotherName
		End Get
		Set
			If (String.Equals(Me._MotherName, value) = false) Then
				Me.OnMotherNameChanging(value)
				Me.SendPropertyChanging
				Me._MotherName = value
				Me.SendPropertyChanged("MotherName")
				Me.OnMotherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlaceOfBirth", DbType:="NVarChar(50)")>  _
	Public Property PlaceOfBirth() As String
		Get
			Return Me._PlaceOfBirth
		End Get
		Set
			If (String.Equals(Me._PlaceOfBirth, value) = false) Then
				Me.OnPlaceOfBirthChanging(value)
				Me.SendPropertyChanging
				Me._PlaceOfBirth = value
				Me.SendPropertyChanged("PlaceOfBirth")
				Me.OnPlaceOfBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordNumber", DbType:="Int")>  _
	Public Property RecordNumber() As System.Nullable(Of Integer)
		Get
			Return Me._RecordNumber
		End Get
		Set
			If (Me._RecordNumber.Equals(value) = false) Then
				Me.OnRecordNumberChanging(value)
				Me.SendPropertyChanging
				Me._RecordNumber = value
				Me.SendPropertyChanged("RecordNumber")
				Me.OnRecordNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordPlace", DbType:="NVarChar(50)")>  _
	Public Property RecordPlace() As String
		Get
			Return Me._RecordPlace
		End Get
		Set
			If (String.Equals(Me._RecordPlace, value) = false) Then
				Me.OnRecordPlaceChanging(value)
				Me.SendPropertyChanging
				Me._RecordPlace = value
				Me.SendPropertyChanged("RecordPlace")
				Me.OnRecordPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mohafaza", DbType:="NVarChar(50)")>  _
	Public Property Mohafaza() As String
		Get
			Return Me._Mohafaza
		End Get
		Set
			If (String.Equals(Me._Mohafaza, value) = false) Then
				Me.OnMohafazaChanging(value)
				Me.SendPropertyChanging
				Me._Mohafaza = value
				Me.SendPropertyChanged("Mohafaza")
				Me.OnMohafazaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Kadaa", DbType:="NVarChar(50)")>  _
	Public Property Kadaa() As String
		Get
			Return Me._Kadaa
		End Get
		Set
			If (String.Equals(Me._Kadaa, value) = false) Then
				Me.OnKadaaChanging(value)
				Me.SendPropertyChanging
				Me._Kadaa = value
				Me.SendPropertyChanged("Kadaa")
				Me.OnKadaaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				If Me._TblStatus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStatusIdChanging(value)
				Me.SendPropertyChanging
				Me._StatusId = value
				Me.SendPropertyChanged("StatusId")
				Me.OnStatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantNumber", DbType:="Decimal(38,0)")>  _
	Public Property ApplicantNumber() As System.Nullable(Of Decimal)
		Get
			Return Me._ApplicantNumber
		End Get
		Set
			If (Me._ApplicantNumber.Equals(value) = false) Then
				Me.OnApplicantNumberChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantNumber = value
				Me.SendPropertyChanged("ApplicantNumber")
				Me.OnApplicantNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblAddress", Storage:="_TblAddresses", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblAddresses() As EntitySet(Of TblAddress)
		Get
			Return Me._TblAddresses
		End Get
		Set
			Me._TblAddresses.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblApplicantMedicalIssue", Storage:="_TblApplicantMedicalIssues", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblApplicantMedicalIssues() As EntitySet(Of TblApplicantMedicalIssue)
		Get
			Return Me._TblApplicantMedicalIssues
		End Get
		Set
			Me._TblApplicantMedicalIssues.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblApplicantSkill", Storage:="_TblApplicantSkills", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblApplicantSkills() As EntitySet(Of TblApplicantSkill)
		Get
			Return Me._TblApplicantSkills
		End Get
		Set
			Me._TblApplicantSkills.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblAttachment", Storage:="_TblAttachments", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblAttachments() As EntitySet(Of TblAttachment)
		Get
			Return Me._TblAttachments
		End Get
		Set
			Me._TblAttachments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblEducation", Storage:="_TblEducations", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblEducations() As EntitySet(Of TblEducation)
		Get
			Return Me._TblEducations
		End Get
		Set
			Me._TblEducations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblExperienceHistory", Storage:="_TblExperienceHistories", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblExperienceHistories() As EntitySet(Of TblExperienceHistory)
		Get
			Return Me._TblExperienceHistories
		End Get
		Set
			Me._TblExperienceHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblLanguage", Storage:="_TblLanguages", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblLanguages() As EntitySet(Of TblLanguage)
		Get
			Return Me._TblLanguages
		End Get
		Set
			Me._TblLanguages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblRelativeReference", Storage:="_TblRelativeReferences", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblRelativeReferences() As EntitySet(Of TblRelativeReference)
		Get
			Return Me._TblRelativeReferences
		End Get
		Set
			Me._TblRelativeReferences.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblRequiredJob", Storage:="_TblRequiredJobs", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblRequiredJobs() As EntitySet(Of TblRequiredJob)
		Get
			Return Me._TblRequiredJobs
		End Get
		Set
			Me._TblRequiredJobs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblWifeHusband", Storage:="_TblWifeHusbands", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblWifeHusbands() As EntitySet(Of TblWifeHusband)
		Get
			Return Me._TblWifeHusbands
		End Get
		Set
			Me._TblWifeHusbands.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblWorkShop", Storage:="_TblWorkShops", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblWorkShops() As EntitySet(Of TblWorkShop)
		Get
			Return Me._TblWorkShops
		End Get
		Set
			Me._TblWorkShops.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblEmployee", Storage:="_TblEmployees", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblEmployees() As EntitySet(Of TblEmployee)
		Get
			Return Me._TblEmployees
		End Get
		Set
			Me._TblEmployees.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblFamilyMember", Storage:="_TblFamilyMembers", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblFamilyMembers() As EntitySet(Of TblFamilyMember)
		Get
			Return Me._TblFamilyMembers
		End Get
		Set
			Me._TblFamilyMembers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblTrainee", Storage:="_TblTrainees", ThisKey:="Id", OtherKey:="ApplicantId")>  _
	Public Property TblTrainees() As EntitySet(Of TblTrainee)
		Get
			Return Me._TblTrainees
		End Get
		Set
			Me._TblTrainees.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblBlood_TblApplicant", Storage:="_TblBlood", ThisKey:="BloodId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblBlood() As TblBlood
		Get
			Return Me._TblBlood.Entity
		End Get
		Set
			Dim previousValue As TblBlood = Me._TblBlood.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblBlood.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblBlood.Entity = Nothing
					previousValue.TblApplicants.Remove(Me)
				End If
				Me._TblBlood.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblApplicants.Add(Me)
					Me._BloodId = value.Id
				Else
					Me._BloodId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblBlood")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblStatus_TblApplicant", Storage:="_TblStatus", ThisKey:="StatusId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblStatus() As TblStatus
		Get
			Return Me._TblStatus.Entity
		End Get
		Set
			Dim previousValue As TblStatus = Me._TblStatus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblStatus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblStatus.Entity = Nothing
					previousValue.TblApplicants.Remove(Me)
				End If
				Me._TblStatus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblApplicants.Add(Me)
					Me._StatusId = value.Id
				Else
					Me._StatusId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblStatus")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblAddresses(ByVal entity As TblAddress)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblAddresses(ByVal entity As TblAddress)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblApplicantMedicalIssues(ByVal entity As TblApplicantMedicalIssue)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblApplicantMedicalIssues(ByVal entity As TblApplicantMedicalIssue)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblApplicantSkills(ByVal entity As TblApplicantSkill)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblApplicantSkills(ByVal entity As TblApplicantSkill)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblAttachments(ByVal entity As TblAttachment)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblAttachments(ByVal entity As TblAttachment)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblEducations(ByVal entity As TblEducation)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblEducations(ByVal entity As TblEducation)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblExperienceHistories(ByVal entity As TblExperienceHistory)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblExperienceHistories(ByVal entity As TblExperienceHistory)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblLanguages(ByVal entity As TblLanguage)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblLanguages(ByVal entity As TblLanguage)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblRelativeReferences(ByVal entity As TblRelativeReference)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblRelativeReferences(ByVal entity As TblRelativeReference)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblRequiredJobs(ByVal entity As TblRequiredJob)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblRequiredJobs(ByVal entity As TblRequiredJob)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblWifeHusbands(ByVal entity As TblWifeHusband)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblWifeHusbands(ByVal entity As TblWifeHusband)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblWorkShops(ByVal entity As TblWorkShop)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblWorkShops(ByVal entity As TblWorkShop)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblEmployees(ByVal entity As TblEmployee)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblEmployees(ByVal entity As TblEmployee)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblFamilyMembers(ByVal entity As TblFamilyMember)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblFamilyMembers(ByVal entity As TblFamilyMember)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
	
	Private Sub attach_TblTrainees(ByVal entity As TblTrainee)
		Me.SendPropertyChanging
		entity.TblApplicant = Me
	End Sub
	
	Private Sub detach_TblTrainees(ByVal entity As TblTrainee)
		Me.SendPropertyChanging
		entity.TblApplicant = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblEmployeeSalary2")>  _
Partial Public Class TblEmployeeSalary2
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmployeeSalaryID As Integer
	
	Private _EmployeeID As System.Nullable(Of Integer)
	
	Private _SalaryCatID As System.Nullable(Of Integer)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _Unit As String
	
	Private _Note As String
	
	Private _TblEmployee As EntityRef(Of TblEmployee)
	
	Private _TblSalaryCategory As EntityRef(Of TblSalaryCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeSalaryIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeSalaryIDChanged()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnSalaryCatIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSalaryCatIDChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnUnitChanging(value As String)
    End Sub
    Partial Private Sub OnUnitChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblEmployee = CType(Nothing, EntityRef(Of TblEmployee))
		Me._TblSalaryCategory = CType(Nothing, EntityRef(Of TblSalaryCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeSalaryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmployeeSalaryID() As Integer
		Get
			Return Me._EmployeeSalaryID
		End Get
		Set
			If ((Me._EmployeeSalaryID = value)  _
						= false) Then
				Me.OnEmployeeSalaryIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeSalaryID = value
				Me.SendPropertyChanged("EmployeeSalaryID")
				Me.OnEmployeeSalaryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int")>  _
	Public Property EmployeeID() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeID
		End Get
		Set
			If (Me._EmployeeID.Equals(value) = false) Then
				If Me._TblEmployee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalaryCatID", DbType:="Int")>  _
	Public Property SalaryCatID() As System.Nullable(Of Integer)
		Get
			Return Me._SalaryCatID
		End Get
		Set
			If (Me._SalaryCatID.Equals(value) = false) Then
				If Me._TblSalaryCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSalaryCatIDChanging(value)
				Me.SendPropertyChanging
				Me._SalaryCatID = value
				Me.SendPropertyChanged("SalaryCatID")
				Me.OnSalaryCatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Decimal(18,2)")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit", DbType:="VarChar(50)")>  _
	Public Property Unit() As String
		Get
			Return Me._Unit
		End Get
		Set
			If (String.Equals(Me._Unit, value) = false) Then
				Me.OnUnitChanging(value)
				Me.SendPropertyChanging
				Me._Unit = value
				Me.SendPropertyChanged("Unit")
				Me.OnUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="VarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblEmployee_TblEmployeeSalary2", Storage:="_TblEmployee", ThisKey:="EmployeeID", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblEmployee() As TblEmployee
		Get
			Return Me._TblEmployee.Entity
		End Get
		Set
			Dim previousValue As TblEmployee = Me._TblEmployee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblEmployee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblEmployee.Entity = Nothing
					previousValue.TblEmployeeSalary2s.Remove(Me)
				End If
				Me._TblEmployee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalary2s.Add(Me)
					Me._EmployeeID = value.Id
				Else
					Me._EmployeeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblEmployee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblSalaryCategory_TblEmployeeSalary2", Storage:="_TblSalaryCategory", ThisKey:="SalaryCatID", OtherKey:="SalaryCatID", IsForeignKey:=true)>  _
	Public Property TblSalaryCategory() As TblSalaryCategory
		Get
			Return Me._TblSalaryCategory.Entity
		End Get
		Set
			Dim previousValue As TblSalaryCategory = Me._TblSalaryCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblSalaryCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblSalaryCategory.Entity = Nothing
					previousValue.TblEmployeeSalary2s.Remove(Me)
				End If
				Me._TblSalaryCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblEmployeeSalary2s.Add(Me)
					Me._SalaryCatID = value.SalaryCatID
				Else
					Me._SalaryCatID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblSalaryCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TblTrainee")>  _
Partial Public Class TblTrainee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _TblTraineeLectures As EntitySet(Of TblTraineeLecture)
	
	Private _TblTraineePerformanceAppraisals As EntitySet(Of TblTraineePerformanceAppraisal)
	
	Private _TblApplicant As EntityRef(Of TblApplicant)
	
	Private _TblDepartment As EntityRef(Of TblDepartment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnApplicantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApplicantIdChanged()
    End Sub
    Partial Private Sub OnDepartmentIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDepartmentIdChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TblTraineeLectures = New EntitySet(Of TblTraineeLecture)(AddressOf Me.attach_TblTraineeLectures, AddressOf Me.detach_TblTraineeLectures)
		Me._TblTraineePerformanceAppraisals = New EntitySet(Of TblTraineePerformanceAppraisal)(AddressOf Me.attach_TblTraineePerformanceAppraisals, AddressOf Me.detach_TblTraineePerformanceAppraisals)
		Me._TblApplicant = CType(Nothing, EntityRef(Of TblApplicant))
		Me._TblDepartment = CType(Nothing, EntityRef(Of TblDepartment))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				If Me._TblApplicant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicantIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicantId = value
				Me.SendPropertyChanged("ApplicantId")
				Me.OnApplicantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				If Me._TblDepartment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDepartmentIdChanging(value)
				Me.SendPropertyChanging
				Me._DepartmentId = value
				Me.SendPropertyChanged("DepartmentId")
				Me.OnDepartmentIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="Date")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTrainee_TblTraineeLecture", Storage:="_TblTraineeLectures", ThisKey:="Id", OtherKey:="TraineeId")>  _
	Public Property TblTraineeLectures() As EntitySet(Of TblTraineeLecture)
		Get
			Return Me._TblTraineeLectures
		End Get
		Set
			Me._TblTraineeLectures.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblTrainee_TblTraineePerformanceAppraisal", Storage:="_TblTraineePerformanceAppraisals", ThisKey:="Id", OtherKey:="TrainneId")>  _
	Public Property TblTraineePerformanceAppraisals() As EntitySet(Of TblTraineePerformanceAppraisal)
		Get
			Return Me._TblTraineePerformanceAppraisals
		End Get
		Set
			Me._TblTraineePerformanceAppraisals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblApplicant_TblTrainee", Storage:="_TblApplicant", ThisKey:="ApplicantId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblApplicant() As TblApplicant
		Get
			Return Me._TblApplicant.Entity
		End Get
		Set
			Dim previousValue As TblApplicant = Me._TblApplicant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblApplicant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblApplicant.Entity = Nothing
					previousValue.TblTrainees.Remove(Me)
				End If
				Me._TblApplicant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTrainees.Add(Me)
					Me._ApplicantId = value.Id
				Else
					Me._ApplicantId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblApplicant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TblDepartment_TblTrainee", Storage:="_TblDepartment", ThisKey:="DepartmentId", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property TblDepartment() As TblDepartment
		Get
			Return Me._TblDepartment.Entity
		End Get
		Set
			Dim previousValue As TblDepartment = Me._TblDepartment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TblDepartment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TblDepartment.Entity = Nothing
					previousValue.TblTrainees.Remove(Me)
				End If
				Me._TblDepartment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TblTrainees.Add(Me)
					Me._DepartmentId = value.Id
				Else
					Me._DepartmentId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TblDepartment")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TblTraineeLectures(ByVal entity As TblTraineeLecture)
		Me.SendPropertyChanging
		entity.TblTrainee = Me
	End Sub
	
	Private Sub detach_TblTraineeLectures(ByVal entity As TblTraineeLecture)
		Me.SendPropertyChanging
		entity.TblTrainee = Nothing
	End Sub
	
	Private Sub attach_TblTraineePerformanceAppraisals(ByVal entity As TblTraineePerformanceAppraisal)
		Me.SendPropertyChanging
		entity.TblTrainee = Me
	End Sub
	
	Private Sub detach_TblTraineePerformanceAppraisals(ByVal entity As TblTraineePerformanceAppraisal)
		Me.SendPropertyChanging
		entity.TblTrainee = Nothing
	End Sub
End Class

Partial Public Class Filter_JobsPerDepartmentResult
	
	Private _Id As Integer
	
	Private _JobNumber As String
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _SupervisorId As System.Nullable(Of Integer)
	
	Private _JobCategoryId As System.Nullable(Of Integer)
	
	Private _ScheduleDepId As System.Nullable(Of Integer)
	
	Private _DefaultCardLabelName As String
	
	Private _DefaultJobNameForCard As String
	
	Private _DefaultJobNameForCardFemale As String
	
	Private _RequiredHoursForJobId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobNumber", DbType:="NVarChar(50)")>  _
	Public Property JobNumber() As String
		Get
			Return Me._JobNumber
		End Get
		Set
			If (String.Equals(Me._JobNumber, value) = false) Then
				Me._JobNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me._ArabicName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupervisorId", DbType:="Int")>  _
	Public Property SupervisorId() As System.Nullable(Of Integer)
		Get
			Return Me._SupervisorId
		End Get
		Set
			If (Me._SupervisorId.Equals(value) = false) Then
				Me._SupervisorId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobCategoryId", DbType:="Int")>  _
	Public Property JobCategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._JobCategoryId
		End Get
		Set
			If (Me._JobCategoryId.Equals(value) = false) Then
				Me._JobCategoryId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScheduleDepId", DbType:="Int")>  _
	Public Property ScheduleDepId() As System.Nullable(Of Integer)
		Get
			Return Me._ScheduleDepId
		End Get
		Set
			If (Me._ScheduleDepId.Equals(value) = false) Then
				Me._ScheduleDepId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultCardLabelName", DbType:="NVarChar(250)")>  _
	Public Property DefaultCardLabelName() As String
		Get
			Return Me._DefaultCardLabelName
		End Get
		Set
			If (String.Equals(Me._DefaultCardLabelName, value) = false) Then
				Me._DefaultCardLabelName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultJobNameForCard", DbType:="NVarChar(250)")>  _
	Public Property DefaultJobNameForCard() As String
		Get
			Return Me._DefaultJobNameForCard
		End Get
		Set
			If (String.Equals(Me._DefaultJobNameForCard, value) = false) Then
				Me._DefaultJobNameForCard = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultJobNameForCardFemale", DbType:="NVarChar(250)")>  _
	Public Property DefaultJobNameForCardFemale() As String
		Get
			Return Me._DefaultJobNameForCardFemale
		End Get
		Set
			If (String.Equals(Me._DefaultJobNameForCardFemale, value) = false) Then
				Me._DefaultJobNameForCardFemale = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredHoursForJobId", DbType:="Int")>  _
	Public Property RequiredHoursForJobId() As System.Nullable(Of Integer)
		Get
			Return Me._RequiredHoursForJobId
		End Get
		Set
			If (Me._RequiredHoursForJobId.Equals(value) = false) Then
				Me._RequiredHoursForJobId = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_SickVactApprovalResult
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _Reason As String
	
	Private _Note As String
	
	Private _Accepted As System.Nullable(Of Boolean)
	
	Private _RespondedById As System.Nullable(Of Integer)
	
	Private _RespondDate As System.Nullable(Of Date)
	
	Private _EmployeeName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me._NumberOfDays = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NVarChar(250)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me._Reason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(250)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me._Note = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accepted", DbType:="Bit")>  _
	Public Property Accepted() As System.Nullable(Of Boolean)
		Get
			Return Me._Accepted
		End Get
		Set
			If (Me._Accepted.Equals(value) = false) Then
				Me._Accepted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondedById", DbType:="Int")>  _
	Public Property RespondedById() As System.Nullable(Of Integer)
		Get
			Return Me._RespondedById
		End Get
		Set
			If (Me._RespondedById.Equals(value) = false) Then
				Me._RespondedById = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondDate", DbType:="Date")>  _
	Public Property RespondDate() As System.Nullable(Of Date)
		Get
			Return Me._RespondDate
		End Get
		Set
			If (Me._RespondDate.Equals(value) = false) Then
				Me._RespondDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_PersonalVacationApprovalResult
	
	Private _Id As Integer
	
	Private _PersonalVacationTypeId As System.Nullable(Of Integer)
	
	Private _DateFrom As System.Nullable(Of Date)
	
	Private _DateTo As System.Nullable(Of Date)
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _Accepted As System.Nullable(Of Boolean)
	
	Private _RespondedById As System.Nullable(Of Integer)
	
	Private _RespondDate As System.Nullable(Of Date)
	
	Private _Note As String
	
	Private _Expr1 As Integer
	
	Private _EmployeeName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PersonalVacationTypeId", DbType:="Int")>  _
	Public Property PersonalVacationTypeId() As System.Nullable(Of Integer)
		Get
			Return Me._PersonalVacationTypeId
		End Get
		Set
			If (Me._PersonalVacationTypeId.Equals(value) = false) Then
				Me._PersonalVacationTypeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateFrom", DbType:="Date")>  _
	Public Property DateFrom() As System.Nullable(Of Date)
		Get
			Return Me._DateFrom
		End Get
		Set
			If (Me._DateFrom.Equals(value) = false) Then
				Me._DateFrom = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateTo", DbType:="Date")>  _
	Public Property DateTo() As System.Nullable(Of Date)
		Get
			Return Me._DateTo
		End Get
		Set
			If (Me._DateTo.Equals(value) = false) Then
				Me._DateTo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accepted", DbType:="Bit")>  _
	Public Property Accepted() As System.Nullable(Of Boolean)
		Get
			Return Me._Accepted
		End Get
		Set
			If (Me._Accepted.Equals(value) = false) Then
				Me._Accepted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondedById", DbType:="Int")>  _
	Public Property RespondedById() As System.Nullable(Of Integer)
		Get
			Return Me._RespondedById
		End Get
		Set
			If (Me._RespondedById.Equals(value) = false) Then
				Me._RespondedById = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondDate", DbType:="DateTime")>  _
	Public Property RespondDate() As System.Nullable(Of Date)
		Get
			Return Me._RespondDate
		End Get
		Set
			If (Me._RespondDate.Equals(value) = false) Then
				Me._RespondDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(250)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me._Note = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expr1", DbType:="Int NOT NULL")>  _
	Public Property Expr1() As Integer
		Get
			Return Me._Expr1
		End Get
		Set
			If ((Me._Expr1 = value)  _
						= false) Then
				Me._Expr1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_LeavePermissionApprovalResult
	
	Private _Id As Integer
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _Reason As String
	
	Private _Note As String
	
	Private _Accepted As System.Nullable(Of Boolean)
	
	Private _RespondedById As System.Nullable(Of Integer)
	
	Private _RespondDate As System.Nullable(Of Date)
	
	Private _Expr1 As Integer
	
	Private _EmployeeName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me._EndTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reason", DbType:="NVarChar(250)")>  _
	Public Property Reason() As String
		Get
			Return Me._Reason
		End Get
		Set
			If (String.Equals(Me._Reason, value) = false) Then
				Me._Reason = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(250)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me._Note = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accepted", DbType:="Bit")>  _
	Public Property Accepted() As System.Nullable(Of Boolean)
		Get
			Return Me._Accepted
		End Get
		Set
			If (Me._Accepted.Equals(value) = false) Then
				Me._Accepted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondedById", DbType:="Int")>  _
	Public Property RespondedById() As System.Nullable(Of Integer)
		Get
			Return Me._RespondedById
		End Get
		Set
			If (Me._RespondedById.Equals(value) = false) Then
				Me._RespondedById = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondDate", DbType:="DateTime")>  _
	Public Property RespondDate() As System.Nullable(Of Date)
		Get
			Return Me._RespondDate
		End Get
		Set
			If (Me._RespondDate.Equals(value) = false) Then
				Me._RespondDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expr1", DbType:="Int NOT NULL")>  _
	Public Property Expr1() As Integer
		Get
			Return Me._Expr1
		End Get
		Set
			If ((Me._Expr1 = value)  _
						= false) Then
				Me._Expr1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_AssigndDepsToJobResult
	
	Private _Id As Integer
	
	Private _JobNumber As String
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _SupervisorId As System.Nullable(Of Integer)
	
	Private _JobCategoryId As System.Nullable(Of Integer)
	
	Private _ScheduleDepId As System.Nullable(Of Integer)
	
	Private _DefaultCardLabelName As String
	
	Private _DefaultJobNameForCard As String
	
	Private _DefaultJobNameForCardFemale As String
	
	Private _RequiredHoursForJobId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobNumber", DbType:="NVarChar(50)")>  _
	Public Property JobNumber() As String
		Get
			Return Me._JobNumber
		End Get
		Set
			If (String.Equals(Me._JobNumber, value) = false) Then
				Me._JobNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me._ArabicName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupervisorId", DbType:="Int")>  _
	Public Property SupervisorId() As System.Nullable(Of Integer)
		Get
			Return Me._SupervisorId
		End Get
		Set
			If (Me._SupervisorId.Equals(value) = false) Then
				Me._SupervisorId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobCategoryId", DbType:="Int")>  _
	Public Property JobCategoryId() As System.Nullable(Of Integer)
		Get
			Return Me._JobCategoryId
		End Get
		Set
			If (Me._JobCategoryId.Equals(value) = false) Then
				Me._JobCategoryId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScheduleDepId", DbType:="Int")>  _
	Public Property ScheduleDepId() As System.Nullable(Of Integer)
		Get
			Return Me._ScheduleDepId
		End Get
		Set
			If (Me._ScheduleDepId.Equals(value) = false) Then
				Me._ScheduleDepId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultCardLabelName", DbType:="NVarChar(250)")>  _
	Public Property DefaultCardLabelName() As String
		Get
			Return Me._DefaultCardLabelName
		End Get
		Set
			If (String.Equals(Me._DefaultCardLabelName, value) = false) Then
				Me._DefaultCardLabelName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultJobNameForCard", DbType:="NVarChar(250)")>  _
	Public Property DefaultJobNameForCard() As String
		Get
			Return Me._DefaultJobNameForCard
		End Get
		Set
			If (String.Equals(Me._DefaultJobNameForCard, value) = false) Then
				Me._DefaultJobNameForCard = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultJobNameForCardFemale", DbType:="NVarChar(250)")>  _
	Public Property DefaultJobNameForCardFemale() As String
		Get
			Return Me._DefaultJobNameForCardFemale
		End Get
		Set
			If (String.Equals(Me._DefaultJobNameForCardFemale, value) = false) Then
				Me._DefaultJobNameForCardFemale = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredHoursForJobId", DbType:="Int")>  _
	Public Property RequiredHoursForJobId() As System.Nullable(Of Integer)
		Get
			Return Me._RequiredHoursForJobId
		End Get
		Set
			If (Me._RequiredHoursForJobId.Equals(value) = false) Then
				Me._RequiredHoursForJobId = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_VactionsHolidaysDashBoardResult
	
	Private _Id As Integer
	
	Private _EmployeeName As String
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _BatchNumber As System.Nullable(Of Integer)
	
	Private _PIN As String
	
	Private _CardNumber As String
	
	Private _CardLabelName As String
	
	Private _CardQr1 As String
	
	Private _CardQr2 As String
	
	Private _Qr1 As System.Data.Linq.Binary
	
	Private _Qr2 As System.Data.Linq.Binary
	
	Private _FP As String
	
	Private _FPIndex As String
	
	Private _FPFlag As String
	
	Private _Id1 As Integer
	
	Private _Description As String
	
	Private _VacationDate As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _ExecutedDays As System.Nullable(Of Integer)
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _VacationId As System.Nullable(Of Integer)
	
	Private _IsVacation As System.Nullable(Of Boolean)
	
	Private _ExecutionDate As System.Nullable(Of Date)
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _Expr1 As String
	
	Private _Expr2 As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				Me._ApplicantId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchNumber", DbType:="Int")>  _
	Public Property BatchNumber() As System.Nullable(Of Integer)
		Get
			Return Me._BatchNumber
		End Get
		Set
			If (Me._BatchNumber.Equals(value) = false) Then
				Me._BatchNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PIN", DbType:="NVarChar(15)")>  _
	Public Property PIN() As String
		Get
			Return Me._PIN
		End Get
		Set
			If (String.Equals(Me._PIN, value) = false) Then
				Me._PIN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardNumber", DbType:="NVarChar(50)")>  _
	Public Property CardNumber() As String
		Get
			Return Me._CardNumber
		End Get
		Set
			If (String.Equals(Me._CardNumber, value) = false) Then
				Me._CardNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardLabelName", DbType:="NVarChar(50)")>  _
	Public Property CardLabelName() As String
		Get
			Return Me._CardLabelName
		End Get
		Set
			If (String.Equals(Me._CardLabelName, value) = false) Then
				Me._CardLabelName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardQr1", DbType:="NVarChar(250)")>  _
	Public Property CardQr1() As String
		Get
			Return Me._CardQr1
		End Get
		Set
			If (String.Equals(Me._CardQr1, value) = false) Then
				Me._CardQr1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CardQr2", DbType:="NVarChar(250)")>  _
	Public Property CardQr2() As String
		Get
			Return Me._CardQr2
		End Get
		Set
			If (String.Equals(Me._CardQr2, value) = false) Then
				Me._CardQr2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qr1", DbType:="Image")>  _
	Public Property Qr1() As System.Data.Linq.Binary
		Get
			Return Me._Qr1
		End Get
		Set
			If (Object.Equals(Me._Qr1, value) = false) Then
				Me._Qr1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qr2", DbType:="Image")>  _
	Public Property Qr2() As System.Data.Linq.Binary
		Get
			Return Me._Qr2
		End Get
		Set
			If (Object.Equals(Me._Qr2, value) = false) Then
				Me._Qr2 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FP", DbType:="NVarChar(MAX)")>  _
	Public Property FP() As String
		Get
			Return Me._FP
		End Get
		Set
			If (String.Equals(Me._FP, value) = false) Then
				Me._FP = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FPIndex", DbType:="NVarChar(50)")>  _
	Public Property FPIndex() As String
		Get
			Return Me._FPIndex
		End Get
		Set
			If (String.Equals(Me._FPIndex, value) = false) Then
				Me._FPIndex = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FPFlag", DbType:="NVarChar(50)")>  _
	Public Property FPFlag() As String
		Get
			Return Me._FPFlag
		End Get
		Set
			If (String.Equals(Me._FPFlag, value) = false) Then
				Me._FPFlag = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id1", DbType:="Int NOT NULL")>  _
	Public Property Id1() As Integer
		Get
			Return Me._Id1
		End Get
		Set
			If ((Me._Id1 = value)  _
						= false) Then
				Me._Id1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationDate", DbType:="DateTime")>  _
	Public Property VacationDate() As System.Nullable(Of Date)
		Get
			Return Me._VacationDate
		End Get
		Set
			If (Me._VacationDate.Equals(value) = false) Then
				Me._VacationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me._NumberOfDays = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutedDays", DbType:="Int")>  _
	Public Property ExecutedDays() As System.Nullable(Of Integer)
		Get
			Return Me._ExecutedDays
		End Get
		Set
			If (Me._ExecutedDays.Equals(value) = false) Then
				Me._ExecutedDays = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationId", DbType:="Int")>  _
	Public Property VacationId() As System.Nullable(Of Integer)
		Get
			Return Me._VacationId
		End Get
		Set
			If (Me._VacationId.Equals(value) = false) Then
				Me._VacationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsVacation", DbType:="Bit")>  _
	Public Property IsVacation() As System.Nullable(Of Boolean)
		Get
			Return Me._IsVacation
		End Get
		Set
			If (Me._IsVacation.Equals(value) = false) Then
				Me._IsVacation = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionDate", DbType:="DateTime")>  _
	Public Property ExecutionDate() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionDate
		End Get
		Set
			If (Me._ExecutionDate.Equals(value) = false) Then
				Me._ExecutionDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me._Year = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expr1", DbType:="NVarChar(50)")>  _
	Public Property Expr1() As String
		Get
			Return Me._Expr1
		End Get
		Set
			If (String.Equals(Me._Expr1, value) = false) Then
				Me._Expr1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expr2", DbType:="Int")>  _
	Public Property Expr2() As System.Nullable(Of Integer)
		Get
			Return Me._Expr2
		End Get
		Set
			If (Me._Expr2.Equals(value) = false) Then
				Me._Expr2 = value
			End If
		End Set
	End Property
End Class

Partial Public Class AssignYearlyVacationsToEmployeeResult
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _VacationId As System.Nullable(Of Integer)
	
	Private _VacationDate As System.Nullable(Of Date)
	
	Private _NumberOfDays As System.Nullable(Of Integer)
	
	Private _ExecutedDays As Integer
	
	Private _Year As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationId", DbType:="Int")>  _
	Public Property VacationId() As System.Nullable(Of Integer)
		Get
			Return Me._VacationId
		End Get
		Set
			If (Me._VacationId.Equals(value) = false) Then
				Me._VacationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VacationDate", DbType:="Date")>  _
	Public Property VacationDate() As System.Nullable(Of Date)
		Get
			Return Me._VacationDate
		End Get
		Set
			If (Me._VacationDate.Equals(value) = false) Then
				Me._VacationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfDays", DbType:="Int")>  _
	Public Property NumberOfDays() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfDays
		End Get
		Set
			If (Me._NumberOfDays.Equals(value) = false) Then
				Me._NumberOfDays = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutedDays", DbType:="Int NOT NULL")>  _
	Public Property ExecutedDays() As Integer
		Get
			Return Me._ExecutedDays
		End Get
		Set
			If ((Me._ExecutedDays = value)  _
						= false) Then
				Me._ExecutedDays = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me._Year = value
			End If
		End Set
	End Property
End Class

Partial Public Class AveragePAPerTaskForEmployeeResult
	
	Private _employeeId As Integer
	
	Private _EmployeeName As String
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _PAPerJobId As System.Nullable(Of Integer)
	
	Private _AvgPAPerTaskId As Integer
	
	Private _JobName As String
	
	Private _Average As System.Nullable(Of Decimal)
	
	Private _TaskName As String
	
	Private _Ratio As System.Nullable(Of Decimal)
	
	Private _Note As String
	
	Private _PAName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_employeeId", DbType:="Int NOT NULL")>  _
	Public Property employeeId() As Integer
		Get
			Return Me._employeeId
		End Get
		Set
			If ((Me._employeeId = value)  _
						= false) Then
				Me._employeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				Me._JobId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAPerJobId", DbType:="Int")>  _
	Public Property PAPerJobId() As System.Nullable(Of Integer)
		Get
			Return Me._PAPerJobId
		End Get
		Set
			If (Me._PAPerJobId.Equals(value) = false) Then
				Me._PAPerJobId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AvgPAPerTaskId", DbType:="Int NOT NULL")>  _
	Public Property AvgPAPerTaskId() As Integer
		Get
			Return Me._AvgPAPerTaskId
		End Get
		Set
			If ((Me._AvgPAPerTaskId = value)  _
						= false) Then
				Me._AvgPAPerTaskId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobName", DbType:="NVarChar(50)")>  _
	Public Property JobName() As String
		Get
			Return Me._JobName
		End Get
		Set
			If (String.Equals(Me._JobName, value) = false) Then
				Me._JobName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Average", DbType:="Decimal(18,2)")>  _
	Public Property Average() As System.Nullable(Of Decimal)
		Get
			Return Me._Average
		End Get
		Set
			If (Me._Average.Equals(value) = false) Then
				Me._Average = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaskName", DbType:="NVarChar(MAX)")>  _
	Public Property TaskName() As String
		Get
			Return Me._TaskName
		End Get
		Set
			If (String.Equals(Me._TaskName, value) = false) Then
				Me._TaskName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ratio", DbType:="Decimal(18,2)")>  _
	Public Property Ratio() As System.Nullable(Of Decimal)
		Get
			Return Me._Ratio
		End Get
		Set
			If (Me._Ratio.Equals(value) = false) Then
				Me._Ratio = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me._Note = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PAName", DbType:="NVarChar(50)")>  _
	Public Property PAName() As String
		Get
			Return Me._PAName
		End Get
		Set
			If (String.Equals(Me._PAName, value) = false) Then
				Me._PAName = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_EmployeeJobSalaryDetailsResult
	
	Private _EmployeeName As String
	
	Private _EmployeeId As Integer
	
	Private _DepName As String
	
	Private _DepDesc As String
	
	Private _JobName As String
	
	Private _BasicSalary As System.Nullable(Of Decimal)
	
	Private _NSSFSalary As System.Nullable(Of Decimal)
	
	Private _FamilySalary As System.Nullable(Of Decimal)
	
	Private _OvertimeValue As System.Nullable(Of Decimal)
	
	Private _transPerDay As System.Nullable(Of Decimal)
	
	Private _ExperienceIn As System.Nullable(Of Decimal)
	
	Private _ExperienceOut As System.Nullable(Of Decimal)
	
	Private _PositionValue As System.Nullable(Of Decimal)
	
	Private _IsCash As System.Nullable(Of Boolean)
	
	Private _AccountNumber As String
	
	Private _ClosedArea As System.Nullable(Of Decimal)
	
	Private _Note As String
	
	Private _CurrencyId As System.Nullable(Of Integer)
	
	Private _CurrencyName As String
	
	Private _CurrId As Integer
	
	Private _ClassificantionId As System.Nullable(Of Integer)
	
	Private _DegreeId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepName", DbType:="NVarChar(50)")>  _
	Public Property DepName() As String
		Get
			Return Me._DepName
		End Get
		Set
			If (String.Equals(Me._DepName, value) = false) Then
				Me._DepName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepDesc", DbType:="NVarChar(MAX)")>  _
	Public Property DepDesc() As String
		Get
			Return Me._DepDesc
		End Get
		Set
			If (String.Equals(Me._DepDesc, value) = false) Then
				Me._DepDesc = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobName", DbType:="NVarChar(50)")>  _
	Public Property JobName() As String
		Get
			Return Me._JobName
		End Get
		Set
			If (String.Equals(Me._JobName, value) = false) Then
				Me._JobName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BasicSalary", DbType:="Decimal(18,2)")>  _
	Public Property BasicSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._BasicSalary
		End Get
		Set
			If (Me._BasicSalary.Equals(value) = false) Then
				Me._BasicSalary = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NSSFSalary", DbType:="Decimal(18,2)")>  _
	Public Property NSSFSalary() As System.Nullable(Of Decimal)
		Get
			Return Me._NSSFSalary
		End Get
		Set
			If (Me._NSSFSalary.Equals(value) = false) Then
				Me._NSSFSalary = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FamilySalary", DbType:="Decimal(18,2)")>  _
	Public Property FamilySalary() As System.Nullable(Of Decimal)
		Get
			Return Me._FamilySalary
		End Get
		Set
			If (Me._FamilySalary.Equals(value) = false) Then
				Me._FamilySalary = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OvertimeValue", DbType:="Decimal(18,2)")>  _
	Public Property OvertimeValue() As System.Nullable(Of Decimal)
		Get
			Return Me._OvertimeValue
		End Get
		Set
			If (Me._OvertimeValue.Equals(value) = false) Then
				Me._OvertimeValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transPerDay", DbType:="Decimal(18,2)")>  _
	Public Property transPerDay() As System.Nullable(Of Decimal)
		Get
			Return Me._transPerDay
		End Get
		Set
			If (Me._transPerDay.Equals(value) = false) Then
				Me._transPerDay = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceIn", DbType:="Decimal(18,2)")>  _
	Public Property ExperienceIn() As System.Nullable(Of Decimal)
		Get
			Return Me._ExperienceIn
		End Get
		Set
			If (Me._ExperienceIn.Equals(value) = false) Then
				Me._ExperienceIn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExperienceOut", DbType:="Decimal(18,2)")>  _
	Public Property ExperienceOut() As System.Nullable(Of Decimal)
		Get
			Return Me._ExperienceOut
		End Get
		Set
			If (Me._ExperienceOut.Equals(value) = false) Then
				Me._ExperienceOut = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PositionValue", DbType:="Decimal(18,2)")>  _
	Public Property PositionValue() As System.Nullable(Of Decimal)
		Get
			Return Me._PositionValue
		End Get
		Set
			If (Me._PositionValue.Equals(value) = false) Then
				Me._PositionValue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCash", DbType:="Bit")>  _
	Public Property IsCash() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCash
		End Get
		Set
			If (Me._IsCash.Equals(value) = false) Then
				Me._IsCash = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(50)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me._AccountNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClosedArea", DbType:="Decimal(18,2)")>  _
	Public Property ClosedArea() As System.Nullable(Of Decimal)
		Get
			Return Me._ClosedArea
		End Get
		Set
			If (Me._ClosedArea.Equals(value) = false) Then
				Me._ClosedArea = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", DbType:="NVarChar(50)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me._Note = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyId", DbType:="Int")>  _
	Public Property CurrencyId() As System.Nullable(Of Integer)
		Get
			Return Me._CurrencyId
		End Get
		Set
			If (Me._CurrencyId.Equals(value) = false) Then
				Me._CurrencyId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyName", DbType:="NVarChar(50)")>  _
	Public Property CurrencyName() As String
		Get
			Return Me._CurrencyName
		End Get
		Set
			If (String.Equals(Me._CurrencyName, value) = false) Then
				Me._CurrencyName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrId", DbType:="Int NOT NULL")>  _
	Public Property CurrId() As Integer
		Get
			Return Me._CurrId
		End Get
		Set
			If ((Me._CurrId = value)  _
						= false) Then
				Me._CurrId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassificantionId", DbType:="Int")>  _
	Public Property ClassificantionId() As System.Nullable(Of Integer)
		Get
			Return Me._ClassificantionId
		End Get
		Set
			If (Me._ClassificantionId.Equals(value) = false) Then
				Me._ClassificantionId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DegreeId", DbType:="Int")>  _
	Public Property DegreeId() As System.Nullable(Of Integer)
		Get
			Return Me._DegreeId
		End Get
		Set
			If (Me._DegreeId.Equals(value) = false) Then
				Me._DegreeId = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_MonthPerYearCalendarResult
	
	Private _MonthId As System.Nullable(Of Integer)
	
	Private _Posted As System.Nullable(Of Boolean)
	
	Private _Locked As System.Nullable(Of Boolean)
	
	Private _PostNote As String
	
	Private _TransId As System.Nullable(Of Integer)
	
	Private _PaymentTransId As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _ArabicName As String
	
	Private _Id As Integer
	
	Private _Year As System.Nullable(Of Integer)
	
	Private _YearId As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthId", DbType:="Int")>  _
	Public Property MonthId() As System.Nullable(Of Integer)
		Get
			Return Me._MonthId
		End Get
		Set
			If (Me._MonthId.Equals(value) = false) Then
				Me._MonthId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Posted", DbType:="Bit")>  _
	Public Property Posted() As System.Nullable(Of Boolean)
		Get
			Return Me._Posted
		End Get
		Set
			If (Me._Posted.Equals(value) = false) Then
				Me._Posted = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Locked", DbType:="Bit")>  _
	Public Property Locked() As System.Nullable(Of Boolean)
		Get
			Return Me._Locked
		End Get
		Set
			If (Me._Locked.Equals(value) = false) Then
				Me._Locked = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostNote", DbType:="NVarChar(50)")>  _
	Public Property PostNote() As String
		Get
			Return Me._PostNote
		End Get
		Set
			If (String.Equals(Me._PostNote, value) = false) Then
				Me._PostNote = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransId", DbType:="Int")>  _
	Public Property TransId() As System.Nullable(Of Integer)
		Get
			Return Me._TransId
		End Get
		Set
			If (Me._TransId.Equals(value) = false) Then
				Me._TransId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentTransId", DbType:="Int")>  _
	Public Property PaymentTransId() As System.Nullable(Of Integer)
		Get
			Return Me._PaymentTransId
		End Get
		Set
			If (Me._PaymentTransId.Equals(value) = false) Then
				Me._PaymentTransId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArabicName", DbType:="NVarChar(50)")>  _
	Public Property ArabicName() As String
		Get
			Return Me._ArabicName
		End Get
		Set
			If (String.Equals(Me._ArabicName, value) = false) Then
				Me._ArabicName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Year", DbType:="Int")>  _
	Public Property Year() As System.Nullable(Of Integer)
		Get
			Return Me._Year
		End Get
		Set
			If (Me._Year.Equals(value) = false) Then
				Me._Year = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YearId", DbType:="Int")>  _
	Public Property YearId() As System.Nullable(Of Integer)
		Get
			Return Me._YearId
		End Get
		Set
			If (Me._YearId.Equals(value) = false) Then
				Me._YearId = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_EmployeeExecutedHolidaysResult
	
	Private _Holiday As String
	
	Private _EmployeeName As String
	
	Private _HolidayDate As System.Nullable(Of Date)
	
	Private _ExecutedDays As System.Nullable(Of Integer)
	
	Private _ExecutionDate As System.Nullable(Of Date)
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _HolidayId As System.Nullable(Of Integer)
	
	Private _Id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Holiday", DbType:="NVarChar(50)")>  _
	Public Property Holiday() As String
		Get
			Return Me._Holiday
		End Get
		Set
			If (String.Equals(Me._Holiday, value) = false) Then
				Me._Holiday = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="NVarChar(50)")>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me._EmployeeName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HolidayDate", DbType:="DateTime")>  _
	Public Property HolidayDate() As System.Nullable(Of Date)
		Get
			Return Me._HolidayDate
		End Get
		Set
			If (Me._HolidayDate.Equals(value) = false) Then
				Me._HolidayDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutedDays", DbType:="Int")>  _
	Public Property ExecutedDays() As System.Nullable(Of Integer)
		Get
			Return Me._ExecutedDays
		End Get
		Set
			If (Me._ExecutedDays.Equals(value) = false) Then
				Me._ExecutedDays = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionDate", DbType:="DateTime")>  _
	Public Property ExecutionDate() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionDate
		End Get
		Set
			If (Me._ExecutionDate.Equals(value) = false) Then
				Me._ExecutionDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				Me._StatusId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HolidayId", DbType:="Int")>  _
	Public Property HolidayId() As System.Nullable(Of Integer)
		Get
			Return Me._HolidayId
		End Get
		Set
			If (Me._HolidayId.Equals(value) = false) Then
				Me._HolidayId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_ApplicantListResult
	
	Private _FullName As String
	
	Private _Id As Integer
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Mobile As String
	
	Private _PhoneNumber As String
	
	Private _Gender As String
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _Age As String
	
	Private _MaritalStatus As String
	
	Private _Nationality As String
	
	Private _NumberOfKids As System.Nullable(Of Integer)
	
	Private _BloodId As System.Nullable(Of Integer)
	
	Private _ApplicationDate As System.Nullable(Of Date)
	
	Private _MotherName As String
	
	Private _PlaceOfBirth As String
	
	Private _RecordNumber As System.Nullable(Of Integer)
	
	Private _RecordPlace As String
	
	Private _Mohafaza As String
	
	Private _Kadaa As String
	
	Private _Country As String
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _ApplicantNumber As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(153)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me._FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me._MiddleName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me._LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me._Mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me._PhoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me._Gender = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me._DateOfBirth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="NVarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me._Age = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="NVarChar(50)")>  _
	Public Property MaritalStatus() As String
		Get
			Return Me._MaritalStatus
		End Get
		Set
			If (String.Equals(Me._MaritalStatus, value) = false) Then
				Me._MaritalStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(50)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me._Nationality = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumberOfKids", DbType:="Int")>  _
	Public Property NumberOfKids() As System.Nullable(Of Integer)
		Get
			Return Me._NumberOfKids
		End Get
		Set
			If (Me._NumberOfKids.Equals(value) = false) Then
				Me._NumberOfKids = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BloodId", DbType:="Int")>  _
	Public Property BloodId() As System.Nullable(Of Integer)
		Get
			Return Me._BloodId
		End Get
		Set
			If (Me._BloodId.Equals(value) = false) Then
				Me._BloodId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDate", DbType:="Date")>  _
	Public Property ApplicationDate() As System.Nullable(Of Date)
		Get
			Return Me._ApplicationDate
		End Get
		Set
			If (Me._ApplicationDate.Equals(value) = false) Then
				Me._ApplicationDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MotherName", DbType:="NVarChar(50)")>  _
	Public Property MotherName() As String
		Get
			Return Me._MotherName
		End Get
		Set
			If (String.Equals(Me._MotherName, value) = false) Then
				Me._MotherName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlaceOfBirth", DbType:="NVarChar(50)")>  _
	Public Property PlaceOfBirth() As String
		Get
			Return Me._PlaceOfBirth
		End Get
		Set
			If (String.Equals(Me._PlaceOfBirth, value) = false) Then
				Me._PlaceOfBirth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordNumber", DbType:="Int")>  _
	Public Property RecordNumber() As System.Nullable(Of Integer)
		Get
			Return Me._RecordNumber
		End Get
		Set
			If (Me._RecordNumber.Equals(value) = false) Then
				Me._RecordNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordPlace", DbType:="NVarChar(50)")>  _
	Public Property RecordPlace() As String
		Get
			Return Me._RecordPlace
		End Get
		Set
			If (String.Equals(Me._RecordPlace, value) = false) Then
				Me._RecordPlace = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mohafaza", DbType:="NVarChar(50)")>  _
	Public Property Mohafaza() As String
		Get
			Return Me._Mohafaza
		End Get
		Set
			If (String.Equals(Me._Mohafaza, value) = false) Then
				Me._Mohafaza = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Kadaa", DbType:="NVarChar(50)")>  _
	Public Property Kadaa() As String
		Get
			Return Me._Kadaa
		End Get
		Set
			If (String.Equals(Me._Kadaa, value) = false) Then
				Me._Kadaa = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me._Country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				Me._StatusId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantNumber", DbType:="Decimal(38,0)")>  _
	Public Property ApplicantNumber() As System.Nullable(Of Decimal)
		Get
			Return Me._ApplicantNumber
		End Get
		Set
			If (Me._ApplicantNumber.Equals(value) = false) Then
				Me._ApplicantNumber = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_ApplicantEmployeeJobResult
	
	Private _Id As Integer
	
	Private _DepName As String
	
	Private _BatchNumber As System.Nullable(Of Integer)
	
	Private _JobName As String
	
	Private _EmployeeId As System.Nullable(Of Integer)
	
	Private _FullName As String
	
	Private _Gender As String
	
	Private _JobNumber As String
	
	Private _Date As System.Nullable(Of Date)
	
	Private _EmployeeId1 As Integer
	
	Private _ApplicantId As Integer
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _JobId As System.Nullable(Of Integer)
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _traineeId As System.Nullable(Of Integer)
	
	Private _Attachmment As System.Data.Linq.Binary
	
	Private _AttachmentType As String
	
	Private _Nationality As String
	
	Private _PIN As String
	
	Private _Age As String
	
	Private _Mohafaza As String
	
	Private _Kadaa As String
	
	Private _Country As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepName", DbType:="NVarChar(50)")>  _
	Public Property DepName() As String
		Get
			Return Me._DepName
		End Get
		Set
			If (String.Equals(Me._DepName, value) = false) Then
				Me._DepName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchNumber", DbType:="Int")>  _
	Public Property BatchNumber() As System.Nullable(Of Integer)
		Get
			Return Me._BatchNumber
		End Get
		Set
			If (Me._BatchNumber.Equals(value) = false) Then
				Me._BatchNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobName", DbType:="NVarChar(50)")>  _
	Public Property JobName() As String
		Get
			Return Me._JobName
		End Get
		Set
			If (String.Equals(Me._JobName, value) = false) Then
				Me._JobName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int")>  _
	Public Property EmployeeId() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeId
		End Get
		Set
			If (Me._EmployeeId.Equals(value) = false) Then
				Me._EmployeeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(153)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me._Gender = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobNumber", DbType:="NVarChar(50)")>  _
	Public Property JobNumber() As String
		Get
			Return Me._JobNumber
		End Get
		Set
			If (String.Equals(Me._JobNumber, value) = false) Then
				Me._JobNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="Date")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId1", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId1() As Integer
		Get
			Return Me._EmployeeId1
		End Get
		Set
			If ((Me._EmployeeId1 = value)  _
						= false) Then
				Me._EmployeeId1 = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int NOT NULL")>  _
	Public Property ApplicantId() As Integer
		Get
			Return Me._ApplicantId
		End Get
		Set
			If ((Me._ApplicantId = value)  _
						= false) Then
				Me._ApplicantId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				Me._DepartmentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JobId", DbType:="Int")>  _
	Public Property JobId() As System.Nullable(Of Integer)
		Get
			Return Me._JobId
		End Get
		Set
			If (Me._JobId.Equals(value) = false) Then
				Me._JobId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				Me._StatusId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_traineeId", DbType:="Int")>  _
	Public Property traineeId() As System.Nullable(Of Integer)
		Get
			Return Me._traineeId
		End Get
		Set
			If (Me._traineeId.Equals(value) = false) Then
				Me._traineeId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Attachmment", DbType:="VarBinary(MAX)")>  _
	Public Property Attachmment() As System.Data.Linq.Binary
		Get
			Return Me._Attachmment
		End Get
		Set
			If (Object.Equals(Me._Attachmment, value) = false) Then
				Me._Attachmment = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AttachmentType", DbType:="VarChar(50)")>  _
	Public Property AttachmentType() As String
		Get
			Return Me._AttachmentType
		End Get
		Set
			If (String.Equals(Me._AttachmentType, value) = false) Then
				Me._AttachmentType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(50)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me._Nationality = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PIN", DbType:="NVarChar(15)")>  _
	Public Property PIN() As String
		Get
			Return Me._PIN
		End Get
		Set
			If (String.Equals(Me._PIN, value) = false) Then
				Me._PIN = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="NVarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me._Age = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mohafaza", DbType:="NVarChar(50)")>  _
	Public Property Mohafaza() As String
		Get
			Return Me._Mohafaza
		End Get
		Set
			If (String.Equals(Me._Mohafaza, value) = false) Then
				Me._Mohafaza = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Kadaa", DbType:="NVarChar(50)")>  _
	Public Property Kadaa() As String
		Get
			Return Me._Kadaa
		End Get
		Set
			If (String.Equals(Me._Kadaa, value) = false) Then
				Me._Kadaa = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me._Country = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_ApplicantIndexResult
	
	Private _ApplicantId As Integer
	
	Private _FullName As String
	
	Private _Gender As String
	
	Private _MaritalStatus As String
	
	Private _Nationality As String
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _ApplicantNumber As System.Nullable(Of Decimal)
	
	Private _StatusName As String
	
	Private _Major As String
	
	Private _University As String
	
	Private _CertificateId As System.Nullable(Of Integer)
	
	Private _CertificateName As String
	
	Private _City_Town As String
	
	Private _District As String
	
	Private _PhoneNumber As String
	
	Private _Mobile As String
	
	Private _DateOfBirth As System.Nullable(Of Date)
	
	Private _Age As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int NOT NULL")>  _
	Public Property ApplicantId() As Integer
		Get
			Return Me._ApplicantId
		End Get
		Set
			If ((Me._ApplicantId = value)  _
						= false) Then
				Me._ApplicantId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(153)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me._Gender = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="NVarChar(50)")>  _
	Public Property MaritalStatus() As String
		Get
			Return Me._MaritalStatus
		End Get
		Set
			If (String.Equals(Me._MaritalStatus, value) = false) Then
				Me._MaritalStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(50)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me._Nationality = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				Me._StatusId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantNumber", DbType:="Decimal(38,0)")>  _
	Public Property ApplicantNumber() As System.Nullable(Of Decimal)
		Get
			Return Me._ApplicantNumber
		End Get
		Set
			If (Me._ApplicantNumber.Equals(value) = false) Then
				Me._ApplicantNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusName", DbType:="NVarChar(50)")>  _
	Public Property StatusName() As String
		Get
			Return Me._StatusName
		End Get
		Set
			If (String.Equals(Me._StatusName, value) = false) Then
				Me._StatusName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Major", DbType:="NVarChar(50)")>  _
	Public Property Major() As String
		Get
			Return Me._Major
		End Get
		Set
			If (String.Equals(Me._Major, value) = false) Then
				Me._Major = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_University", DbType:="NVarChar(50)")>  _
	Public Property University() As String
		Get
			Return Me._University
		End Get
		Set
			If (String.Equals(Me._University, value) = false) Then
				Me._University = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CertificateId", DbType:="Int")>  _
	Public Property CertificateId() As System.Nullable(Of Integer)
		Get
			Return Me._CertificateId
		End Get
		Set
			If (Me._CertificateId.Equals(value) = false) Then
				Me._CertificateId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CertificateName", DbType:="NVarChar(50)")>  _
	Public Property CertificateName() As String
		Get
			Return Me._CertificateName
		End Get
		Set
			If (String.Equals(Me._CertificateName, value) = false) Then
				Me._CertificateName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[City\Town]", Storage:="_City_Town", DbType:="NVarChar(50)")>  _
	Public Property City_Town() As String
		Get
			Return Me._City_Town
		End Get
		Set
			If (String.Equals(Me._City_Town, value) = false) Then
				Me._City_Town = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District", DbType:="NVarChar(50)")>  _
	Public Property District() As String
		Get
			Return Me._District
		End Get
		Set
			If (String.Equals(Me._District, value) = false) Then
				Me._District = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="NVarChar(50)")>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me._PhoneNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me._Mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfBirth", DbType:="Date")>  _
	Public Property DateOfBirth() As System.Nullable(Of Date)
		Get
			Return Me._DateOfBirth
		End Get
		Set
			If (Me._DateOfBirth.Equals(value) = false) Then
				Me._DateOfBirth = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="NVarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me._Age = value
			End If
		End Set
	End Property
End Class

Partial Public Class Filter_ListOfPAforTraineeResult
	
	Private _Id As Integer
	
	Private _ApplicantId As System.Nullable(Of Integer)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _FullName As String
	
	Private _ApplicantNumber As System.Nullable(Of Decimal)
	
	Private _StatusId As System.Nullable(Of Integer)
	
	Private _Gender As String
	
	Private _Age As String
	
	Private _Nationality As String
	
	Private _MaritalStatus As String
	
	Private _Mohafaza As String
	
	Private _Kadaa As String
	
	Private _Country As String
	
	Private _DepartmentId As System.Nullable(Of Integer)
	
	Private _DepName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL")>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantId", DbType:="Int")>  _
	Public Property ApplicantId() As System.Nullable(Of Integer)
		Get
			Return Me._ApplicantId
		End Get
		Set
			If (Me._ApplicantId.Equals(value) = false) Then
				Me._ApplicantId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="Date")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me._StartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(152)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicantNumber", DbType:="Decimal(38,0)")>  _
	Public Property ApplicantNumber() As System.Nullable(Of Decimal)
		Get
			Return Me._ApplicantNumber
		End Get
		Set
			If (Me._ApplicantNumber.Equals(value) = false) Then
				Me._ApplicantNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusId", DbType:="Int")>  _
	Public Property StatusId() As System.Nullable(Of Integer)
		Get
			Return Me._StatusId
		End Get
		Set
			If (Me._StatusId.Equals(value) = false) Then
				Me._StatusId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(50)")>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me._Gender = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="NVarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me._Age = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", DbType:="NVarChar(50)")>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me._Nationality = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MaritalStatus", DbType:="NVarChar(50)")>  _
	Public Property MaritalStatus() As String
		Get
			Return Me._MaritalStatus
		End Get
		Set
			If (String.Equals(Me._MaritalStatus, value) = false) Then
				Me._MaritalStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mohafaza", DbType:="NVarChar(50)")>  _
	Public Property Mohafaza() As String
		Get
			Return Me._Mohafaza
		End Get
		Set
			If (String.Equals(Me._Mohafaza, value) = false) Then
				Me._Mohafaza = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Kadaa", DbType:="NVarChar(50)")>  _
	Public Property Kadaa() As String
		Get
			Return Me._Kadaa
		End Get
		Set
			If (String.Equals(Me._Kadaa, value) = false) Then
				Me._Kadaa = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me._Country = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentId", DbType:="Int")>  _
	Public Property DepartmentId() As System.Nullable(Of Integer)
		Get
			Return Me._DepartmentId
		End Get
		Set
			If (Me._DepartmentId.Equals(value) = false) Then
				Me._DepartmentId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepName", DbType:="NVarChar(50)")>  _
	Public Property DepName() As String
		Get
			Return Me._DepName
		End Get
		Set
			If (String.Equals(Me._DepName, value) = false) Then
				Me._DepName = value
			End If
		End Set
	End Property
End Class
